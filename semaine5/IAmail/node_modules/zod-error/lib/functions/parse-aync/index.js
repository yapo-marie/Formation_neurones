"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAsync = void 0;
const __1 = require("..");
/**
 * Asynchronously parses a Zod schema
 * and throws a generic error.
 * Only required if schema contains async
 * .refine() or .transform() functions.
 * @export
 * @template T
 * @param {T} schema
 * @param {unknown} data
 * @param {ErrorMessageOptions} [options]
 * @return {*}  {Promise<T['_output']>}
 */
function parseAsync(schema, data, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield schema.safeParseAsync(data);
        if (!result.success) {
            const message = (0, __1.generateErrorMessage)(result.error.issues, options);
            throw new Error(message);
        }
        return result.data;
    });
}
exports.parseAsync = parseAsync;
