{"version":3,"sources":["../src/index.ts","../src/utils/formatting.ts","../src/utils/get-available-pipes.ts","../src/utils/get-available-tools.ts","../src/utils/heading.ts","../src/utils/icons.ts","../src/utils/is-tool-present.ts","../src/utils/config/config-handler.ts","../src/utils/retrieve-credentials.ts","../src/utils/ts-format-code.ts","../src/add/index.ts","../src/auth/index.ts","../src/build/index.ts","../src/dev/data/models.ts","../src/dev/utils/dlog.ts","../src/utils/memory/compare-docs-list.ts","../src/utils/memory/constants.ts","../src/utils/memory/load-memory-files.ts","../src/utils/memory/get-document-content.ts","../src/utils/memory/lib.ts","../src/utils/memory/db/lib.ts","../types/memory.ts","../src/utils/logger-utils.ts","../src/utils/logger.ts","../src/utils/memory/generate-local-embeddings.ts","../src/utils/memory/generate-openai-embeddings.ts","../src/utils/memory/load-memory-config.ts","../src/utils/memory/handle-old-memory-config.ts","../src/utils/memory/print-diff-table.ts","../src/deploy/index.ts","../src/utils/memory/git-sync/handle-git-sync-memories.ts","../src/utils/memory/git-sync/save-deployed-commit-in-config.ts","../src/utils/memory/git-sync/get-changed-files-between-commits.ts","../src/utils/memory/generate-embeddings.ts","../src/utils/memory/chunker.ts","../src/utils/memory/git-sync/save-embedded-commit-in-config.ts","../src/utils/memory/check-memory-doc-exists.ts","../src/utils/memory/check-memory-exist.ts","../src/deploy/document.ts","../src/dev/index.ts","../src/dev/hono/errors.ts","../src/dev/middleware/custom-cors.ts","../src/dev/middleware/powered-by.ts","../src/dev/middleware/pre-flight.ts","../src/dev/routes/base.ts","../src/dev/utils/thread/get-few-shot-messages.ts","../src/data/models.ts","../src/dev/data/globals.ts","../src/dev/utils/thread/add-json-mode.ts","../src/dev/utils/thread/get-system-prompt.ts","../src/dev/utils/thread/process-messages.ts","../src/dev/utils/thread/get-run-thread.ts","../src/dev/providers/anthropic/api.ts","../src/dev/providers/utils.ts","../src/dev/providers/anthropic/chatComplete.ts","../src/dev/providers/anthropic/index.ts","../src/dev/providers/openai/api.ts","../src/dev/providers/openai/chatComplete.ts","../src/dev/providers/openai/index.ts","../src/dev/providers/together-ai/api.ts","../src/dev/providers/together-ai/chatComplete.ts","../src/dev/providers/together-ai/index.ts","../src/dev/providers/groq/api.ts","../src/dev/providers/groq/chatComplete.ts","../src/dev/providers/groq/index.ts","../src/dev/providers/google/api.ts","../src/dev/providers/google/chatComplete.ts","../src/dev/providers/google/index.ts","../src/dev/providers/cohere/api.ts","../src/dev/providers/cohere/chatComplete.ts","../src/dev/providers/cohere/index.ts","../src/dev/providers/fireworks-ai/api.ts","../src/dev/providers/fireworks-ai/chatComplete.ts","../src/dev/providers/fireworks-ai/index.ts","../src/dev/providers/perplexity/api.ts","../src/dev/providers/perplexity/chatComplete.ts","../src/dev/providers/perplexity/index.ts","../src/dev/providers/mistral-ai/api.ts","../src/dev/providers/mistral-ai/chatComplete.ts","../src/dev/providers/mistral-ai/index.ts","../src/dev/providers/ollama/api.ts","../src/dev/providers/ollama/chatComplete.ts","../src/dev/providers/ollama/index.ts","../src/dev/providers/index.ts","../src/dev/utils/provider-handlers/transfrom-to-provider-request.ts","../src/dev/utils/provider-handlers/response-handler-utils.ts","../src/dev/utils/provider-handlers/provider-response-handler.ts","../src/dev/utils/provider-handlers/construct-provider-request.ts","../src/dev/utils/provider-handlers/provider-request-handler.ts","../src/dev/utils/is-json-mode.ts","../src/dev/llms/utils.ts","../src/dev/utils/get-provider.ts","../src/dev/utils/has-tool-support.ts","../src/dev/utils/add-tools-to-params.ts","../src/dev/llms/call-anthropic.ts","../src/dev/llms/call-cohere.ts","../src/dev/llms/call-fireworks.ts","../src/dev/llms/call-google.ts","../src/dev/llms/call-groq.ts","../src/dev/llms/call-ollama.ts","../src/dev/llms/call-openai.ts","../src/dev/utils/moderate.ts","../src/dev/llms/call-perplexity.ts","../src/dev/llms/call-together.ts","../src/dev/llms/call-xai.ts","../src/dev/llms/call-llm.ts","../src/dev/utils/provider-handlers/streaming-response-handler.ts","../src/dev/routes/v1/pipes/run.ts","../types/pipe.ts","../types/tools.ts","../src/init/index.ts","../src/memory/create.ts","../src/memory/embed.ts","../src/memory/embed-doc.ts","../src/utils/memory/get-available-memories.ts","../src/memory/list.ts","../src/memory/retrieve.ts","../src/pipe/index.ts","../src/tool/index.ts","../src/utils/cli.ts","../src/utils/config/set-local-embeddings.ts","../src/utils/debug-mode.ts","../src/utils/init.ts"],"sourcesContent":["#!/usr/bin/env node\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport { addPipe } from './add';\nimport { auth } from './auth';\nimport build from './build';\nimport { deploy, deploySingleMemory } from './deploy';\nimport { runBaseServer } from './dev';\nimport { init } from './init';\nimport { createMemory } from './memory/create';\nimport { embedMemory } from './memory/embed';\nimport { embedDoc } from './memory/embed-doc';\nimport { listMemory } from './memory/list';\nimport { retrieveMemory } from './memory/retrieve';\nimport { createPipe } from './pipe';\nimport { createTool } from './tool';\nimport cli from './utils/cli';\nimport { loadConfig } from './utils/config/config-handler';\nimport { setLocalEmbeddingsConfig } from './utils/config/set-local-embeddings';\nimport debugMode from './utils/debug-mode';\nimport cliInit from './utils/init';\nimport { initLogger } from './utils/logger-utils';\nimport { deploySingleDocument } from './deploy/document';\n\nconst { flags, input, showHelp } = cli;\nconst { clear, debug } = flags;\n\n// Utility function to check if a command is present\nconst command = (cmd: string): boolean => input.includes(cmd);\n\n// Utility function to check if a flag is present\nconst flag = (flg: string): boolean => Boolean(flags[flg]);\n\n(async () => {\n\tawait cliInit({ clear });\n\tif (debug) debugMode(cli);\n\n\t// Make sure baseai is initialized\n\tdebug && console.log('Checking if baseai is initialized');\n\tcommand('init')\n\t\t? await init({ calledAsCommand: true, debug })\n\t\t: await init({ calledAsCommand: false, debug });\n\n\t// Envs.\n\tconst config = await loadConfig();\n\tdotenv.config({ path: path.resolve(process.cwd(), config.envFilePath) });\n\n\tdebug && console.log('Initializing logger');\n\tawait initLogger();\n\n\tif (command('help')) {\n\t\tshowHelp(0);\n\t}\n\n\tif (command('auth')) {\n\t\tawait auth();\n\t}\n\n\tif (command('dev')) {\n\t\tawait runBaseServer();\n\t}\n\n\tif (command('pipe')) {\n\t\tawait createPipe();\n\t}\n\n\tif (command('tool')) {\n\t\tawait createTool();\n\t}\n\n\tif (command('build')) {\n\t\tawait build({ calledAsCommand: true });\n\t}\n\n\t// Deploy all\n\tif (command('deploy') && !flag('memory') && !flag('document')) {\n\t\tawait deploy({\n\t\t\toverwrite: flags.overwrite\n\t\t});\n\t}\n\n\t// Deploy memory\n\tif (command('deploy') && flag('memory') && !flag('document')) {\n\t\tawait deploySingleMemory({\n\t\t\tmemoryName: flags.memory,\n\t\t\toverwrite: flags.overwrite\n\t\t});\n\t}\n\n\t// Deploy single document\n\tif (command('deploy') && flag('memory') && flag('document')) {\n\t\tawait deploySingleDocument({\n\t\t\tmemoryName: flags.memory,\n\t\t\tdocumentName: flags.document,\n\t\t\toverwrite: flags.overwrite\n\t\t});\n\t}\n\n\tif (command('memory') && flag('list')) {\n\t\tawait listMemory();\n\t}\n\n\tif (command('memory') && !flag('list')) {\n\t\tawait createMemory();\n\t}\n\n\tif (command('embed') && flag('document') && flag('memory')) {\n\t\tawait embedDoc({\n\t\t\tmemoryName: flags.memory,\n\t\t\tdocumentName: flags.document,\n\t\t\toverwrite: flags.overwrite\n\t\t});\n\t}\n\n\tif (command('embed') && !flag('document')) {\n\t\tawait embedMemory({\n\t\t\tmemoryName: flags.memory,\n\t\t\toverwrite: flags.overwrite\n\t\t});\n\t}\n\n\tif (command('retrieve')) {\n\t\tawait retrieveMemory({ memory: flags.memory, query: flags.query });\n\t}\n\n\tif (command('config') && command('embeddings')) {\n\t\tawait setLocalEmbeddingsConfig(flags.local);\n\t}\n\n\t// Add | Clone | Install\n\tif (\n\t\tcommand('add') ||\n\t\tcommand('a') ||\n\t\tcommand('clone') ||\n\t\tcommand('install') ||\n\t\tcommand('i')\n\t) {\n\t\t// `baseai add login/pipe` so destructing the second one.\n\t\tconst [_, loginAndPipe] = input;\n\t\tawait addPipe({ loginAndPipe });\n\t}\n})();\n\n// Types.\nexport * from 'types/config';\n","import figures from 'figures';\nimport pc from 'picocolors';\n\nexport const color = {\n\tinfo: pc.cyan,\n\tsuccess: pc.green,\n\twarning: pc.yellow,\n\terror: pc.red,\n\tgreen: pc.green,\n\tred: pc.red,\n\tyellow: pc.yellow,\n\tcyan: pc.cyan,\n\tblue: pc.blue,\n\tmagenta: pc.magenta,\n\twhite: pc.white,\n\tgray: pc.gray,\n\tdim: pc.dim,\n\tbold: pc.bold\n};\n\nexport const dimItalic = (text: string) => pc.italic(pc.dim(text));\nexport const dim = pc.dim;\nexport const bold = pc.bold;\nexport const underline = pc.underline;\nexport const italic = pc.italic;\nexport const inverse = pc.inverse;\nexport const hidden = pc.hidden;\nexport const strikethrough = pc.strikethrough;\nexport const reset = pc.reset;\nexport const black = pc.black;\nexport const red = pc.red;\nexport const green = pc.green;\nexport const yellow = pc.yellow;\nexport const blue = pc.blue;\nexport const magenta = pc.magenta;\nexport const cyan = pc.cyan;\nexport const white = pc.white;\nexport const gray = pc.gray;\nexport const oneSpaced = ` `;\nexport const twoSpaced = `  `;\nexport const threeSpaced = `   `;\nexport const fourSpaced = `    `;\nexport const newLine = `\\n`;\n\nexport const pad = (n: number): string => {\n\treturn ' '.repeat(n);\n};\n\nexport const lineItem = pc.dim(`${figures.lineUpDownRight} `);\n","import fs from 'fs';\nimport path from 'path';\n\nexport async function getAvailablePipes() {\n\t// Construct the path containing all pipes folders.\n\tconst pipesPath = path.join(process.cwd(), 'baseai', 'pipes');\n\n\t// Check if the baseai directory exists.\n\tif (!fs.existsSync(pipesPath)) return [];\n\n\t// Get all directories names in the pipe path.\n\tconst pipeNames = await fs.promises.readdir(pipesPath);\n\n\t// Make complete paths for each pipe.\n\tconst slugifiedPipes = pipeNames.map(pipeName =>\n\t\tpipeName.replace('.ts', '')\n\t);\n\n\t// Return the pipe names.\n\treturn slugifiedPipes;\n}\n","import fs from 'fs';\nimport path from 'path';\n\nexport async function getAvailableTools() {\n\t// Construct the path containing all tools folders.\n\tconst toolsPath = path.join(process.cwd(), 'baseai', 'tools');\n\n\t// Check if the baseai directory exists.\n\tif (!fs.existsSync(toolsPath)) return [];\n\n\t// Get all directories names in the tool path.\n\tconst toolsNames = await fs.promises.readdir(toolsPath);\n\n\t// Make complete paths for each tool.\n\tconst toolsPaths = toolsNames.map(toolName => toolName.replace('.ts', ''));\n\n\t// Return the tool names.\n\treturn toolsPaths;\n}\n","import color from 'picocolors';\n\nexport function heading({\n\ttext,\n\tsub,\n\tdim,\n\tgreen\n}: {\n\ttext: string;\n\tsub?: string;\n\tdim?: boolean;\n\tgreen?: boolean;\n}) {\n\tif (green) {\n\t\treturn `${color.bgGreen(color.black(` ${text} `))} ${sub && sub}`;\n\t}\n\tif (dim) {\n\t\treturn `${color.bgBlack(color.white(` ${text} `))} ${sub && sub}`;\n\t}\n\treturn `${color.bold(color.bgCyan(color.black(` ${text} `)))} ${sub && sub}`;\n}\n","import figures from 'figures';\n\nconst icons = {\n\tpipe: figures.lineDownDoubleRightDouble,\n\ttool: figures.lineDownLeftBoldRightBold,\n\tmemory: figures.nodejs\n};\n\nexport default icons;\n","import slugify from '@sindresorhus/slugify';\n\n/**\n * Checks if a tool with the given name is present in the list of all tools.\n *\n * @param {Object} params - The parameters for the function.\n * @param {string} params.name - The name of the tool to check for.\n * @param {string[]} params.allTools - The list of all tools.\n * @returns {boolean} - Returns `true` if the tool is present, otherwise `false`.\n */\nexport function isToolPresent({\n\tname,\n\tallTools\n}: {\n\tname: string;\n\tallTools: string[];\n}) {\n\treturn allTools.some(tool => {\n\t\treturn slugify(tool) === slugify(name);\n\t});\n}\n","import * as p from '@clack/prompts';\nimport { cosmiconfig } from 'cosmiconfig';\nimport { TypeScriptLoader } from 'cosmiconfig-typescript-loader';\nimport type { BaseAIConfig } from 'types/config';\n\nexport const defaultConfig: BaseAIConfig = {\n\tlog: {\n\t\t// Enable or disable logging\n\t\tisEnabled: true,\n\t\t// Log sensitive data\n\t\tlogSensitiveData: false,\n\t\t// Toggle specific log categories\n\t\tpipe: true,\n\t\t'pipe.completion': true,\n\t\t'pipe.request': true,\n\t\t'pipe.response': true,\n\t\ttool: true,\n\t\tmemory: true\n\t},\n\tmemory: {\n\t\tuseLocalEmbeddings: false\n\t},\n\tenvFilePath: '.env'\n\t// Other default configuration options can be added here\n};\n\nexport async function loadConfig(): Promise<BaseAIConfig> {\n\tconst explorer = cosmiconfig('baseai', {\n\t\tsearchPlaces: ['baseai/baseai.config.ts'],\n\t\tloaders: {\n\t\t\t'.ts': TypeScriptLoader()\n\t\t}\n\t});\n\ttry {\n\t\tlet result = await explorer.search();\n\t\tif (!result) {\n\t\t\t// throw new Error('No config file found');\n\t\t\tp.cancel('Failed to create config file');\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\t// BaseAI config is expected to be in the config key of the config file\n\t\tconst config = result.config.config;\n\t\tif (config) {\n\t\t\treturn {\n\t\t\t\t...defaultConfig,\n\t\t\t\t...config,\n\t\t\t\tlog: {\n\t\t\t\t\t...defaultConfig.log,\n\t\t\t\t\t...config.log\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} catch (error) {\n\t\t// console.log(error);\n\t\tp.cancel('Error: Unable to load config file');\n\t\tprocess.exit(1);\n\t}\n\treturn defaultConfig;\n}\n","import { loadConfig } from './config/config-handler';\nimport fs from 'fs/promises';\nimport * as p from '@clack/prompts';\nimport color from 'picocolors';\n\nexport interface Account {\n\tapiKey: string;\n}\n\ntype Spinner = ReturnType<typeof p.spinner>;\n\nfunction handleNoAccountFound({ spinner }: { spinner: Spinner }): void {\n\tspinner.stop('No account found');\n\tp.log.warn('No account found. Please authenticate first.');\n\tp.log.info(`Run: ${color.green('npx baseai auth')}`);\n}\nfunction handleAuthError({\n\tspinner,\n\terror\n}: {\n\tspinner: Spinner;\n\terror: unknown;\n}): void {\n\tspinner.stop('Failed to retrieve authentication');\n\tp.log.error(`Error retrieving stored auth: ${(error as Error).message}`);\n}\n\nexport async function retrieveAuthentication({\n\tspinner\n}: {\n\tspinner: Spinner;\n}): Promise<Account | null> {\n\tspinner.start('Retrieving stored authentication');\n\ttry {\n\t\tconst baiConfig = await loadConfig();\n\t\tlet envFile = baiConfig.envFilePath || '.env';\n\t\tconst envFileContent = await fs.readFile(envFile, 'utf-8');\n\n\t\tconst apiKey = envFileContent\n\t\t\t.split('\\n')\n\t\t\t.reverse()\n\t\t\t.find(line => line.includes('LANGBASE_API_KEY='))\n\t\t\t?.split('=')[1];\n\n\t\tif (!apiKey) {\n\t\t\thandleNoAccountFound({ spinner });\n\t\t\treturn null;\n\t\t}\n\n\t\tspinner.stop('Retrieved stored authentication');\n\n\t\treturn {\n\t\t\tapiKey\n\t\t};\n\t} catch (error) {\n\t\thandleAuthError({ spinner, error });\n\t\treturn null;\n\t}\n}\n","import * as prettier from 'prettier';\n\n/**\n * Formats the given TypeScript code string using Prettier with specified options.\n *\n * @param code - The TypeScript code to format.\n * @returns A promise that resolves to the formatted code string.\n */\nexport async function formatCode(code: string) {\n\treturn await prettier.format(code, {\n\t\tparser: 'typescript',\n\t\tsingleQuote: true,\n\t\ttrailingComma: 'none',\n\t\tarrowParens: 'avoid',\n\t\tprintWidth: 80,\n\t\tuseTabs: true,\n\t\tsemi: true,\n\t\ttabWidth: 4\n\t});\n}\n","import { dim, dimItalic } from '@/utils/formatting';\nimport { getAvailablePipes } from '@/utils/get-available-pipes';\nimport { getAvailableTools } from '@/utils/get-available-tools';\nimport { heading } from '@/utils/heading';\nimport icons from '@/utils/icons';\nimport { isToolPresent } from '@/utils/is-tool-present';\nimport { retrieveAuthentication } from '@/utils/retrieve-credentials';\nimport { formatCode } from '@/utils/ts-format-code';\nimport * as p from '@clack/prompts';\nimport slugify from '@sindresorhus/slugify';\nimport camelCase from 'camelcase';\nimport figures from 'figures';\nimport fs from 'fs';\nimport pMap from 'p-map';\nimport path from 'path';\nimport color from 'picocolors';\nimport type { Pipe } from 'types/pipe';\nimport type { PipeTool } from 'types/tools';\n\ninterface ErrorResponse {\n\terror?: { message: string };\n}\n\ntype Spinner = ReturnType<typeof p.spinner>;\n\n/**\n * Extracts the login name and name from a given pipe-separated string.\n *\n * @param loginAndPipe - login/pipe string to extract from.\n * @returns An object containing the extracted `login` and `name`.\n */\nfunction extractLoginName(loginAndPipe: string) {\n\tif (!loginAndPipe) return { login: '', name: '' };\n\n\tconst split = loginAndPipe.split('/');\n\tconst length = split.length;\n\n\tif (length < 2) return { login: '', name: '' };\n\n\treturn {\n\t\tlogin: split[length - 2],\n\t\tname: split[length - 1]\n\t};\n}\n\n\n/**\n * Fetches a pipe from Langbase using the provided login and name.\n *\n * @param {Object} params - The parameters for fetching the pipe.\n * @param {string} params.login - The login identifier.\n * @param {string} params.name - The name of the pipe.\n * @param {Spinner} params.spinner - The spinner instance for displaying loading status.\n * @returns {Promise<Pipe | null>} - A promise that resolves to the fetched pipe or null if an error occurs.\n */\nasync function getPipe({\n\tlogin,\n\tname,\n\tspinner\n}: {\n\tlogin: string;\n\tname: string;\n\tspinner: Spinner;\n}) {\n\ttry {\n\t\tconst account = await retrieveAuthentication({ spinner });\n\t\tif (!account) {\n\t\t\tp.log.error(\n\t\t\t\t'Authentication failed. Please run \"npx baseai auth\" to authenticate.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tspinner.start('Fetching pipe from Langbase');\n\n\t\tconst API_URL = `https://api.langbase.com/v1/pipes/${login}/${name}`;\n\n\t\tconst createResponse = await fetch(API_URL, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t...(account && { Authorization: `Bearer ${account.apiKey}` })\n\t\t\t}\n\t\t});\n\n\t\tif (createResponse.ok) {\n\t\t\tspinner.stop('Fetched pipe from Langbase');\n\t\t\treturn (await createResponse.json()) as Pipe;\n\t\t}\n\n\t\tconst errorData = (await createResponse.json()) as ErrorResponse;\n\n\t\tif (errorData) {\n\t\t\tspinner.stop(\n\t\t\t\t`Failed to fetch pipe from Langbase: ${errorData.error?.message}`\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\t} catch (error: any) {\n\t\tspinner.stop(error);\n\t\treturn null;\n\t}\n}\n\n/**\n * Asynchronously creates local tools based on the provided `Pipe` object.\n *\n * @param {Pipe} pipe - The pipe object containing tools to be created.\n *\n * The function performs the following steps:\n * 1. Checks if there are any tools in the `pipe`. If none, it returns immediately.\n * 2. Retrieves all available tools.\n * 3. Iterates over each tool in the `pipe` and checks if the tool is already present.\n * 4. If the tool is present, prompts the user to confirm if they want to overwrite the existing tool.\n * 5. If the user chooses not to overwrite, the tool creation is skipped.\n * 6. If the tool is not present or the user chooses to overwrite, the tool's code is generated and formatted.\n * 7. The formatted code is then written to a file in the `baseai/tools` directory.\n * 8. If any error occurs during the process, it is caught and an appropriate message is displayed.\n */\nasync function createLocalTool(pipe: Pipe) {\n\tif (!pipe.tools.length) return;\n\tconst allTools = await getAvailableTools();\n\n\ttry {\n\t\tawait pMap(\n\t\t\tpipe.tools,\n\t\t\tasync tool => {\n\t\t\t\tconst hasTool = isToolPresent({\n\t\t\t\t\tname: tool.function.name,\n\t\t\t\t\tallTools\n\t\t\t\t});\n\n\t\t\t\tif (hasTool) {\n\t\t\t\t\tconst toolInfo = await p.group(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toverwrite: () =>\n\t\t\t\t\t\t\t\tp.confirm({\n\t\t\t\t\t\t\t\t\tmessage: `${color.dim(icons.tool)} Tool: ${color.cyan(tool.function.name)} already exists. Do you want to overwrite it?`,\n\t\t\t\t\t\t\t\t\tinitialValue: false\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\t\t\tp.cancel('Operation cancelled.');\n\t\t\t\t\t\t\t\tprocess.exit(0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!toolInfo.overwrite) {\n\t\t\t\t\t\tp.outro(`Skipped …`);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst name = tool.function.name;\n\t\t\t\tconst camelCaseName = camelCase(name);\n\t\t\t\tconst slugifiedName = slugify(name);\n\n\t\t\t\tconst code = `import { ToolI } from '@baseai/core';\n\n\t\t\texport async function ${name}() {\n\t\t\t\t// Your tool logic here\n\t\t\t}\n\n\t\t\tconst ${camelCaseName}Tool = (): ToolI => ({\n\t\t\t\trun: ${name}, // Name of the function to run\n\t\t\t\ttype: 'function' as const,\n\t\t\t\tfunction: {\n\t\t\t\t\tname: \\`${name}\\`,\n\t\t\t\t\tdescription: \\`${tool.function.description}\\`,\n\t\t\t\t\tparameters: ${JSON.stringify(tool.function.parameters || {}, null, 6)}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\texport default ${camelCaseName}Tool;`;\n\n\t\t\t\tconst formattedCode = await formatCode(code);\n\n\t\t\t\tconst baseDir = path.join(process.cwd(), 'baseai', 'tools');\n\t\t\t\tconst filePath = path.join(baseDir, `${slugifiedName}.ts`);\n\n\t\t\t\tawait fs.promises.mkdir(baseDir, { recursive: true });\n\t\t\t\tawait fs.promises.writeFile(filePath, formattedCode);\n\t\t\t\tp.outro(`Tool created successfully at ${filePath}`);\n\t\t\t},\n\t\t\t{ concurrency: 1 }\n\t\t);\n\t} catch (error: any) {\n\t\tp.cancel(`Error creating tool: ${error.message}`);\n\t}\n}\n\n/**\n * Transforms an array of `PipeTool` objects into an array of objects containing\n * tool call strings, import paths, and tool file names.\n *\n * @param tools - An array of `PipeTool` objects to be transformed.\n * @returns An array of objects, each containing:\n * - `toolCall`: A string representing the tool call.\n * - `importPath`: A string representing the import path for the tool.\n * - `toolFileName`: A string representing the file name of the tool.\n */\nfunction getToolsPipeData(tools: PipeTool[]) {\n\treturn tools.map(tool => {\n\t\tconst toolFileName = slugify(tool.function.name);\n\t\tconst toolName = `${camelCase(tool.function.name)}Tool`;\n\t\tconst importPath = `import ${toolName} from '../tools/${toolFileName}';`;\n\n\t\treturn {\n\t\t\ttoolCall: `${toolName}()`,\n\t\t\timportPath,\n\t\t\ttoolFileName\n\t\t};\n\t});\n}\n\n/**\n * Asynchronously creates a local pipe configuration file.\n *\n * This function performs the following steps:\n * 1. Retrieves all available pipes.\n * 2. Slugifies the provided pipe name.\n * 3. Checks if a pipe with the same name already exists.\n * 4. If the pipe exists, prompts the user to confirm overwriting the existing pipe.\n * 5. If the user chooses not to overwrite, the operation is skipped.\n * 6. Retrieves tool data for the provided pipe tools.\n * 7. Constructs the pipe content with the provided pipe details and tool data.\n * 8. Formats the generated pipe content.\n * 9. Creates the necessary directories and writes the formatted pipe content to a file.\n * 10. Outputs a success message upon successful creation of the pipe.\n *\n * @param {Pipe} pipe - The pipe object containing configuration details.\n * @returns {Promise<void>} - A promise that resolves when the pipe is successfully created.\n */\nasync function createLocalPipe(pipe: Pipe) {\n\ttry {\n\t\tconst allPipes = await getAvailablePipes();\n\n\t\tconst pipeNameSlugified = slugify(pipe.name);\n\n\t\tconst hasPipe = allPipes.some(p => p === pipeNameSlugified);\n\n\t\tif (hasPipe) {\n\t\t\tconst pipeInfo = await p.group(\n\t\t\t\t{\n\t\t\t\t\toverwrite: () =>\n\t\t\t\t\t\tp.confirm({\n\t\t\t\t\t\t\tmessage: `PIPE: ${color.cyan(pipe.name)} already exists. Do you want to overwrite it?`,\n\t\t\t\t\t\t\tinitialValue: false\n\t\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tonCancel: () => {\n\t\t\t\t\t\tp.cancel('Operation cancelled.');\n\t\t\t\t\t\tprocess.exit(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tif (!pipeInfo.overwrite) {\n\t\t\t\tp.outro(`Skipped …`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst toolData = await getToolsPipeData(pipe.tools);\n\n\t\tconst toolCalls = toolData.map(tool => tool.toolCall);\n\t\tconst pipeNameCamelCase = camelCase('pipe-' + pipe.name);\n\n\t\tconst messages = pipe.messages.map(message => ({\n\t\t\t...(message.name && { name: message.name }),\n\t\t\trole: message.role,\n\t\t\tcontent: message.content\n\t\t}));\n\n\t\tconst pipeContent = `import { PipeI } from '@baseai/core';\n${toolData.map(tool => tool.importPath).join('\\n')}\n\n\t\tconst ${pipeNameCamelCase} = (): PipeI => ({\n\t\t\t// Replace with your API key https://langbase.com/docs/api-reference/api-keys\n\t\t\tapiKey: process.env.LANGBASE_API_KEY!,\n\t\t\tname: \\`${pipe.name}\\`,\n\t\t\tdescription: \\`${pipe.description}\\`,\n\t\t\tstatus: \\`${pipe.status}\\`,\n\t\t\tmodel: \\`${pipe.model}\\`,\n\t\t\tstream: ${pipe.stream},\n\t\t\tjson: ${pipe.json},\n\t\t\tstore: ${pipe.store},\n\t\t\tmoderate: ${pipe.moderate || true},\n\t\t\ttop_p: ${pipe.top_p},\n\t\t\tmax_tokens: ${pipe.max_tokens},\n\t\t\ttemperature: ${pipe.temperature},\n\t\t\tpresence_penalty: ${pipe.presence_penalty},\n\t\t\tfrequency_penalty: ${pipe.frequency_penalty},\n\t\t\tstop: ${JSON.stringify(pipe.stop)},\n\t\t\ttool_choice: ${JSON.stringify(pipe.tool_choice)},\n\t\t\tparallel_tool_calls: ${pipe.parallel_tool_calls},\n\t\t\tmessages: ${JSON.stringify(messages || [])},\n\t\t\tvariables: ${JSON.stringify(pipe.variables)},\n\t\t\ttools: [${toolCalls}],\n\t\t\tmemory: [],\n\t\t});\n\n\t\texport default ${pipeNameCamelCase};`;\n\n\t\tconst formattedCode = await formatCode(pipeContent);\n\n\t\tconst baseDir = path.join(process.cwd(), 'baseai', 'pipes');\n\t\tconst filePath = path.join(baseDir, `${pipeNameSlugified}.ts`);\n\n\t\tawait fs.promises.mkdir(baseDir, { recursive: true });\n\t\tawait fs.promises.writeFile(filePath, formattedCode);\n\t\tp.outro(`Pipe created successfully at ${filePath}`);\n\t\tp.outro(\n\t\t\theading({\n\t\t\t\ttext: pipeNameSlugified,\n\t\t\t\tsub: `pipe added \\n ${dim(figures.pointer)} ${dimItalic(` ${filePath}`)}`,\n\t\t\t\tgreen: true\n\t\t\t})\n\t\t);\n\t\tprocess.exit(0);\n\t} catch (error: any) {\n\t\tp.cancel(`Error creating pipe: ${error.message}`);\n\t}\n}\n\n/**\n * Adds a pipe by extracting login and name from the provided pipe information,\n * fetching the pipe details, and creating local tool and pipe.\n *\n * @param {Object} params - The parameters for the function.\n * @param {string} params.pipeInfo - The pipe information string.\n * @returns {Promise<void>} - A promise that resolves when the pipe is added.\n */\nexport async function addPipe({ loginAndPipe }: { loginAndPipe: string }) {\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'PIPE',\n\t\t\tsub: `Adding ${color.cyan(loginAndPipe)}`\n\t\t})\n\t);\n\n\tconst { login, name } = extractLoginName(loginAndPipe);\n\n\tif (!login || !name) {\n\t\tp.log.error('Invalid pipe information provided');\n\t\treturn;\n\t}\n\n\tconst spinner = p.spinner();\n\n\ttry {\n\t\tconst pipe = await getPipe({ login, name, spinner });\n\t\tif (!pipe) return;\n\n\t\tawait createLocalTool(pipe);\n\t\tawait createLocalPipe(pipe);\n\t} catch (error: any) {\n\t\tspinner.stop('An unexpected error occurred');\n\t\tp.log.error(\n\t\t\t`'An unexpected error occurred': ${(error as Error).message}`\n\t\t);\n\t}\n}\n","import { loadConfig } from '@/utils/config/config-handler';\nimport { heading } from '@/utils/heading';\nimport * as p from '@clack/prompts';\nimport {\n\tcancel,\n\tconfirm,\n\tisCancel,\n\tnote,\n\toutro,\n\tpassword\n} from '@clack/prompts';\nimport fs from 'fs/promises';\nimport open from 'open';\nimport path from 'path';\nimport color from 'picocolors';\n\nexport async function auth() {\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'Langbase Authentication',\n\t\t\tsub: 'Auth by logging in to Langbase and getting your API key'\n\t\t})\n\t);\n\n\tconst shouldOpen = await confirm({\n\t\tmessage: `Open the authentication page? ${color.dim(`— copy your API key from there and paste it here.`)}`\n\t});\n\n\tif (isCancel(shouldOpen)) {\n\t\tcancel('Operation cancelled.');\n\t\tprocess.exit(0);\n\t}\n\n\tif (shouldOpen) {\n\t\tawait open('https://langbase.com/settings/api');\n\n\t\tnote(\n\t\t\tcolor.yellow(\n\t\t\t\t'Please copy your API key from the opened page and paste it here.'\n\t\t\t)\n\t\t);\n\t}\n\n\tconst apiKeyString = await password({\n\t\tmessage: 'Paste your API key string:',\n\t\tmask: '*'\n\t});\n\n\tif (isCancel(apiKeyString)) {\n\t\tcancel('Operation cancelled.');\n\t\tprocess.exit(0);\n\t}\n\n\tconst [login, apiKey] = (apiKeyString as string).split(':');\n\n\tif (!login || !apiKey) {\n\t\toutro(\n\t\t\tcolor.red(\n\t\t\t\t'Invalid API key string. It should be in the format login:apiKey, when copied from https://langbase.com/settings/api it should be in the correct format.'\n\t\t\t)\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tconst envKeyName = 'LANGBASE_API_KEY';\n\tconst envContent = `\\n# Langbase API key for https://langbase.com/${login}\\n${envKeyName}=${apiKey}\\n\\n`;\n\n\t// TODO: Do we need this now?\n\t// const envFiles = ['.env', '.env.local', '.dev.vars'];\n\t// let envFile = envFiles.find(file =>\n\t// \tfs.existsSync(path.join(process.cwd(), file))\n\t// );\n\n\t// if (!envFile) {\n\t// \tenvFile = '.env';\n\t// }\n\n\tconst baiConfig = await loadConfig();\n\tlet envFile = baiConfig.envFilePath || '.env';\n\n\tconst envFileContent = await fs.readFile(envFile, 'utf-8');\n\n\tconst oldKey = envFileContent\n\t\t.split('\\n')\n\t\t.reverse() // Reverse to get the latest key if there are multiple\n\t\t.find(line => line.includes('LANGBASE_API_KEY'))\n\t\t?.split('=')[1];\n\n\tif (oldKey) {\n\t\tconst shouldOverwrite = await confirm({\n\t\t\tmessage: `API key found in ${envFile}. Overwrite?`\n\t\t});\n\n\t\tif (isCancel(shouldOverwrite)) {\n\t\t\tcancel('Operation cancelled.');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!shouldOverwrite) {\n\t\t\toutro(\n\t\t\t\tcolor.yellow('API key is not overwritten.')\n\t\t\t);\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tconst newEnvContent = envFileContent.replace(\n\t\t\tnew RegExp(`LANGBASE_API_KEY=${oldKey}`),\n\t\t\tenvContent.trim()\n\t\t);\n\n\t\tawait fs.writeFile(path.join(process.cwd(), envFile), newEnvContent);\n\t} else {\n\t\tawait fs.appendFile(path.join(process.cwd(), envFile), envContent);\n\t}\n\n\toutro(\n\t\tcolor.green(\n\t\t\t`Authentication successful. API key is stored in ${envFile}`\n\t\t)\n\t);\n\tprocess.exit(0);\n}\n","import { heading } from '@/utils/heading';\nimport icons from '@/utils/icons';\nimport * as p from '@clack/prompts';\nimport { exec } from 'child_process';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nasync function build({ calledAsCommand }: { calledAsCommand?: boolean }) {\n\ttry {\n\t\tcalledAsCommand &&\n\t\t\tp.intro(heading({ text: 'BUILDING', sub: 'baseai...' }));\n\n\t\tawait buildPipes();\n\t\tawait buildTools();\n\t\tawait buildMemory();\n\n\t\tconsole.log('');\n\t\tp.outro(heading({ text: 'BUILD', sub: 'complete', green: true }));\n\t} catch (error) {\n\t\tp.log.error('Build failed');\n\t\tthrow error;\n\t}\n}\n\nexport default build;\n\nconst buildPipes = async () => {\n\tconsole.log('');\n\tp.intro(heading({ text: 'PIPES', sub: '', dim: true }));\n\n\tconst sourcePath = path.join(process.cwd(), 'baseai', 'pipes');\n\tconst outputPath = path.join(process.cwd(), '.baseai', 'pipes');\n\n\tconst builtPipes = await buildTypeScriptFiles(\n\t\tsourcePath,\n\t\toutputPath,\n\t\t'pipes'\n\t);\n\tlistBuiltItems('Pipes', builtPipes, icons.pipe);\n};\n\nconst buildTools = async () => {\n\tconsole.log('');\n\tp.intro(heading({ text: 'TOOLS', sub: '', dim: true }));\n\n\tconst sourcePath = path.join(process.cwd(), 'baseai', 'tools');\n\tconst outputPath = path.join(process.cwd(), '.baseai', 'tools');\n\n\tconst builtTools = await buildTypeScriptFiles(\n\t\tsourcePath,\n\t\toutputPath,\n\t\t'tools'\n\t);\n\tlistBuiltItems('Tools', builtTools, icons.tool);\n};\n\nexport const buildMemory = async ({\n\tmemoryName\n}: { memoryName?: string } = {}) => {\n\tconsole.log('');\n\tp.intro(heading({ text: 'MEMORY', sub: '', dim: true }));\n\n\tconst sourcePath = path.join(process.cwd(), 'baseai', 'memory');\n\tconst outputPath = path.join(process.cwd(), '.baseai', 'memory');\n\n\ttry {\n\t\tawait fs.access(sourcePath);\n\t} catch (error) {\n\t\tp.log.info('No memory directory found. Skipping memory build.');\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait fs.access(outputPath);\n\t} catch (error) {\n\t\t// Create the build memory directory if it doesn't exist\n\t\tawait fs.mkdir(outputPath, { recursive: true });\n\t}\n\n\tconst builtMemories: string[] = [];\n\tconst s = p.spinner();\n\tlet tsFiles: string[] = [];\n\n\t// If a memoryName is provided, build only that memory\n\tif (memoryName) {\n\t\ttsFiles = await getSingleMemoryFile({ sourcePath, memoryName });\n\t}\n\n\t// If no memoryName is provided, build all memories\n\tif (!memoryName) {\n\t\ttsFiles = await getAllMemoryFile(sourcePath);\n\n\t\tif (tsFiles.length === 0) {\n\t\t\tp.log.info(\n\t\t\t\t'MEMORY: No index.ts file found. Skipping memory build.'\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t}\n\n\ts.start('Building memory');\n\n\tfor (const file of tsFiles) {\n\t\tconst inputFile = path.join(sourcePath, file);\n\t\tconst outputFile = path.join(outputPath, `${path.dirname(file)}.json`);\n\t\tconst displayName = path.dirname(file); // This is the last directory name\n\t\ttry {\n\t\t\tconst { stdout } = await execAsync(\n\t\t\t\t`npx tsx -e \"import memoryConfig from '${JSON.stringify(inputFile)}'; console.log(JSON.stringify(memoryConfig()))\"`\n\t\t\t);\n\n\t\t\tawait fs.writeFile(outputFile, stdout);\n\t\t\ts.message(`Compiled ${displayName}`);\n\t\t\tbuiltMemories.push(displayName);\n\t\t} catch (error) {\n\t\t\ts.stop(`Error compiling ${displayName}: ${error}`);\n\t\t}\n\t}\n\n\ts.stop('Build complete');\n\tlistBuiltItems('Memories', builtMemories, icons.memory);\n};\n\nconst buildTypeScriptFiles = async (\n\tsourcePath: string,\n\toutputPath: string,\n\ttype: string\n): Promise<string[]> => {\n\ttry {\n\t\tawait fs.access(sourcePath);\n\t} catch (error) {\n\t\tp.log.info(`No ${type} directory found. Skipping ${type} build.`);\n\t\treturn [];\n\t}\n\n\tawait fs.mkdir(outputPath, { recursive: true });\n\n\tconst files = await fs.readdir(sourcePath);\n\tconst tsFiles = files.filter(file => file.endsWith('.ts'));\n\n\tif (tsFiles.length === 0) {\n\t\tp.log.info(\n\t\t\t`No .ts files found in the ${type} directory. Skipping ${type} build.`\n\t\t);\n\t\treturn [];\n\t}\n\n\tconst s = p.spinner();\n\ts.start(`Building ${type}`);\n\n\tconst builtItems: string[] = [];\n\n\tfor (const file of tsFiles) {\n\t\tconst inputFile = path.join(sourcePath, file);\n\t\tconst outputFile = path.join(outputPath, file.replace('.ts', '.json'));\n\t\tconst displayName = path.parse(file).name; // File name without extension\n\n\t\ttry {\n\t\t\tconst { stdout } = await execAsync(\n\t\t\t\t`npx tsx -e \"import config from '${JSON.stringify(inputFile)}'; console.log(JSON.stringify(config()))\"`\n\t\t\t);\n\n\t\t\t// Parse the JSON output\n\t\t\tlet configObject = JSON.parse(stdout);\n\n\t\t\t// Remove the apiKey if it exists\n\t\t\tif ('apiKey' in configObject) {\n\t\t\t\tdelete configObject.apiKey;\n\t\t\t}\n\n\t\t\t// Stringify the modified object back to JSON\n\t\t\tconst modifiedOutput = JSON.stringify(configObject, null, 2);\n\n\t\t\tawait fs.writeFile(outputFile, modifiedOutput);\n\t\t\ts.message(`Compiled ${displayName}`);\n\t\t\tbuiltItems.push(displayName);\n\t\t} catch (error) {\n\t\t\ts.stop(`Error compiling ${displayName}: ${error}`);\n\t\t}\n\t}\n\n\ts.stop(`Build complete`);\n\treturn builtItems;\n};\n\nconst listBuiltItems = (title: string, items: string[], icon: string) => {\n\tif (items.length > 0) {\n\t\titems.forEach(item => {\n\t\t\tconsole.log(`${icon}  ${item}`);\n\t\t});\n\t} else {\n\t\t// console.log(`\\nNo ${title.toLowerCase()} were built.`);\n\t}\n};\n\nasync function getSingleMemoryFile({\n\tsourcePath,\n\tmemoryName\n}: {\n\tsourcePath: string;\n\tmemoryName: string;\n}) {\n\t// Array to store the paths of the memory files\n\tconst tsFiles: string[] = [];\n\n\tconst memoryPath = path.join(sourcePath, memoryName);\n\n\t// Get all files in the memory directory\n\tconst files = await fs.readdir(memoryPath);\n\tconst indexFile = files.find(file => file === 'index.ts');\n\n\t// If no index.ts file is found, no memory entry file exists. Skip the build.\n\tif (!indexFile) {\n\t\tp.log.info('MEMORY: No index.ts file found. Skipping memory build.');\n\t\tprocess.exit(1); // Exiting process because it is a single memory build.\n\t}\n\n\ttsFiles.push(path.join(memoryName, indexFile));\n\n\treturn tsFiles;\n}\n\nasync function getAllMemoryFile(sourcePath: string) {\n\t// Array to store the paths of the memory files\n\tlet tsFiles: string[] = [];\n\n\t// Get all folders in the memory directory\n\tconst filesBaseDir = await fs.readdir(sourcePath);\n\n\t// Get only folders in the memory directory\n\tconst folderPromises = filesBaseDir.map(async file => {\n\t\tconst filePath = path.join(sourcePath, file);\n\t\tconst stats = await fs.stat(filePath);\n\t\treturn stats.isDirectory() ? file : '';\n\t});\n\n\tlet allMemoryFolders = await Promise.all(folderPromises);\n\n\t// Remove empty strings from the array\n\tallMemoryFolders = allMemoryFolders.filter(folder => folder !== '');\n\n\tif (allMemoryFolders.length === 0) {\n\t\tp.log.info('MEMORY: No memory found. Skipping memory build.');\n\t\treturn [];\n\t}\n\n\t// Get all index.ts files in the all the memory folders\n\tconst tsFilesPromise = allMemoryFolders.map(async memory => {\n\t\tconst filePath = path.join(sourcePath, memory);\n\t\tconst files = await fs.readdir(filePath);\n\t\tconst indexFile = files.find(file => file === 'index.ts');\n\n\t\t// if index file, return the memory/index.ts path\n\t\treturn indexFile ? path.join(memory, indexFile) : '';\n\t});\n\n\t// Wait for all the promises to resolve\n\ttsFiles = await Promise.all(tsFilesPromise);\n\n\t// Remove empty strings from the array\n\ttsFiles = tsFiles.filter(file => file !== '');\n\n\treturn tsFiles;\n}\n","export const OPEN_AI: string = 'OpenAI';\nexport const ANTHROPIC: string = 'Anthropic';\nexport const TOGETHER_AI: string = 'Together';\nexport const GOOGLE: string = 'Google';\nexport const GROQ: string = 'Groq';\nexport const COHERE: string = 'Cohere';\nexport const FIREWORKS_AI: string = 'Fireworks AI';\nexport const PERPLEXITY: string = 'Perplexity';\nexport const MISTRAL_AI: string = 'Mistral AI';\nexport const DEEPINFRA: string = 'deepinfra';\nexport const BEDROCK: string = 'bedrock';\nexport const AZURE_OPEN_AI: string = 'azure-openai';\nexport const OLLAMA: string = 'ollama';\nexport const X_AI: string = 'xAI';\n\ninterface Model {\n\tid: string;\n\tprovider: string;\n\tpromptCost: number;\n\tcompletionCost: number;\n\trequestCost?: number;\n\ttoolSupport?: {\n\t\ttoolChoice: boolean;\n\t\tparallelToolCalls: boolean;\n\t};\n}\n\ninterface ModelsByProviderInclCosts {\n\t[provider: string]: Model[];\n}\n\nexport const modelsByProvider: ModelsByProviderInclCosts = {\n\t[OPEN_AI]: [\n\t\t{\n\t\t\tid: 'gpt-4o',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 5.0,\n\t\t\tcompletionCost: 15.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4o-2024-08-06',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 2.5,\n\t\t\tcompletionCost: 10.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4o-mini',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 0.15,\n\t\t\tcompletionCost: 0.6,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-turbo',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-turbo-preview',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-0125-preview',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-1106-preview',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 30.0,\n\t\t\tcompletionCost: 60.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-0613',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 30.0,\n\t\t\tcompletionCost: 60.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-32k',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 60.0,\n\t\t\tcompletionCost: 120.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo-0125',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo-1106',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 1.0,\n\t\t\tcompletionCost: 2.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo-16k',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 3.0,\n\t\t\tcompletionCost: 4.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t}\n\t],\n\t[TOGETHER_AI]: [\n\t\t{\n\t\t\tid: 'meta-llama/Llama-3.3-70B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.88,\n\t\t\tcompletionCost: 0.88,\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 5,\n\t\t\tcompletionCost: 5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.88,\n\t\t\tcompletionCost: 0.88,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.18,\n\t\t\tcompletionCost: 0.18,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-3-70b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-3-8b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'togethercomputer/Llama-2-7B-32K-Instruct',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-2-13b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.225,\n\t\t\tcompletionCost: 0.225\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-2-70b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t},\n\t\t{\n\t\t\tid: 'google/gemma-7b-it',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'google/gemma-2b-it',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.1,\n\t\t\tcompletionCost: 0.1\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mistral-7B-Instruct-v0.1',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mistral-7B-Instruct-v0.2',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mixtral-8x7B-Instruct-v0.1',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.6,\n\t\t\tcompletionCost: 0.6,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mixtral-8x22B-Instruct-v0.1',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 1.2,\n\t\t\tcompletionCost: 1.2\n\t\t},\n\t\t{\n\t\t\tid: 'databricks/dbrx-instruct',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 1.2,\n\t\t\tcompletionCost: 1.2\n\t\t}\n\t],\n\t[ANTHROPIC]: [\n\t\t{\n\t\t\tid: 'claude-3-5-sonnet-latest',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-5-sonnet-20240620',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-opus-20240229',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 15,\n\t\t\tcompletionCost: 75,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-sonnet-20240229',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-haiku-20240307',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 0.25,\n\t\t\tcompletionCost: 1.25,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-5-haiku-20241022',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t}\n\t],\n\t[GROQ]: [\n\t\t{\n\t\t\tid: 'llama-3.3-70b-versatile',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79,\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-70b-versatile',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-8b-instant',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79\n\t\t},\n\t\t{\n\t\t\tid: 'llama3-70b-8192',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79\n\t\t},\n\t\t{\n\t\t\tid: 'llama3-8b-8192',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.05,\n\t\t\tcompletionCost: 0.1\n\t\t},\n\t\t{\n\t\t\tid: 'mixtral-8x7b-32768',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.27,\n\t\t\tcompletionCost: 0.27\n\t\t},\n\t\t{\n\t\t\tid: 'gemma2-9b-it',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'gemma-7b-it',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.07,\n\t\t\tcompletionCost: 0.07\n\t\t}\n\t],\n\t[GOOGLE]: [\n\t\t{\n\t\t\tid: 'gemini-1.5-pro-latest',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 3.5,\n\t\t\tcompletionCost: 10.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gemini-1.5-flash-latest',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 0.075,\n\t\t\tcompletionCost: 0.3,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gemini-1.5-flash-8b-latest',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 0.0375,\n\t\t\tcompletionCost: 0.15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gemini-pro',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: false,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t}\n\t],\n\t[COHERE]: [\n\t\t{\n\t\t\tid: 'command-r',\n\t\t\tprovider: COHERE,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5\n\t\t},\n\t\t{\n\t\t\tid: 'command-r-plus',\n\t\t\tprovider: COHERE,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15\n\t\t}\n\t],\n\t[FIREWORKS_AI]: [\n\t\t{\n\t\t\tid: 'llama-v3p3-70b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.88,\n\t\t\tcompletionCost: 0.88,\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3p1-405b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 3\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3p1-70b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3p1-8b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'yi-large',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 3\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3-70b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t}\n\t],\n\t[PERPLEXITY]: [\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-huge-128k-online',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 5,\n\t\t\tcompletionCost: 5,\n\t\t\trequestCost: 0.005\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-large-128k-online',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 1,\n\t\t\trequestCost: 0.005\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-small-128k-online',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2,\n\t\t\trequestCost: 0.005\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-large-128k-chat',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 1\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-small-128k-chat',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t}\n\t],\n\t[MISTRAL_AI]: [\n\t\t{\n\t\t\tid: 'mistral-large-latest',\n\t\t\tprovider: MISTRAL_AI,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 9\n\t\t},\n\t\t{\n\t\t\tid: 'open-mistral-nemo',\n\t\t\tprovider: MISTRAL_AI,\n\t\t\tpromptCost: 0.3,\n\t\t\tcompletionCost: 0.3\n\t\t},\n\t\t{\n\t\t\tid: 'codestral-latest',\n\t\t\tprovider: MISTRAL_AI,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 3\n\t\t}\n\t],\n\t[X_AI]: [\n\t\t{\n\t\t\tid: 'grok-beta',\n\t\t\tprovider: X_AI,\n\t\t\tpromptCost: 5,\n\t\t\tcompletionCost: 15\n\t\t}\n\t]\n};\n\nexport const jsonModeModels = [\n\t'gpt-4o',\n\t'gpt-4o-mini-2024-07-18-free',\n\t'gpt-4o-2024-08-06',\n\t'gpt-4o-mini',\n\t'gpt-4-turbo',\n\t'gpt-4-turbo-preview',\n\t'gpt-4-0125-preview',\n\t'gpt-3.5-turbo',\n\t'gpt-3.5-turbo-0125',\n\t'gpt-3.5-turbo-1106',\n\t'gpt-4-1106-preview',\n\t'mistralai/Mistral-7B-Instruct-v0.1',\n\t'mistralai/Mixtral-8x7B-Instruct-v0.1',\n\t'gemini-1.5-pro-latest',\n\t'gemini-1.5-flash-latest'\n];\n","import chalk from 'chalk';\nimport util from 'util';\n\nconst DEBUG = false;\nconst LOG_SENSITIVE_DATA = false;\n\nconst SENSITIVE_WORDS: readonly string[] = [\n\t'sensitive',\n\t'secret',\n\t'hide',\n\t'private',\n\t'password',\n\t'token',\n\t'key',\n\t'auth',\n\t'authorization',\n\t'redact'\n];\n\nconst formatValue = (value: unknown): string => {\n\tif (typeof value === 'object' && value !== null) {\n\t\treturn util.inspect(value, { colors: true, depth: null });\n\t}\n\tif (typeof value === 'string') {\n\t\treturn chalk.green(`\"${value}\"`);\n\t}\n\tif (typeof value === 'number') {\n\t\treturn chalk.yellow(value.toString());\n\t}\n\tif (typeof value === 'boolean') {\n\t\treturn chalk.cyan(value.toString());\n\t}\n\treturn String(value);\n};\n\nconst isSensitiveData = (key: string): boolean =>\n\tSENSITIVE_WORDS.some(word => key.toLowerCase().includes(word));\n\nconst redactSensitiveData = (value: unknown, isSensitive: boolean): string =>\n\tisSensitive && !LOG_SENSITIVE_DATA\n\t\t? chalk.red('======REDACTED======')\n\t\t: formatValue(value);\n\nconst logKeyValue = (key: string, value: unknown, sensitive?: string): void => {\n\tconst formattedValue = redactSensitiveData(\n\t\tvalue,\n\t\tBoolean(sensitive) && isSensitiveData(sensitive || key)\n\t);\n\tconsole.log(\n\t\t`\\n${chalk.blue('======')} 👀 ${chalk.bold(key)} 👀 ${chalk.blue('======')}`\n\t);\n\tconsole.log(formattedValue);\n};\n\nexport const dlog = (\n\tanyKey: unknown,\n\tanyValue?: unknown,\n\tsensitive?: string\n): void => {\n\tif (!DEBUG) return;\n\n\tif (\n\t\ttypeof anyKey === 'object' &&\n\t\tanyKey !== null &&\n\t\tanyValue === undefined\n\t) {\n\t\tObject.entries(anyKey).forEach(([key, value]) =>\n\t\t\tlogKeyValue(key, value, sensitive || key)\n\t\t);\n\t} else {\n\t\tlogKeyValue(String(anyKey), anyValue, sensitive);\n\t}\n};\n","/**\n * Compares two arrays of documents and determines the relationship between them.\n *\n * @param {Object} params - The parameters for comparing the document lists.\n * @param {string[]} params.localDocs - The array of local documents.\n * @param {string[]} params.prodDocs - The array of production documents.\n *\n * @returns {Object} - An object containing the comparison results.\n * @property {boolean} areListsSame - Indicates whether the document lists are the same.\n * @property {boolean} isProdSubsetOfLocal - Indicates whether the production documents are a subset of the local documents.\n * @property {boolean} isProdSupersetOfLocal - Indicates whether the production documents are a superset of the local documents.\n */\nexport function compareDocumentLists({\n\tlocalDocs,\n\tprodDocs\n}: {\n\tlocalDocs: string[];\n\tprodDocs: string[];\n}) {\n\tconst localSet = new Set(localDocs);\n\tconst prodSet = new Set(prodDocs);\n\n\t// Case 1: Lists are the same\n\tconst areListsSame =\n\t\tlocalSet.size === prodSet.size &&\n\t\tlocalDocs.every(doc => prodSet.has(doc));\n\n\t// Case 2: Prod is a subset of local\n\tconst isProdSubsetOfLocal = prodDocs.every(doc => localSet.has(doc));\n\n\t// Case 3: Prod is a superset of local\n\tconst isProdSupersetOfLocal = localDocs.every(doc => prodSet.has(doc));\n\n\t// Case 4: Lists are totally different\n\tconst areMutuallyExclusive =\n\t\t!localDocs.some(doc => prodSet.has(doc)) &&\n\t\t!prodDocs.some(doc => localSet.has(doc));\n\n\t// Case 5: Partial overlap\n\tconst areOverlapping = localDocs.some(doc => prodSet.has(doc));\n\n\treturn {\n\t\tareListsSame,\n\t\tisProdSubsetOfLocal,\n\t\tisProdSupersetOfLocal,\n\t\tareMutuallyExclusive,\n\t\tareOverlapping\n\t};\n}\n","const generalFileExtSupported = [\n\t'.md',\n\t'.txt',\n\t'.pdf',\n\t'.csv',\n\t'.xlsx',\n\t'.xls'\n];\n\nexport const programmingFilesExtensions = {\n\t'.json': 'JSON',\n\t'.yaml': 'YAML',\n\t'.yml': 'YAML',\n\t'.xml': 'XML',\n\t'.html': 'HTML',\n\t'.htm': 'HTML',\n\t'.abap': 'ABAP',\n\t'.asc': 'AGS Script',\n\t'.ash': 'AGS Script',\n\t'.ampl': 'AMPL',\n\t'.mod': 'Modula-2',\n\t'.g4': 'ANTLR',\n\t'.apl': 'APL',\n\t'.dyalog': 'APL',\n\t'.asp': 'ASP',\n\t'.asax': 'ASP',\n\t'.ascx': 'ASP',\n\t'.ashx': 'ASP',\n\t'.asmx': 'ASP',\n\t'.aspx': 'ASP',\n\t'.axd': 'ASP',\n\t'.dats': 'ATS',\n\t'.hats': 'ATS',\n\t'.sats': 'ATS',\n\t'.as': 'ActionScript',\n\t'.adb': 'Ada',\n\t'.ada': 'Ada',\n\t'.ads': 'Ada',\n\t'.agda': 'Agda',\n\t'.als': 'Alloy',\n\t'.cls': 'Visual Basic',\n\t'.applescript': 'AppleScript',\n\t'.scpt': 'AppleScript',\n\t'.arc': 'Arc',\n\t'.ino': 'Arduino',\n\t'.aj': 'AspectJ',\n\t'.asm': 'Assembly',\n\t'.a51': 'Assembly',\n\t'.inc': 'SourcePawn',\n\t'.nasm': 'Assembly',\n\t'.aug': 'Augeas',\n\t'.ahk': 'AutoHotkey',\n\t'.ahkl': 'AutoHotkey',\n\t'.au3': 'AutoIt',\n\t'.awk': 'Awk',\n\t'.auk': 'Awk',\n\t'.gawk': 'Awk',\n\t'.mawk': 'Awk',\n\t'.nawk': 'Awk',\n\t'.bat': 'Batchfile',\n\t'.cmd': 'Batchfile',\n\t'.befunge': 'Befunge',\n\t'.bison': 'Bison',\n\t'.bb': 'BlitzBasic',\n\t'.decls': 'BlitzBasic',\n\t'.bmx': 'BlitzMax',\n\t'.bsv': 'Bluespec',\n\t'.boo': 'Boo',\n\t'.b': 'Limbo',\n\t'.bf': 'HyPhy',\n\t'.brs': 'Brightscript',\n\t'.bro': 'Bro',\n\t'.c': 'C',\n\t'.cats': 'C',\n\t'.h': 'Objective-C',\n\t'.idc': 'C',\n\t'.w': 'C',\n\t'.cs': 'Smalltalk',\n\t'.cake': 'CoffeeScript',\n\t'.cshtml': 'C#',\n\t'.csx': 'C#',\n\t'.cpp': 'C++',\n\t'.c++': 'C++',\n\t'.cc': 'C++',\n\t'.cp': 'Component Pascal',\n\t'.cxx': 'C++',\n\t'.h++': 'C++',\n\t'.hh': 'Hack',\n\t'.hpp': 'C++',\n\t'.hxx': 'C++',\n\t'.inl': 'C++',\n\t'.ipp': 'C++',\n\t'.tcc': 'C++',\n\t'.tpp': 'C++',\n\t'.chs': 'C2hs Haskell',\n\t'.clp': 'CLIPS',\n\t'.cmake': 'CMake',\n\t'.cmake.in': 'CMake',\n\t'.cob': 'COBOL',\n\t'.cbl': 'COBOL',\n\t'.ccp': 'COBOL',\n\t'.cobol': 'COBOL',\n\t'.cpy': 'COBOL',\n\t'.capnp': \"Cap'n Proto\",\n\t'.mss': 'CartoCSS',\n\t'.ceylon': 'Ceylon',\n\t'.chpl': 'Chapel',\n\t'.ch': 'xBase',\n\t'.ck': 'ChucK',\n\t'.cirru': 'Cirru',\n\t'.clw': 'Clarion',\n\t'.icl': 'Clean',\n\t'.dcl': 'Clean',\n\t'.click': 'Click',\n\t'.clj': 'Clojure',\n\t'.boot': 'Clojure',\n\t'.cl2': 'Clojure',\n\t'.cljc': 'Clojure',\n\t'.cljs': 'Clojure',\n\t'.cljs.hl': 'Clojure',\n\t'.cljscm': 'Clojure',\n\t'.cljx': 'Clojure',\n\t'.hic': 'Clojure',\n\t'.coffee': 'CoffeeScript',\n\t'._coffee': 'CoffeeScript',\n\t'.cjsx': 'CoffeeScript',\n\t'.cson': 'CoffeeScript',\n\t'.iced': 'CoffeeScript',\n\t'.cfm': 'ColdFusion',\n\t'.cfml': 'ColdFusion',\n\t'.cfc': 'ColdFusion CFC',\n\t'.lisp': 'NewLisp',\n\t'.asd': 'Common Lisp',\n\t'.cl': 'OpenCL',\n\t'.l': 'PicoLisp',\n\t'.lsp': 'NewLisp',\n\t'.ny': 'Common Lisp',\n\t'.podsl': 'Common Lisp',\n\t'.sexp': 'Common Lisp',\n\t'.cps': 'Component Pascal',\n\t'.coq': 'Coq',\n\t'.v': 'Verilog',\n\t'.cr': 'Crystal',\n\t'.feature': 'Cucumber',\n\t'.cu': 'Cuda',\n\t'.cuh': 'Cuda',\n\t'.cy': 'Cycript',\n\t'.pyx': 'Cython',\n\t'.pxd': 'Cython',\n\t'.pxi': 'Cython',\n\t'.d': 'Makefile',\n\t'.di': 'D',\n\t'.com': 'DIGITAL Command Language',\n\t'.dm': 'DM',\n\t'.dart': 'Dart',\n\t'.djs': 'Dogescript',\n\t'.dylan': 'Dylan',\n\t'.dyl': 'Dylan',\n\t'.intr': 'Dylan',\n\t'.lid': 'Dylan',\n\t'.E': 'E',\n\t'.ecl': 'ECLiPSe',\n\t'.eclxml': 'ECL',\n\t'.e': 'Eiffel',\n\t'.ex': 'Elixir',\n\t'.exs': 'Elixir',\n\t'.elm': 'Elm',\n\t'.el': 'Emacs Lisp',\n\t'.emacs': 'Emacs Lisp',\n\t'.emacs.desktop': 'Emacs Lisp',\n\t'.em': 'EmberScript',\n\t'.emberscript': 'EmberScript',\n\t'.erl': 'Erlang',\n\t'.es': 'JavaScript',\n\t'.escript': 'Erlang',\n\t'.hrl': 'Erlang',\n\t'.xrl': 'Erlang',\n\t'.yrl': 'Erlang',\n\t'.fs': 'GLSL',\n\t'.fsi': 'F#',\n\t'.fsx': 'F#',\n\t'.fx': 'HLSL',\n\t'.flux': 'FLUX',\n\t'.f90': 'FORTRAN',\n\t'.f': 'Forth',\n\t'.f03': 'FORTRAN',\n\t'.f08': 'FORTRAN',\n\t'.f77': 'FORTRAN',\n\t'.f95': 'FORTRAN',\n\t'.for': 'Forth',\n\t'.fpp': 'FORTRAN',\n\t'.factor': 'Factor',\n\t'.fy': 'Fancy',\n\t'.fancypack': 'Fancy',\n\t'.fan': 'Fantom',\n\t'.fth': 'Forth',\n\t'.4th': 'Forth',\n\t'.forth': 'Forth',\n\t'.fr': 'Frege',\n\t'.frt': 'Forth',\n\t'.ftl': 'FreeMarker',\n\t'.gms': 'GAMS',\n\t'.g': 'GAP',\n\t'.gap': 'GAP',\n\t'.gd': 'GDScript',\n\t'.gi': 'GAP',\n\t'.tst': 'Scilab',\n\t'.s': 'GAS',\n\t'.ms': 'MAXScript',\n\t'.glsl': 'GLSL',\n\t'.fp': 'GLSL',\n\t'.frag': 'JavaScript',\n\t'.frg': 'GLSL',\n\t'.fsh': 'GLSL',\n\t'.fshader': 'GLSL',\n\t'.geo': 'GLSL',\n\t'.geom': 'GLSL',\n\t'.glslv': 'GLSL',\n\t'.gshader': 'GLSL',\n\t'.shader': 'GLSL',\n\t'.vert': 'GLSL',\n\t'.vrx': 'GLSL',\n\t'.vsh': 'GLSL',\n\t'.vshader': 'GLSL',\n\t'.gml': 'Game Maker Language',\n\t'.kid': 'Genshi',\n\t'.ebuild': 'Gentoo Ebuild',\n\t'.eclass': 'Gentoo Eclass',\n\t'.glf': 'Glyph',\n\t'.gp': 'Gnuplot',\n\t'.gnu': 'Gnuplot',\n\t'.gnuplot': 'Gnuplot',\n\t'.plot': 'Gnuplot',\n\t'.plt': 'Gnuplot',\n\t'.go': 'Go',\n\t'.golo': 'Golo',\n\t'.gs': 'JavaScript',\n\t'.gst': 'Gosu',\n\t'.gsx': 'Gosu',\n\t'.vark': 'Gosu',\n\t'.grace': 'Grace',\n\t'.gf': 'Grammatical Framework',\n\t'.groovy': 'Groovy',\n\t'.grt': 'Groovy',\n\t'.gtpl': 'Groovy',\n\t'.gvy': 'Groovy',\n\t'.gsp': 'Groovy Server Pages',\n\t'.hcl': 'HCL',\n\t'.tf': 'HCL',\n\t'.hlsl': 'HLSL',\n\t'.fxh': 'HLSL',\n\t'.hlsli': 'HLSL',\n\t'.php': 'PHP',\n\t'.hb': 'Harbour',\n\t'.hs': 'Haskell',\n\t'.hsc': 'Haskell',\n\t'.hx': 'Haxe',\n\t'.hxsl': 'Haxe',\n\t'.hy': 'Hy',\n\t'.pro': 'QMake',\n\t'.dlm': 'IDL',\n\t'.ipf': 'IGOR Pro',\n\t'.idr': 'Idris',\n\t'.lidr': 'Idris',\n\t'.ni': 'Inform 7',\n\t'.i7x': 'Inform 7',\n\t'.iss': 'Inno Setup',\n\t'.io': 'Io',\n\t'.ik': 'Ioke',\n\t'.thy': 'Isabelle',\n\t'.ijs': 'J',\n\t'.flex': 'JFlex',\n\t'.jflex': 'JFlex',\n\t'.jq': 'JSONiq',\n\t'.jsx': 'JSX',\n\t'.mdx': 'MDX',\n\t'.j': 'Objective-J',\n\t'.java': 'Java',\n\t'.jsp': 'Java Server Pages',\n\t'.js': 'JavaScript',\n\t'._js': 'JavaScript',\n\t'.bones': 'JavaScript',\n\t'.es6': 'JavaScript',\n\t'.jake': 'JavaScript',\n\t'.jsb': 'JavaScript',\n\t'.jscad': 'JavaScript',\n\t'.jsfl': 'JavaScript',\n\t'.jsm': 'JavaScript',\n\t'.jss': 'JavaScript',\n\t'.njs': 'JavaScript',\n\t'.pac': 'JavaScript',\n\t'.sjs': 'JavaScript',\n\t'.ssjs': 'JavaScript',\n\t'.sublime-build': 'JavaScript',\n\t'.sublime-commands': 'JavaScript',\n\t'.sublime-completions': 'JavaScript',\n\t'.sublime-keymap': 'JavaScript',\n\t'.sublime-macro': 'JavaScript',\n\t'.sublime-menu': 'JavaScript',\n\t'.sublime-mousemap': 'JavaScript',\n\t'.sublime-project': 'JavaScript',\n\t'.sublime-settings': 'JavaScript',\n\t'.sublime-theme': 'JavaScript',\n\t'.sublime-workspace': 'JavaScript',\n\t'.sublime_metrics': 'JavaScript',\n\t'.sublime_session': 'JavaScript',\n\t'.xsjs': 'JavaScript',\n\t'.xsjslib': 'JavaScript',\n\t'.jl': 'Julia',\n\t'.krl': 'KRL',\n\t'.sch': 'KiCad',\n\t'.brd': 'KiCad',\n\t'.kicad_pcb': 'KiCad',\n\t'.kt': 'Kotlin',\n\t'.ktm': 'Kotlin',\n\t'.kts': 'Kotlin',\n\t'.lfe': 'LFE',\n\t'.ll': 'LLVM',\n\t'.lol': 'LOLCODE',\n\t'.lsl': 'LSL',\n\t'.lslp': 'LSL',\n\t'.lvproj': 'LabVIEW',\n\t'.lasso': 'Lasso',\n\t'.las': 'Lasso',\n\t'.lasso8': 'Lasso',\n\t'.lasso9': 'Lasso',\n\t'.ldml': 'Lasso',\n\t'.lean': 'Lean',\n\t'.hlean': 'Lean',\n\t'.lex': 'Lex',\n\t'.ly': 'LilyPond',\n\t'.ily': 'LilyPond',\n\t'.m': 'Objective-C',\n\t'.lagda': 'Literate Agda',\n\t'.litcoffee': 'Literate CoffeeScript',\n\t'.lhs': 'Literate Haskell',\n\t'.ls': 'LoomScript',\n\t'._ls': 'LiveScript',\n\t'.xm': 'Logos',\n\t'.x': 'Logos',\n\t'.xi': 'Logos',\n\t'.lgt': 'Logtalk',\n\t'.logtalk': 'Logtalk',\n\t'.lookml': 'LookML',\n\t'.lua': 'Lua',\n\t'.fcgi': 'Shell',\n\t'.nse': 'Lua',\n\t'.pd_lua': 'Lua',\n\t'.rbxs': 'Lua',\n\t'.wlua': 'Lua',\n\t'.mumps': 'M',\n\t'.m4': 'M4Sugar',\n\t'.mcr': 'MAXScript',\n\t'.muf': 'MUF',\n\t'.mak': 'Makefile',\n\t'.mk': 'Makefile',\n\t'.mkfile': 'Makefile',\n\t'.mako': 'Mako',\n\t'.mao': 'Mako',\n\t'.mathematica': 'Mathematica',\n\t'.cdf': 'Mathematica',\n\t'.ma': 'Mathematica',\n\t'.mt': 'Mathematica',\n\t'.nb': 'Mathematica',\n\t'.nbp': 'Mathematica',\n\t'.wl': 'Mathematica',\n\t'.wlt': 'Mathematica',\n\t'.matlab': 'Matlab',\n\t'.maxpat': 'Max',\n\t'.maxhelp': 'Max',\n\t'.maxproj': 'Max',\n\t'.mxt': 'Max',\n\t'.pat': 'Max',\n\t'.moo': 'Moocode',\n\t'.metal': 'Metal',\n\t'.minid': 'MiniD',\n\t'.druby': 'Mirah',\n\t'.duby': 'Mirah',\n\t'.mir': 'Mirah',\n\t'.mirah': 'Mirah',\n\t'.mo': 'Modelica',\n\t'.mms': 'Module Management System',\n\t'.mmk': 'Module Management System',\n\t'.monkey': 'Monkey',\n\t'.moon': 'MoonScript',\n\t'.myt': 'Myghty',\n\t'.ncl': 'NCL',\n\t'.nsi': 'NSIS',\n\t'.nsh': 'NSIS',\n\t'.n': 'Nemerle',\n\t'.axs': 'NetLinx',\n\t'.axi': 'NetLinx',\n\t'.axs.erb': 'NetLinx+ERB',\n\t'.axi.erb': 'NetLinx+ERB',\n\t'.nlogo': 'NetLogo',\n\t'.nl': 'NewLisp',\n\t'.nim': 'Nimrod',\n\t'.nimrod': 'Nimrod',\n\t'.nit': 'Nit',\n\t'.nix': 'Nix',\n\t'.nu': 'Nu',\n\t'.numpy': 'NumPy',\n\t'.numpyw': 'NumPy',\n\t'.numsc': 'NumPy',\n\t'.ml': 'OCaml',\n\t'.eliom': 'OCaml',\n\t'.eliomi': 'OCaml',\n\t'.ml4': 'OCaml',\n\t'.mli': 'OCaml',\n\t'.mll': 'OCaml',\n\t'.mly': 'OCaml',\n\t'.mm': 'Objective-C++',\n\t'.sj': 'Objective-J',\n\t'.omgrofl': 'Omgrofl',\n\t'.opa': 'Opa',\n\t'.opal': 'Opal',\n\t'.opencl': 'OpenCL',\n\t'.p': 'OpenEdge ABL',\n\t'.scad': 'OpenSCAD',\n\t'.ox': 'Ox',\n\t'.oxh': 'Ox',\n\t'.oxo': 'Ox',\n\t'.oxygene': 'Oxygene',\n\t'.oz': 'Oz',\n\t'.pwn': 'PAWN',\n\t'.aw': 'PHP',\n\t'.ctp': 'PHP',\n\t'.php3': 'PHP',\n\t'.php4': 'PHP',\n\t'.php5': 'PHP',\n\t'.phps': 'PHP',\n\t'.phpt': 'PHP',\n\t'.pls': 'PLSQL',\n\t'.pck': 'PLSQL',\n\t'.pkb': 'PLSQL',\n\t'.pks': 'PLSQL',\n\t'.plb': 'PLSQL',\n\t'.plsql': 'PLSQL',\n\t'.sql': 'SQLPL',\n\t'.pov': 'POV-Ray SDL',\n\t'.pan': 'Pan',\n\t'.psc': 'Papyrus',\n\t'.parrot': 'Parrot',\n\t'.pasm': 'Parrot Assembly',\n\t'.pir': 'Parrot Internal Representation',\n\t'.pas': 'Pascal',\n\t'.dfm': 'Pascal',\n\t'.dpr': 'Pascal',\n\t'.lpr': 'Pascal',\n\t'.pp': 'Puppet',\n\t'.pl': 'Prolog',\n\t'.al': 'Perl',\n\t'.cgi': 'Shell',\n\t'.perl': 'Perl',\n\t'.ph': 'Perl',\n\t'.plx': 'Perl',\n\t'.pm': 'Perl6',\n\t'.pod': 'Perl',\n\t'.psgi': 'Perl',\n\t'.t': 'Turing',\n\t'.6pl': 'Perl6',\n\t'.6pm': 'Perl6',\n\t'.nqp': 'Perl6',\n\t'.p6': 'Perl6',\n\t'.p6l': 'Perl6',\n\t'.p6m': 'Perl6',\n\t'.pl6': 'Perl6',\n\t'.pm6': 'Perl6',\n\t'.pig': 'PigLatin',\n\t'.pike': 'Pike',\n\t'.pmod': 'Pike',\n\t'.pogo': 'PogoScript',\n\t'.pony': 'Pony',\n\t'.ps1': 'PowerShell',\n\t'.psd1': 'PowerShell',\n\t'.psm1': 'PowerShell',\n\t'.pde': 'Processing',\n\t'.prolog': 'Prolog',\n\t'.yap': 'Prolog',\n\t'.spin': 'Propeller Spin',\n\t'.pd': 'Pure Data',\n\t'.pb': 'PureBasic',\n\t'.pbi': 'PureBasic',\n\t'.purs': 'PureScript',\n\t'.py': 'Python',\n\t'.bzl': 'Python',\n\t'.gyp': 'Python',\n\t'.lmi': 'Python',\n\t'.pyde': 'Python',\n\t'.pyp': 'Python',\n\t'.pyt': 'Python',\n\t'.pyw': 'Python',\n\t'.rpy': \"Ren'Py\",\n\t'.tac': 'Python',\n\t'.wsgi': 'Python',\n\t'.xpy': 'Python',\n\t'.qml': 'QML',\n\t'.qbs': 'QML',\n\t'.pri': 'QMake',\n\t'.r': 'Rebol',\n\t'.rd': 'R',\n\t'.rsx': 'R',\n\t'.rbbas': 'REALbasic',\n\t'.rbfrm': 'REALbasic',\n\t'.rbmnu': 'REALbasic',\n\t'.rbres': 'REALbasic',\n\t'.rbtbar': 'REALbasic',\n\t'.rbuistate': 'REALbasic',\n\t'.rkt': 'Racket',\n\t'.rktd': 'Racket',\n\t'.rktl': 'Racket',\n\t'.scrbl': 'Racket',\n\t'.rl': 'Ragel in Ruby Host',\n\t'.reb': 'Rebol',\n\t'.r2': 'Rebol',\n\t'.r3': 'Rebol',\n\t'.rebol': 'Rebol',\n\t'.red': 'Red',\n\t'.reds': 'Red',\n\t'.cw': 'Redcode',\n\t'.rs': 'Rust',\n\t'.rsh': 'RenderScript',\n\t'.robot': 'RobotFramework',\n\t'.rg': 'Rouge',\n\t'.rb': 'Ruby',\n\t'.builder': 'Ruby',\n\t'.gemspec': 'Ruby',\n\t'.god': 'Ruby',\n\t'.irbrc': 'Ruby',\n\t'.jbuilder': 'Ruby',\n\t'.mspec': 'Ruby',\n\t'.pluginspec': 'Ruby',\n\t'.podspec': 'Ruby',\n\t'.rabl': 'Ruby',\n\t'.rake': 'Ruby',\n\t'.rbuild': 'Ruby',\n\t'.rbw': 'Ruby',\n\t'.rbx': 'Ruby',\n\t'.ru': 'Ruby',\n\t'.ruby': 'Ruby',\n\t'.thor': 'Ruby',\n\t'.watchr': 'Ruby',\n\t'.rs.in': 'Rust',\n\t'.sas': 'SAS',\n\t'.smt2': 'SMT',\n\t'.smt': 'SMT',\n\t'.sqf': 'SQF',\n\t'.hqf': 'SQF',\n\t'.db2': 'SQLPL',\n\t'.sage': 'Sage',\n\t'.sagews': 'Sage',\n\t'.sls': 'Scheme',\n\t'.scala': 'Scala',\n\t'.sbt': 'Scala',\n\t'.sc': 'SuperCollider',\n\t'.scm': 'Scheme',\n\t'.sld': 'Scheme',\n\t'.sps': 'Scheme',\n\t'.ss': 'Scheme',\n\t'.sci': 'Scilab',\n\t'.sce': 'Scilab',\n\t'.self': 'Self',\n\t'.sh': 'Shell',\n\t'.bash': 'Shell',\n\t'.bats': 'Shell',\n\t'.command': 'Shell',\n\t'.ksh': 'Shell',\n\t'.sh.in': 'Shell',\n\t'.tmux': 'Shell',\n\t'.tool': 'Shell',\n\t'.zsh': 'Shell',\n\t'.sh-session': 'ShellSession',\n\t'.shen': 'Shen',\n\t'.sl': 'Slash',\n\t'.smali': 'Smali',\n\t'.st': 'Smalltalk',\n\t'.tpl': 'Smarty',\n\t'.sp': 'SourcePawn',\n\t'.sma': 'SourcePawn',\n\t'.nut': 'Squirrel',\n\t'.stan': 'Stan',\n\t'.ML': 'Standard ML',\n\t'.fun': 'Standard ML',\n\t'.sig': 'Standard ML',\n\t'.sml': 'Standard ML',\n\t'.do': 'Stata',\n\t'.ado': 'Stata',\n\t'.doh': 'Stata',\n\t'.ihlp': 'Stata',\n\t'.mata': 'Stata',\n\t'.matah': 'Stata',\n\t'.sthlp': 'Stata',\n\t'.scd': 'SuperCollider',\n\t'.swift': 'Swift',\n\t'.sv': 'SystemVerilog',\n\t'.svh': 'SystemVerilog',\n\t'.vh': 'SystemVerilog',\n\t'.txl': 'TXL',\n\t'.tcl': 'Tcl',\n\t'.adp': 'Tcl',\n\t'.tm': 'Tcl',\n\t'.tcsh': 'Tcsh',\n\t'.csh': 'Tcsh',\n\t'.thrift': 'Thrift',\n\t'.tu': 'Turing',\n\t'.ts': 'TypeScript',\n\t'.tsx': 'TypeScript',\n\t'.upc': 'Unified Parallel C',\n\t'.uno': 'Uno',\n\t'.uc': 'UnrealScript',\n\t'.ur': 'UrWeb',\n\t'.urs': 'UrWeb',\n\t'.vcl': 'VCL',\n\t'.vhdl': 'VHDL',\n\t'.vhd': 'VHDL',\n\t'.vhf': 'VHDL',\n\t'.vhi': 'VHDL',\n\t'.vho': 'VHDL',\n\t'.vhs': 'VHDL',\n\t'.vht': 'VHDL',\n\t'.vhw': 'VHDL',\n\t'.vala': 'Vala',\n\t'.vapi': 'Vala',\n\t'.veo': 'Verilog',\n\t'.vim': 'VimL',\n\t'.vb': 'Visual Basic',\n\t'.bas': 'Visual Basic',\n\t'.frm': 'Visual Basic',\n\t'.frx': 'Visual Basic',\n\t'.vba': 'Visual Basic',\n\t'.vbhtml': 'Visual Basic',\n\t'.vbs': 'Visual Basic',\n\t'.volt': 'Volt',\n\t'.webidl': 'WebIDL',\n\t'.x10': 'X10',\n\t'.xc': 'XC',\n\t'.xsp-config': 'XPages',\n\t'.xsp.metadata': 'XPages',\n\t'.xpl': 'XProc',\n\t'.xproc': 'XProc',\n\t'.xquery': 'XQuery',\n\t'.xq': 'XQuery',\n\t'.xql': 'XQuery',\n\t'.xqm': 'XQuery',\n\t'.xqy': 'XQuery',\n\t'.xs': 'XS',\n\t'.xslt': 'XSLT',\n\t'.xsl': 'XSLT',\n\t'.xojo_code': 'Xojo',\n\t'.xojo_menu': 'Xojo',\n\t'.xojo_report': 'Xojo',\n\t'.xojo_script': 'Xojo',\n\t'.xojo_toolbar': 'Xojo',\n\t'.xojo_window': 'Xojo',\n\t'.xtend': 'Xtend',\n\t'.y': 'Yacc',\n\t'.yacc': 'Yacc',\n\t'.yy': 'Yacc',\n\t'.zep': 'Zephir',\n\t'.zimpl': 'Zimpl',\n\t'.zmpl': 'Zimpl',\n\t'.zpl': 'Zimpl',\n\t'.ec': 'eC',\n\t'.eh': 'eC',\n\t'.fish': 'fish',\n\t'.mu': 'mupad',\n\t'.nc': 'nesC',\n\t'.ooc': 'ooc',\n\t'.wisp': 'wisp',\n\t'.prg': 'xBase',\n\t'.prw': 'xBase'\n};\n\nexport const allSupportedExtensions = [\n\t...generalFileExtSupported,\n\t...Object.keys(programmingFilesExtensions)\n];\n\nexport const MEMORYSETS: memorysetsConstants = {\n\tMAX_DOC_SIZE: 10 * 1024 * 1024, // 10MB = 10 * 1024 KB = 10 * 1024 * 1024 bytes\n\tACCEPTED_MIME_TYPES: [\n\t\t'text/plain',\n\t\t'application/pdf',\n\t\t'text/markdown',\n\t\t'text/csv',\n\t\t'application/vnd.ms-excel',\n\t\t'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n\t],\n\tDOC_TYPES: generalFileExtSupported,\n\tEMBEDDING_MODEL: 'text-embedding-3-large',\n\tEMBEDDING_DIMENSIONS: 256,\n\tMIN_CHUNK_LENGTH: 1024,\n\tMAX_CHUNK_LENGTH: 30000,\n\tMIN_CHUNK_OVERLAP: 256,\n\tEMBEDDING_MODEL_TOKENS_LIMIT: 8191,\n\tEMBEDDING_MAX_BATCH_SIZE: 2048,\n\tEMBEDDING_ENCODING_FORMAT: 'float',\n\tTOP_K: 3,\n\tMAX_CHUNKS_ATTACHED_TO_LLM: 20,\n\tOLLAMA_EMBEDDINGS_ENDPOINT: 'http://localhost:11434/api/embeddings',\n\tOLLAMA_EMBEDDINGS_MODEL: 'mxbai-embed-large'\n};\n\ninterface memorysetsConstants {\n\tMAX_DOC_SIZE: number;\n\tACCEPTED_MIME_TYPES: string[];\n\tDOC_TYPES: string[];\n\tEMBEDDING_MODEL: string;\n\tEMBEDDING_DIMENSIONS: number;\n\tEMBEDDING_ENCODING_FORMAT: 'float' | 'base64';\n\tMIN_CHUNK_LENGTH: number;\n\tMIN_CHUNK_OVERLAP: number;\n\tMAX_CHUNK_LENGTH: number;\n\tEMBEDDING_MODEL_TOKENS_LIMIT: number;\n\tEMBEDDING_MAX_BATCH_SIZE: number;\n\tTOP_K: number;\n\tMAX_CHUNKS_ATTACHED_TO_LLM: number;\n\tOLLAMA_EMBEDDINGS_ENDPOINT: string;\n\tOLLAMA_EMBEDDINGS_MODEL: string;\n}\n\nexport const defaultRagPrompt = `Below is some CONTEXT for you to answer the questions. ONLY answer from the CONTEXT. CONTEXT consists of multiple information chunks. Each chunk has a source mentioned at the end.\\n\\nFor each piece of response you provide, cite the source in brackets like so: [1].\\n\\nAt the end of the answer, always list each source with its corresponding number and provide the document name. like so [1] Filename.doc.\\n\\nIf you don't know the answer, just say that you don't know. Ask for more context and better questions if needed.`;\n","import * as p from '@clack/prompts';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { allSupportedExtensions, MEMORYSETS } from './constants';\nimport { getDocumentContent } from './get-document-content';\nimport { formatDocSize } from './lib';\nimport loadMemoryConfig from './load-memory-config';\nimport {\n\tmemoryConfigSchema,\n\ttype DocumentConfigI,\n\ttype MemoryConfigI\n} from 'types/memory';\nimport { execSync } from 'child_process';\nimport fg from 'fast-glob';\n\nexport interface MemoryDocumentI {\n\tname: string;\n\tsize: string;\n\tcontent: string;\n\tblob: Blob;\n\tpath: string;\n\tmeta: Record<string, string>;\n}\n\nexport const loadMemoryFiles = async (\n\tmemoryName: string\n): Promise<MemoryDocumentI[]> => {\n\t// Get memory config.\n\tconst memoryConfig = await checkMemoryConfig(memoryName);\n\n\t// useDocumentsDir\n\tconst useDocumentsDir = !memoryConfig || !memoryConfig.git.enabled;\n\tconst documentConfig = memoryConfig?.documents;\n\n\t// Load files from documents directory.\n\tif (useDocumentsDir) {\n\t\treturn await loadMemoryFilesFromDocsDir({ memoryName, documentConfig });\n\t}\n\n\t// Load files from the repo.\n\treturn await loadMemoryFilesFromCustomDir({ memoryName, memoryConfig });\n};\n\n/**\n * Loads memory files from a custom directory specified in the memory configuration.\n *\n * @param {Object} params - The parameters for loading memory files.\n * @param {string} params.memoryName - The name of the memory.\n * @param {MemoryConfigI} params.memoryConfig - The configuration for the memory, including the directory to track and the extensions to track.\n * @returns {Promise<MemoryDocumentI[]>} A promise that resolves to an array of memory documents.\n *\n * @throws Will terminate the process if the documents directory does not exist or if it fails to read documents in the memory.\n */\nexport const loadMemoryFilesFromCustomDir = async ({\n\tmemoryName,\n\tmemoryConfig\n}: {\n\tmemoryName: string;\n\tmemoryConfig: MemoryConfigI;\n}): Promise<MemoryDocumentI[]> => {\n\tconst includePatterns = memoryConfig.git.include;\n\n\tif (!Array.isArray(includePatterns) || includePatterns.length === 0) {\n\t\tp.cancel(`No include patterns specified for memory '${memoryName}'`);\n\t\tprocess.exit(1);\n\t}\n\n\tconsole.log('Reading documents in memory...');\n\n\t// Get all files that match the glob patterns and are tracked by git\n\tlet allFiles: string[];\n\ttry {\n\t\t// First get all git tracked files\n\t\tconst gitFiles = new Set([\n\t\t\t...execSync('git ls-files', { encoding: 'utf-8' })\n\t\t\t\t.split('\\n')\n\t\t\t\t.filter(Boolean),\n\t\t\t...execSync('git ls-files --others --exclude-standard', {\n\t\t\t\tencoding: 'utf-8'\n\t\t\t})\n\t\t\t\t.split('\\n')\n\t\t\t\t.filter(Boolean),\n\t\t\t...execSync('git diff --name-only', { encoding: 'utf-8' })\n\t\t\t\t.split('\\n')\n\t\t\t\t.filter(Boolean)\n\t\t]);\n\n\t\t// Then match against glob patterns\n\t\tconst matchedFiles = await fg(includePatterns, {\n\t\t\tignore: ['node_modules/**'],\n\t\t\tdot: true,\n\t\t\tgitignore: memoryConfig.git.gitignore || true\n\t\t});\n\n\t\t// Only keep files that are both tracked by git and match the patterns\n\t\tallFiles = matchedFiles.filter((file: string) => gitFiles.has(file));\n\t} catch (error) {\n\t\tp.cancel(`Failed to read documents in memory '${memoryName}'.`);\n\t\tprocess.exit(1);\n\t}\n\n\tconst memoryFilesContent = await Promise.all(\n\t\tallFiles.map(async filePath => {\n\t\t\t// Check if the file is allowed\n\t\t\tconst isSupportedExtension = allSupportedExtensions.some(\n\t\t\t\textension => filePath.endsWith(extension)\n\t\t\t);\n\n\t\t\tif (!isSupportedExtension) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tlet fileContentBuffer: Buffer;\n\t\t\ttry {\n\t\t\t\tfileContentBuffer = await fs.readFile(filePath);\n\t\t\t} catch (error) {\n\t\t\t\tp.log.warn(`Failed to read file: ${filePath}. Skipping.`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst fileContentBlob = new Blob([fileContentBuffer]);\n\t\t\tconst size = fileContentBlob.size;\n\n\t\t\tif (size > MEMORYSETS.MAX_DOC_SIZE) {\n\t\t\t\tp.log.warn(\n\t\t\t\t\t`Skipping ${filePath}; File exceeds the maximum size of ${formatDocSize(MEMORYSETS.MAX_DOC_SIZE)}.`\n\t\t\t\t);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst memoryFile = {\n\t\t\t\tpath: filePath,\n\t\t\t\tname: path.basename(filePath.replace(/\\//g, '-')),\n\t\t\t\tsize: formatDocSize(fileContentBlob.size),\n\t\t\t\tcontent: await getDocumentContent(fileContentBlob),\n\t\t\t\tblob: fileContentBlob\n\t\t\t};\n\n\t\t\tlet meta = {};\n\n\t\t\tif (memoryConfig?.documents?.meta) {\n\t\t\t\tmeta = memoryConfig.documents.meta(memoryFile) || {};\n\t\t\t}\n\n\t\t\treturn { ...memoryFile, meta };\n\t\t})\n\t);\n\n\tconst memoryFilesContentFiltered = memoryFilesContent.filter(\n\t\t(file): file is MemoryDocumentI => file !== null\n\t);\n\n\tif (memoryFilesContentFiltered.length === 0) {\n\t\treturn [];\n\t}\n\n\treturn memoryFilesContentFiltered;\n};\n\n/**\n * Loads memory files from the specified memory directory.\n *\n * @param memoryName - The name of the memory directory to load files from.\n * @returns A promise that resolves to an array of `MemoryDocumentI` objects.\n *\n * @throws Will exit the process if the documents directory does not exist or if reading the directory fails.\n *\n * The function performs the following steps:\n * 1. Constructs the path to the memory directory and the documents subdirectory.\n * 2. Checks if the documents directory exists. If not, logs an error and exits the process.\n * 3. Reads the list of files in the documents directory. If reading fails, logs an error and exits the process.\n * 4. Reads the content of each file and filters out files that:\n *    - Cannot be read.\n *    - Exceed the maximum allowed size.\n *    - Have unsupported file extensions.\n * 5. Returns an array of `MemoryDocumentI` objects representing the valid memory files.\n */\nexport const loadMemoryFilesFromDocsDir = async ({\n\tmemoryName,\n\tdocumentConfig\n}: {\n\tmemoryName: string;\n\tdocumentConfig?: DocumentConfigI;\n}): Promise<MemoryDocumentI[]> => {\n\tconst memoryDir = path.join(process.cwd(), 'baseai', 'memory', memoryName);\n\tconst memoryFilesPath = path.join(memoryDir, 'documents');\n\n\ttry {\n\t\tawait fs.access(memoryFilesPath);\n\t} catch (error) {\n\t\tp.cancel(\n\t\t\t`Documents directory for memory '${memoryName}' does not exist.`\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tlet memoryFiles: string[];\n\ttry {\n\t\tmemoryFiles = await fs.readdir(memoryFilesPath);\n\t} catch (error) {\n\t\tp.cancel(`Failed to read documents in memory '${memoryName}'.`);\n\t\tprocess.exit(1);\n\t}\n\n\tconst memoryFilesContent = await Promise.all(\n\t\tmemoryFiles.map(async file => {\n\t\t\t// Check if the file is allowed.\n\t\t\tconst isSupportedExtension = allSupportedExtensions.some(\n\t\t\t\textension => file.endsWith(extension)\n\t\t\t);\n\n\t\t\tif (!isSupportedExtension) {\n\t\t\t\tp.log.warn(`Skipping ${file}; Unsupported file extension.`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst filePath = path.join(memoryFilesPath, file);\n\n\t\t\tlet fileContentBuffer: Buffer;\n\t\t\ttry {\n\t\t\t\tfileContentBuffer = await fs.readFile(filePath);\n\t\t\t} catch (error) {\n\t\t\t\tp.log.warn(`Failed to read file: ${file}. Skipping.`);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst fileContentBlob = new Blob([fileContentBuffer]);\n\t\t\tconst size = fileContentBlob.size;\n\n\t\t\tif (size > MEMORYSETS.MAX_DOC_SIZE) {\n\t\t\t\tp.log.warn(\n\t\t\t\t\t`Skipping ${file}; File exceeds the maximum size of ${formatDocSize(MEMORYSETS.MAX_DOC_SIZE)}.`\n\t\t\t\t);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst memoryFile = {\n\t\t\t\tname: file,\n\t\t\t\tpath: filePath,\n\t\t\t\tsize: formatDocSize(fileContentBlob.size),\n\t\t\t\tcontent: await getDocumentContent(fileContentBlob),\n\t\t\t\tblob: fileContentBlob\n\t\t\t};\n\n\t\t\tlet meta = {};\n\n\t\t\tif (documentConfig?.meta) {\n\t\t\t\tmeta = documentConfig.meta(memoryFile) || {};\n\t\t\t}\n\n\t\t\treturn { ...memoryFile, meta };\n\t\t})\n\t);\n\n\tconst memoryFilesContentFiltered = memoryFilesContent.filter(\n\t\t(file): file is MemoryDocumentI => file !== null\n\t);\n\n\tif (memoryFilesContentFiltered.length === 0) {\n\t\treturn [];\n\t}\n\n\treturn memoryFilesContentFiltered;\n};\n\n/**\n * Asynchronously checks the configuration for a given memory name.\n *\n * @param memoryName - The name of the memory to check the configuration for.\n * @returns A promise that resolves to the memory configuration if it exists and is valid,\n *          resolves to null if the configuration does not exist,\n *          or does not resolve if the configuration is invalid (process exits).\n */\nasync function checkMemoryConfig(\n\tmemoryName: string\n): Promise<MemoryConfigI | null | void> {\n\t// Load config for memory.\n\tconst memoryConfig = await loadMemoryConfig(memoryName);\n\n\t// Check if config exists.\n\tconst configExists = memoryConfig !== null;\n\n\t// No config exists for memory.\n\tif (!configExists) {\n\t\treturn null;\n\t}\n\n\t// Check if config is valid.\n\tconst validatedConfig = memoryConfigSchema.safeParse(memoryConfig);\n\n\t// Config is invalid.\n\tif (!validatedConfig.success) {\n\t\tp.cancel(`Memory '${memoryName}' has an invalid config.`);\n\t\tprocess.exit(1);\n\t}\n\n\treturn {\n\t\t...memoryConfig\n\t};\n}\n\nexport const getMemoryFileNames = async (\n\tmemoryName: string\n): Promise<string[]> => {\n\tconst memoryDir = path.join(process.cwd(), 'baseai', 'memory', memoryName);\n\tconst memoryFilesPath = path.join(memoryDir, 'documents');\n\n\ttry {\n\t\tawait fs.access(memoryFilesPath);\n\t} catch (error) {\n\t\tp.cancel(\n\t\t\t`Documents directory for memory '${memoryName}' does not exist.`\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\ttry {\n\t\tconst memoryFiles = await fs.readdir(memoryFilesPath);\n\n\t\tconst validFiles = await Promise.all(\n\t\t\tmemoryFiles.map(async file => {\n\t\t\t\tconst filePath = path.join(memoryFilesPath, file);\n\t\t\t\tconst stats = await fs.stat(filePath);\n\n\t\t\t\tconst isSupportedExtension = allSupportedExtensions.some(\n\t\t\t\t\textension => file.endsWith(extension)\n\t\t\t\t);\n\t\t\t\tconst isNotTooLarge = stats.size <= MEMORYSETS.MAX_DOC_SIZE;\n\n\t\t\t\treturn isSupportedExtension && isNotTooLarge ? file : null;\n\t\t\t})\n\t\t);\n\n\t\treturn validFiles.filter((file): file is string => file !== null);\n\t} catch (error) {\n\t\tp.cancel(`Failed to read documents in memory '${memoryName}'.`);\n\t\tprocess.exit(1);\n\t}\n};\n","import { getDocumentProxy, extractText } from 'unpdf';\nimport * as XLSX from 'xlsx';\n\n/**\n * Retrieves the content of a document.\n *\n * Supported document types:\n * 1- Text files: .txt\n * 2- PDF files: .pdf\n * 3- CSV files: .csv\n * 4- Excel files: .xlsx/.xls\n * 5- Markdown files: .md\n *\n * @param doc - The document to retrieve the content from.\n * @returns A promise that resolves to the content of the document as a string.\n */\nexport async function getDocumentContent(doc: Blob): Promise<string> {\n\t// Extract the content from the doc.\n\tlet docType = doc.type;\n\n\t// Make text files.\n\tif (docType.includes('charset')) docType = 'text/plain';\n\n\tlet content = '';\n\n\t// Process content based on document type.\n\tif (docType === 'text/plain') {\n\t\tcontent = await processTextFile(doc);\n\t} else if (docType === 'application/pdf') {\n\t\tcontent = await processPdfFile(doc);\n\t} else if (docType === 'text/csv') {\n\t\tcontent = await processCsvFile(doc);\n\t} else if (docType.includes('application/vnd')) {\n\t\t/***\n\t\t * 'application/vnd.ms-excel' -> .xls\n\t\t * 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' -> .xlsx\n\t\t */\n\t\tcontent = await processXlsFile(doc);\n\t} else {\n\t\tcontent = await processMarkdownFile(doc);\n\t}\n\n\t// Remove emojis from the content.\n\tcontent = removeEmojis(content);\n\n\treturn content;\n}\n\n/**\n * Processes a text file and returns its content as a string.\n *\n * @param doc - The text file to be processed.\n * @returns A promise that resolves to the content of the text file as a string.\n */\nasync function processTextFile(doc: Blob): Promise<string> {\n\treturn await doc.text();\n}\n\n/**\n * Processes a PDF file and extracts its content as a string.\n *\n * @param doc - The PDF file to process.\n * @returns A promise that resolves to the extracted content as a string.\n */\nasync function processPdfFile(doc: Blob): Promise<string> {\n\tconst pdfDocument = await getDocumentProxy(await doc.arrayBuffer());\n\tconst { text } = await extractText(pdfDocument, {\n\t\tmergePages: true\n\t});\n\treturn typeof text === 'string' ? text : (text as string[]).join('\\n');\n}\n\n/**\n * Processes a CSV file and returns its content as a string.\n *\n * @param doc - The CSV file to be processed.\n * @returns A promise that resolves to the content of the CSV file as a string.\n */\nasync function processCsvFile(doc: Blob): Promise<string> {\n\tconst content = await doc.text();\n\treturn processCSV(content);\n}\n\n/**\n * Processes an XLS file and returns its content as a string.\n * (Supports both .xls and .xlsx files)\n *\n * @param doc - The XLS file to process.\n * @returns A promise that resolves to the content of the XLS file as a string.\n */\nasync function processXlsFile(doc: Blob): Promise<string> {\n\t// Read the Excel file as an array buffer\n\tconst arrayBuffer = await doc.arrayBuffer();\n\n\t// Parse the Excel file\n\tconst workbook = XLSX.read(new Uint8Array(arrayBuffer), { type: 'array' });\n\n\t// Content\n\tlet content = '';\n\t// Traverse all the sheets in the workbook\n\t// and process the content of each sheet and append it to the final content.\n\n\tfor (const sheetName of workbook.SheetNames) {\n\t\t// Get the content of the sheet\n\t\tconst worksheet = workbook.Sheets[sheetName];\n\t\t// Convert the sheet to CSV\n\t\tconst csvContent = XLSX.utils.sheet_to_csv(worksheet);\n\t\t// Process\n\t\tconst processedContent = processCSV(csvContent);\n\t\t// Append the processed content to the final content\n\t\tcontent += processedContent + '\\n\\n';\n\t}\n\n\t// Return the final content\n\treturn content;\n}\n\n/**\n * Processes a markdown file and returns its content as a string.\n *\n * @param doc - The markdown file to process.\n * @returns A promise that resolves to the content of the markdown file as a string.\n */\nasync function processMarkdownFile(doc: Blob): Promise<string> {\n\treturn await doc.text();\n}\n\n/**\n * Removes emojis from the given content.\n *\n * @param content - The content from which emojis should be removed.\n * @returns The content with emojis removed.\n */\nfunction removeEmojis(content: string): string {\n\treturn content.replace(\n\t\t/([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g,\n\t\t''\n\t);\n}\n\n/**\n * Processes the content of a CSV file and returns the processed content.\n *\n * The processed content is a string where each row is prepended with the header row.\n *\n * @param csvContent - The content of the CSV file as a string.\n * @returns The processed content of the CSV file.\n */\nfunction processCSV(csvContent: string): string {\n\t// Split the content into rows\n\tconst rows = csvContent.split('\\n');\n\n\t// Extract the header row\n\tconst header = rows[0].replace('\\r', '');\n\n\t// Process each data row and join them into a single string\n\tconst processedContent = rows\n\t\t.slice(1)\n\t\t.map(row => {\n\t\t\t// Skip empty rows and rows with only commas\n\t\t\tif (row.trim() === '' || /^[,]+$/.test(row.trim())) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn header + '\\n' + row;\n\t\t})\n\t\t.join('\\n\\n');\n\n\treturn processedContent;\n}\n","/**\n * Lib file for memory module\n *\n * All functions return {data: any|null, error: string|null}\n */\nimport * as p from '@clack/prompts';\nimport fs from 'fs';\nimport type { Message } from 'types/pipe';\nimport { fromZodError } from 'zod-validation-error';\nimport { defaultRagPrompt, MEMORYSETS } from './constants';\nimport {\n\tcosineSimilaritySearch,\n\tgetDocumentsFromMemory,\n\ttype SimilarChunk\n} from './db/lib';\n// import { generateLocalEmbeddings } from './generate-local-embeddings';\nimport { dlog } from '@/dev/utils/dlog';\nimport { memoryDocSchema, memoryNameSchema } from 'types/memory';\nimport { loadConfig } from '../config/config-handler';\nimport { logger } from '../logger-utils';\nimport { generateLocalEmbeddings } from './generate-local-embeddings';\nimport { getOpenAIEmbeddings } from './generate-openai-embeddings';\n\nexport async function checkDirectoryExists(directoryPath: string) {\n\ttry {\n\t\tawait fs.promises.access(directoryPath);\n\t\treturn {\n\t\t\tdata: true,\n\t\t\terror: null\n\t\t};\n\t} catch (error: any) {\n\t\tconsole.log('utils/memory/lib.ts: checkDirectoryExists: error:', error);\n\t\treturn {\n\t\t\tdata: null,\n\t\t\terror: getErrorMsg(error, 'Error checking directory exists')\n\t\t};\n\t}\n}\n\nexport const getErrorMsg = (error: any, defaultMsg: string) => {\n\tconst isErrorMessage = error instanceof Error;\n\tconst errorMessage = isErrorMessage\n\t\t? error.message.trim() || defaultMsg\n\t\t: defaultMsg;\n\treturn errorMessage;\n};\n\n/**\n * Formats the given number of bytes into a human-readable string representation.\n * @param bytes - The number of bytes to format.\n * @returns A string representing the formatted size.\n */\nexport function formatDocSize(bytes: number): string {\n\tif (bytes === 0) return '0 bytes';\n\n\tif (bytes < 1024) {\n\t\treturn bytes.toFixed(2) + ' bytes';\n\t} else if (bytes < 1024 * 1024) {\n\t\tconst fileSizeInKB = bytes / 1024;\n\t\treturn fileSizeInKB.toFixed(2) + ' KB';\n\t} else {\n\t\tconst fileSizeInMB = bytes / (1024 * 1024);\n\t\treturn fileSizeInMB.toFixed(2) + ' MB';\n\t}\n}\n\n/**\n * Validates the given memory name.\n *\n * @param memoryName - The name of the memory to validate.\n * @returns The validated memory name.\n * Logs error and exits process if the memory name is invalid.\n */\nexport const validateMemoryName = (memoryName: string) => {\n\tconst validatedName = memoryNameSchema.safeParse(memoryName);\n\tif (!validatedName.success) {\n\t\tconst err = fromZodError(validatedName.error).message;\n\t\tp.cancel(`Invalid memory name: ${err}`);\n\t\tprocess.exit(1);\n\t}\n\treturn validatedName.data;\n};\n\n/**\n * Validates the document embedding schema using the provided memory and document names.\n *\n * @param {Object} params - The parameters for the function.\n * @param {string} params.memoryName - The name of the memory.\n * @param {string} params.documentName - The name of the document.\n * @returns {Object} The validated data if the input is valid.\n * @throws Will terminate the process if the input is invalid.\n */\nexport const validateMemoryDocNames = ({\n\tmemoryName,\n\tdocumentName\n}: {\n\tmemoryName: string;\n\tdocumentName: string;\n}) => {\n\tconst validatedData = memoryDocSchema.safeParse({\n\t\tmemoryName,\n\t\tdocumentName\n\t});\n\tif (!validatedData.success) {\n\t\tconst err = fromZodError(validatedData.error).message;\n\t\tp.cancel(`Invalid input: ${err}`);\n\t\tprocess.exit(1);\n\t}\n\treturn validatedData.data;\n};\n\nexport const getAugmentedContext = ({\n\tsimilarChunks,\n\tmessages\n}: {\n\tsimilarChunks: SimilarChunk[];\n\tmessages: Message[];\n}) => {\n\tif (similarChunks.length === 0) return '';\n\n\tconst memoryContext = similarChunks\n\t\t.map(chunk => `${chunk.text} \\n\\n Source: ${chunk.attributes.docName}`)\n\t\t.join('\\n\\n');\n\n\t// Extract Rag prompt from the messages.\n\tconst ragMsg = messages.find(m => m.role === 'system' && m.name === 'rag');\n\t// If there is no rag prompt, use the default rag prompt.\n\tconst ragPrompt = ragMsg?.content || defaultRagPrompt;\n\n\tconst contextContent = `\"\"\"CONTEXT:\\n ${memoryContext}\"\"\"`;\n\tconst augmentedContext = `\"\"\"${ragPrompt}\"\"\" \\n\\n ${contextContent}`;\n\n\treturn augmentedContext;\n};\n\nexport const addContextFromMemory = async ({\n\tmessages,\n\tmemoryNames\n}: {\n\tmessages: Message[];\n\tmemoryNames: string[];\n}) => {\n\ttry {\n\t\t// Check if there are no memory names.\n\t\tconst isMemoryAttached = memoryNames.length > 0;\n\t\tlogger('memory', isMemoryAttached, 'Memory attached');\n\n\t\t// Check if there are no messages.\n\t\tconst messagesExist = messages.length > 0;\n\n\t\t// Return the messages if there are no memory names or messages.\n\t\tif (!isMemoryAttached || !messagesExist) return;\n\n\t\t// This will be the user prompt.\n\t\tconst lastUserMsg = [...messages]\n\t\t\t.reverse()\n\t\t\t.find(m => m.role === 'user');\n\t\tconst userPrompt = lastUserMsg?.content;\n\n\t\t// If there is no user prompt, return the messages.\n\t\tif (!userPrompt) return;\n\n\t\t// 1- Generate the embeddings of the user prompt.\n\t\t// Read config to determine which embedding to use.\n\t\tconst config = await loadConfig();\n\t\tconst useLocalEmbeddings = config.memory?.useLocalEmbeddings || false;\n\n\t\tlet embeddings = [];\n\t\tif (useLocalEmbeddings) {\n\t\t\t// Use local embeddings\n\t\t\tdlog('Generating local embeddings');\n\t\t\tembeddings = await generateLocalEmbeddings([userPrompt]);\n\t\t} else {\n\t\t\t// Use OpenAI embeddings\n\t\t\tdlog('Generating OpenAI embeddings');\n\t\t\tembeddings = await getOpenAIEmbeddings([userPrompt]);\n\t\t}\n\n\t\t// 2- Get all the memorysets from the db.\n\t\tconst memoryChunks = await getDocumentsFromMemory(memoryNames);\n\t\tif (memoryChunks.length === 0) return;\n\n\t\t// 3- Get similar chunks from the memorysets.\n\t\tconst similarChunks = cosineSimilaritySearch({\n\t\t\tchunks: memoryChunks,\n\t\t\tqueryEmbedding: embeddings[0].embedding,\n\t\t\ttopK: MEMORYSETS.MAX_CHUNKS_ATTACHED_TO_LLM\n\t\t});\n\t\tif (similarChunks.length === 0) return;\n\t\tlogger('memory.similarChunks', similarChunks);\n\n\t\treturn similarChunks;\n\t} catch (error: any) {\n\t\tdlog('utils/memory/lib.ts: addContextFromMemory: error:', error);\n\t}\n};\n\nexport const validateEmbedDocInput = ({\n\tmemoryName,\n\tdocumentName\n}: {\n\tmemoryName: string;\n\tdocumentName: string;\n}) => {\n\tconst validatedName = memoryNameSchema.safeParse(memoryName);\n\tif (!validatedName.success) {\n\t\tconst err = fromZodError(validatedName.error).message;\n\t\tp.cancel(`Invalid memory name: ${err}`);\n\t\tprocess.exit(1);\n\t}\n\treturn validatedName.data;\n};\n","import * as p from '@clack/prompts';\nimport cosineSimilarity from 'compute-cosine-similarity';\nimport fs from 'fs/promises';\nimport { Low } from 'lowdb';\nimport { JSONFile } from 'lowdb/node';\nimport path from 'path';\nimport color from 'picocolors';\nimport { z } from 'zod';\n\n// Schema definitions\nconst ChunkSchema = z.object({\n\tid: z.string().uuid(),\n\ttext: z.string().trim().min(1),\n\tembedding: z.array(z.number())\n});\n\ntype Chunk = z.infer<typeof ChunkSchema>;\n\ninterface Document {\n\tname: string;\n\tchunkIds: string[];\n}\n\ninterface Schema {\n\tdocuments: { [name: string]: Document };\n\tchunks: { [name: string]: Chunk };\n}\n\nconst defaultData: Schema = {\n\tdocuments: {},\n\tchunks: {}\n};\n\ninterface MemoryChunk {\n\ttext: string;\n\tembedding: number[];\n\tattributes: {\n\t\tmemoryName: string;\n\t\tdocName: string;\n\t};\n}\n\nexport interface SimilarChunk extends Omit<MemoryChunk, 'embedding'> {\n\tsimilarity: number;\n}\n\n// Utility functions\n\n// Create a new database\n// basePath. The path to\nexport async function createDb(memoryName: string): Promise<Low<Schema>> {\n\tconst baseDir = path.join(process.cwd(), '.baseai', 'db');\n\tconst dbFilePath = path.join(baseDir, `${memoryName}.json`);\n\n\t// Ensure the directory exists\n\tawait fs.mkdir(baseDir, { recursive: true });\n\n\t// Check if the file exists, if not, create it with default data\n\ttry {\n\t\tawait fs.access(dbFilePath);\n\t} catch (error) {\n\t\t// File doesn't exist, create it with default data\n\t\tawait fs.writeFile(dbFilePath, JSON.stringify(defaultData, null, 2));\n\t}\n\n\tconst adapter = new JSONFile<Schema>(dbFilePath);\n\tconst db = new Low(adapter, defaultData);\n\n\t// Read the existing data or initialize with default\n\tawait db.read();\n\n\t// If the file was empty or invalid JSON, write the default data\n\tif (db.data === null) {\n\t\tdb.data = defaultData;\n\t\tawait db.write();\n\t}\n\n\treturn db;\n}\n\n// Read an existing database\nexport async function readDb(dbPath: string): Promise<Low<Schema>> {\n\tconst adapter = new JSONFile<Schema>(dbPath);\n\tconst db = new Low(adapter, defaultData);\n\tawait db.read();\n\treturn db;\n}\n\n// Delete a database\nexport async function deleteDb(dbPath: string): Promise<void> {\n\ttry {\n\t\tawait fs.unlink(dbPath);\n\t\tconsole.log(`Database at ${dbPath} has been deleted.`);\n\t} catch (error) {\n\t\tif ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n\t\t\tconsole.log(`No database found at ${dbPath}. Nothing to delete.`);\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\n// Load a database\nexport async function loadDb(memoryName: string) {\n\ttry {\n\t\tconst memoryDbPath = getMemoryDbPath(memoryName);\n\t\tawait fs.access(memoryDbPath);\n\t\treturn await readDb(memoryDbPath);\n\t} catch (error) {\n\t\tif ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n\t\t\treturn await createDb(memoryName);\n\t\t}\n\t\tthrow error;\n\t}\n}\n\n// CRUD operations for documents\nexport async function addDocument({\n\tdb,\n\tdocName\n}: {\n\tdb: Low<Schema>;\n\tdocName: string;\n}): Promise<void> {\n\tif (db.data.documents[docName]) {\n\t\tp.log.info(`[SKIPPED] DOC: ${color.cyan(docName)} already exists.`);\n\t\treturn;\n\t}\n\tdb.data.documents[docName] = { name: docName, chunkIds: [] };\n\tawait db.write();\n}\n\nexport function getDocument(\n\tdb: Low<Schema>,\n\tdocName: string\n): Document | undefined {\n\treturn db.data.documents[docName];\n}\n\nexport async function deleteDocumentFromDB({\n\tdb,\n\tdocName\n}: {\n\tdb: Low<Schema>;\n\tdocName: string;\n}): Promise<void> {\n\tif (!db.data.documents[docName]) {\n\t\tthrow new Error(`Document with name \"${docName}\" does not exist`);\n\t}\n\n\t// Delete all chunks associated with the document\n\tfor (const chunkId of db.data.documents[docName].chunkIds) {\n\t\tdelete db.data.chunks[chunkId];\n\t}\n\n\tdelete db.data.documents[docName];\n\tawait db.write();\n}\n\nexport async function addChunksBulk(\n\t{\n\t\tdb,\n\t\tdocName,\n\t\tchunks\n\t}: { db: Low<Schema>; docName: string; chunks: Omit<Chunk, 'id'>[] } // Array of chunks, each omitting the id field\n): Promise<void> {\n\tif (!db.data.documents[docName]) {\n\t\tthrow new Error(`Document with name \"${docName}\" does not exist`);\n\t}\n\n\tfor (const chunk of chunks) {\n\t\tconst id = crypto.randomUUID();\n\t\tconst newChunk = ChunkSchema.parse({ ...chunk, id });\n\t\tdb.data.chunks[id] = newChunk;\n\t\tdb.data.documents[docName].chunkIds.push(id);\n\t}\n\n\tawait db.write();\n}\n\nexport async function getDocumentsFromMemory(\n\tmemoryNames: string[]\n): Promise<MemoryChunk[]> {\n\tconst memoryChunks: MemoryChunk[] = [];\n\n\t// Load each memory and get the documents\n\tfor (const memoryName of memoryNames) {\n\t\t// Load the memory\n\t\tconst db: Low<Schema> = await loadDb(memoryName);\n\n\t\t// Process the documents\n\t\tfor (const [docName, document] of Object.entries(db.data.documents)) {\n\t\t\t// Get the chunks for the document\n\t\t\tconst chunks = document.chunkIds.map(id => {\n\t\t\t\tconst chunk = db.data.chunks[id];\n\t\t\t\treturn {\n\t\t\t\t\ttext: chunk.text,\n\t\t\t\t\tembedding: chunk.embedding,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\tmemoryName,\n\t\t\t\t\t\tdocName\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Add the processed document to the list\n\t\t\tmemoryChunks.push(...chunks);\n\t\t}\n\t}\n\n\t//  Return the processed documents\n\treturn memoryChunks;\n}\n\nexport function cosineSimilaritySearch({\n\tchunks,\n\tqueryEmbedding,\n\ttopK\n}: {\n\tchunks: MemoryChunk[];\n\tqueryEmbedding: number[];\n\ttopK: number;\n}): SimilarChunk[] {\n\t// Return empty array if topK is invalid or no chunks are provided\n\tif (topK <= 0 || chunks.length === 0) {\n\t\treturn [];\n\t}\n\n\t// Calculate cosine similarity for each chunk\n\tconst chunksWithCosineSimilarity: SimilarChunk[] = chunks.map(chunk => ({\n\t\ttext: chunk.text,\n\t\tattributes: chunk.attributes,\n\t\tsimilarity: cosineSimilarity(chunk.embedding, queryEmbedding) || 0\n\t}));\n\n\t// Sort chunks by similarity (descending order)\n\tchunksWithCosineSimilarity.sort((a, b) => b.similarity - a.similarity);\n\n\t// Return top K results\n\treturn chunksWithCosineSimilarity.slice(0, topK);\n}\n\n// Get the path of the db file for a memory\nexport function getMemoryDbPath(memoryName: string): string {\n\t// Process.cwd() returns the current working directory of the Node.js process.\n\t// This is the directory from which the script is run. It is always the root of the project.\n\n\t// Path is cwd()/.baseai/db/{memoryName}.json\n\tconst projectRootPath = process.cwd();\n\n\t// Db file path\n\tconst memoryDBPath = path.join(\n\t\tprojectRootPath,\n\t\t'.baseai',\n\t\t'db',\n\t\t`${memoryName}.json`\n\t);\n\n\treturn memoryDBPath;\n}\n","import { z } from 'zod';\n\nexport const memoryNameSchema = z\n\t.string()\n\t.min(3, 'Memory name must be at least 3 characters long')\n\t.max(50, 'Memory name must not exceed 50 characters')\n\t.regex(\n\t\t/^[a-zA-Z0-9.-]+$/,\n\t\t'Memory name can only contain letters, numbers, dots, and hyphens'\n\t);\n\nexport const docNameSchema = z.string().trim().min(1);\n\nexport const memoryDocSchema = z.object({\n\tmemoryName: memoryNameSchema,\n\tdocumentName: docNameSchema\n});\n\nexport const gitConfigSchema = z.object({\n\tenabled: z.boolean(),\n\tinclude: z\n\t\t.array(z.string().trim().min(1, 'Include pattern must not be empty'))\n\t\t.min(1, 'At least one include pattern must be specified')\n\t\t.describe('Glob patterns to include files in the memory'),\n\tgitignore: z.boolean().optional().default(true),\n\tdeployedAt: z.string().trim().optional().default(''),\n\tembeddedAt: z.string().trim().optional().default('')\n});\n\nexport const documentSchema = z.object({\n\tmeta: z\n\t\t.function()\n\t\t.args(\n\t\t\tz.object({\n\t\t\t\tname: z.string(),\n\t\t\t\tsize: z.string(),\n\t\t\t\tcontent: z.string(),\n\t\t\t\tblob: z.instanceof(Blob),\n\t\t\t\tpath: z.string(),\n\t\t\t})\n\t\t)\n\t\t.returns(z.record(z.string()))\n\t\t.optional()\n});\n\nexport const memoryConfigSchema = z.object({\n\tname: z.string(),\n\tdescription: z.string().optional(),\n\tgit: gitConfigSchema,\n\tdocuments: documentSchema.optional()\n});\n\nexport type GitConfigI = z.infer<typeof gitConfigSchema>;\n\nexport type MemoryConfigI = z.infer<typeof memoryConfigSchema>;\nexport type DocumentConfigI = z.infer<typeof documentSchema>;\n\nexport type MemoryI = MemoryConfigI;\n","import * as p from '@clack/prompts';\nimport type { LogCategories } from 'types/config';\nimport Logger from './logger';\n\nlet loggerInstance: Logger | null = null;\nlet initializationPromise: Promise<Logger> | null = null;\n\nexport const initLogger = async (): Promise<void> => {\n\tif (!initializationPromise) {\n\t\tinitializationPromise = Logger.initialize();\n\t}\n\tloggerInstance = await initializationPromise;\n};\n\nconst getLogger = (): Logger => {\n\tif (!loggerInstance) {\n\t\tp.cancel('Logger has not been initialized. Call initLogger() first.');\n\t\tprocess.exit(1);\n\t}\n\treturn loggerInstance;\n};\n\nexport const logger = (\n\tcategory: LogCategories,\n\tvalue?: unknown,\n\tlogHeader?: string\n) => {\n\tgetLogger().log(category, value, logHeader);\n};\n","import chalk from 'chalk';\nimport util from 'util';\nimport { loadConfig } from './config/config-handler';\nimport type { LogCategories, LoggerConfig } from 'types/config';\nimport sym from 'log-symbols';\nconst blueI = chalk.blue.inverse;\n\nconst sensitiveWords = [\n\t'sensitive',\n\t'secret',\n\t'hide',\n\t'private',\n\t'password',\n\t'token',\n\t'key',\n\t'auth',\n\t'authorization',\n\t'redact'\n];\n\nclass Logger {\n\tprivate static instance: Logger;\n\tprivate config: LoggerConfig;\n\n\tprivate constructor(config: LoggerConfig) {\n\t\tthis.config = config;\n\t}\n\n\tpublic static async initialize(): Promise<Logger> {\n\t\tif (!Logger.instance) {\n\t\t\tconst baseAIConfig = await loadConfig();\n\t\t\tLogger.instance = new Logger(baseAIConfig.log);\n\t\t}\n\t\treturn Logger.instance;\n\t}\n\n\tprivate formatValue(value: unknown): string {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\treturn util.inspect(value, { colors: true, depth: null });\n\t\t}\n\t\tif (typeof value === 'string') {\n\t\t\treturn chalk.green(`\"${value}\"`);\n\t\t}\n\t\tif (typeof value === 'number') {\n\t\t\treturn chalk.yellow(value.toString());\n\t\t}\n\t\tif (typeof value === 'boolean') {\n\t\t\treturn chalk.cyan(value.toString());\n\t\t}\n\t\treturn String(value);\n\t}\n\n\tprivate isSensitiveData(key: string): boolean {\n\t\treturn sensitiveWords.some(word => key.toLowerCase().includes(word));\n\t}\n\n\tprivate formatAndRedactSensitiveData(\n\t\tvalue: unknown,\n\t\tisSensitive: boolean\n\t): string {\n\t\treturn isSensitive && !this.config.logSensitiveData\n\t\t\t? chalk.red('======REDACTED======')\n\t\t\t: this.formatValue(value);\n\t}\n\n\tprivate isCategoryEnabled(category: LogCategories): boolean {\n\t\tconst parts = category.split('.');\n\t\tlet partialCategory = '';\n\n\t\tfor (const part of parts) {\n\t\t\tpartialCategory += (partialCategory ? '.' : '') + part;\n\t\t\tif (partialCategory in this.config) {\n\t\t\t\tconst value = this.config[partialCategory as LogCategories];\n\t\t\t\tif (typeof value === 'boolean') {\n\t\t\t\t\tif (value === false) {\n\t\t\t\t\t\t// console.log(\n\t\t\t\t\t\t// \t`Category ${category} is false due to ${partialCategory}`\n\t\t\t\t\t\t// );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// console.log(`Category ${category} is true (default or explicitly set)`);\n\t\treturn true;\n\t}\n\n\tprivate logValue(\n\t\tcategory: string,\n\t\tvalue: unknown,\n\t\tlogHeader?: string\n\t): void {\n\t\tconst formattedValue = this.formatAndRedactSensitiveData(\n\t\t\tvalue,\n\t\t\tthis.isSensitiveData(logHeader || category)\n\t\t);\n\t\tconst header = logHeader ? `${chalk.blue.bold(logHeader)}` : '';\n\t\tconsole.log(\n\t\t\t`\\n${sym.info} ${blueI(` ${category} `)} ${header}\\n${formattedValue}`\n\t\t);\n\t}\n\n\tpublic log(\n\t\tcategory: LogCategories,\n\t\tvalue: unknown,\n\t\tlogHeader?: string\n\t): void {\n\t\tif (!this.config.isEnabled || !this.isCategoryEnabled(category)) return;\n\n\t\tthis.logValue(category, value, logHeader);\n\t}\n}\n\nexport default Logger;\n","import { MEMORYSETS } from './constants';\nimport * as p from '@clack/prompts';\n\nexport async function generateLocalEmbeddings(chunks: string[]): Promise<\n\t{\n\t\tembedding: number[];\n\t}[]\n> {\n\ttry {\n\t\t// Verify that ollama is running and emebeddings model is enabled.\n\t\tawait getOllamaEmbeddings('test');\n\n\t\t// Generate embeddings for each chunk\n\t\tconst embeddingsPromise = await Promise.all(\n\t\t\tchunks.map(chunk => getOllamaEmbeddings(chunk))\n\t\t);\n\n\t\t// Extract the embeddings from the response\n\t\tconst embeddings = embeddingsPromise.map(\n\t\t\tembedding => embedding.embedding\n\t\t);\n\n\t\tconst openAIEmbeddingsFormat = embeddings.map(embedding => ({\n\t\t\tembedding\n\t\t}));\n\n\t\treturn openAIEmbeddingsFormat;\n\t} catch (error) {\n\t\tconsole.error('Error generating embeddings:', error);\n\t\tthrow error;\n\t}\n}\n\n/**\n * Fetches embeddings from the Ollama API using the provided prompt.\n *\n * @param {string} prompt - The input string for which embeddings are to be generated.\n * @returns {Promise<any>} A promise that resolves to the embeddings data.\n * @throws Will throw an error if the fetch operation fails or the response is not ok.\n */\nasync function getOllamaEmbeddings(prompt: string): Promise<any> {\n\tconst url = MEMORYSETS.OLLAMA_EMBEDDINGS_ENDPOINT;\n\n\tconst body = JSON.stringify({\n\t\tmodel: MEMORYSETS.OLLAMA_EMBEDDINGS_MODEL,\n\t\tprompt: prompt\n\t});\n\n\ttry {\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: body\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Error: ${response.statusText}`);\n\t\t}\n\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (error) {\n\t\tconsole.error();\n\t\tp.cancel(\n\t\t\t`Error generating embeddings with Ollama. Please ensure that Ollama is running and the embeddings '${MEMORYSETS.OLLAMA_EMBEDDINGS_MODEL}' model is enabled.`\n\t\t);\n\t\tprocess.exit(1);\n\t\tthrow error;\n\t}\n}\n","import * as p from '@clack/prompts';\nimport { getEncoding } from 'js-tiktoken';\nimport OpenAI from 'openai';\nimport { MEMORYSETS } from './constants';\n\nexport const getOpenAIEmbeddings = async (\n\tchunks: string[]\n): Promise<OpenAI.Embeddings.Embedding[]> => {\n\tconst openAiKey = process.env.OPENAI_API_KEY;\n\n\tif (!openAiKey) {\n\t\tp.cancel(\n\t\t\t'OpenAI key not found. Please set the OPENAI_API_KEY environment variable. Only required locally, in production, add it to your keysets https://langbase.com/docs/features/keysets'\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\ttry {\n\t\tconst openaiAPIClient = new OpenAI({\n\t\t\tapiKey: openAiKey\n\t\t});\n\n\t\t// Verify that each input has tokens less than the limit.\n\t\tconst enc = getEncoding('cl100k_base');\n\t\tlet totalTokens = 0;\n\t\tfor (const chunk of chunks) {\n\t\t\tconst tokens = enc.encode(chunk).length;\n\t\t\ttotalTokens += tokens;\n\t\t\tif (tokens > MEMORYSETS.EMBEDDING_MODEL_TOKENS_LIMIT) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Input exceeds the maximum token limit of ${MEMORYSETS.EMBEDDING_MODEL_TOKENS_LIMIT}.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst openAiEmbeddings: OpenAI.Embeddings.Embedding[] = [];\n\t\tconst batchSize = MEMORYSETS.EMBEDDING_MAX_BATCH_SIZE; // OpenAI limit is 2048.\n\t\tfor (let i = 0; i < chunks.length; i += batchSize) {\n\t\t\tconst batch = chunks.slice(i, i + batchSize);\n\t\t\tconst { data: openAiEmbeddingsBatch } =\n\t\t\t\tawait openaiAPIClient.embeddings.create({\n\t\t\t\t\tmodel: MEMORYSETS.EMBEDDING_MODEL,\n\t\t\t\t\tdimensions: MEMORYSETS.EMBEDDING_DIMENSIONS,\n\t\t\t\t\tinput: batch,\n\t\t\t\t\tencoding_format: MEMORYSETS.EMBEDDING_ENCODING_FORMAT\n\t\t\t\t});\n\t\t\topenAiEmbeddings.push(...openAiEmbeddingsBatch);\n\t\t}\n\n\t\treturn openAiEmbeddings;\n\t} catch (error: any) {\n\t\tconsole.error('Error:', error);\n\t\tthrow new Error('Error getting OpenAI embeddings');\n\t}\n};\n","import fs from 'fs/promises';\nimport path from 'path';\nimport * as p from '@clack/prompts';\nimport { memoryConfigSchema, type MemoryConfigI } from 'types/memory';\nimport {\n\tgenerateUpgradeInstructions,\n\tisOldMemoryConfigFormat,\n\ttype OldMemoryConfig\n} from './handle-old-memory-config';\n\nfunction extractConfigObject(fileContents: string): unknown {\n\ttry {\n\t\t// Remove import statements and exports\n\t\tconst cleanedContent = fileContents\n\t\t\t.replace(/import\\s+.*?['\"];?\\s*/g, '')\n\t\t\t.replace(/export\\s+default\\s+/, '');\n\n\t\t// First try to match a function that returns an object directly with parentheses\n\t\tlet match = cleanedContent.match(\n\t\t\t/(?:const\\s+)?(\\w+)\\s*=\\s*\\(\\s*\\)\\s*(?::\\s*\\w+)?\\s*=>\\s*\\(({[\\s\\S]*?})\\)/\n\t\t);\n\n\t\t// If no direct parentheses match, try to match function with return statement\n\t\tif (!match) {\n\t\t\tmatch = cleanedContent.match(\n\t\t\t\t/(?:const\\s+)?(\\w+)\\s*=\\s*\\(\\s*\\)\\s*(?::\\s*\\w+)?\\s*=>\\s*\\{[\\s\\S]*?return\\s+({[\\s\\S]*?})\\s*;\\s*\\}/\n\t\t\t);\n\t\t}\n\n\t\t// If still no match, try to match direct object assignment\n\t\tif (!match) {\n\t\t\tmatch = cleanedContent.match(\n\t\t\t\t/(?:const\\s+)?(?:memory|\\w+)\\s*=\\s*({[\\s\\S]*?});?$/m\n\t\t\t);\n\t\t}\n\n\t\tif (!match) {\n\t\t\tthrow new Error('Unable to find memory object definition');\n\t\t}\n\n\t\t// The object literal will be in the last capture group\n\t\tconst memoryObjStr = match[match.length - 1];\n\n\t\t// Create a new Function that returns the object literal\n\t\tconst fn = new Function(`return ${memoryObjStr}`);\n\t\treturn fn();\n\t} catch (error) {\n\t\tconsole.error('Parsing error:', error);\n\t\tconsole.error('File contents:', fileContents);\n\t\tthrow new Error(\n\t\t\t`Failed to extract config: ${error instanceof Error ? error.message : 'Unknown error'}`\n\t\t);\n\t}\n}\n\nexport default async function loadMemoryConfig(\n\tmemoryName: string\n): Promise<MemoryConfigI> {\n\ttry {\n\t\tconst memoryDir = path.join(\n\t\t\tprocess.cwd(),\n\t\t\t'baseai',\n\t\t\t'memory',\n\t\t\tmemoryName\n\t\t);\n\t\tconst indexFilePath = path.join(memoryDir, 'index.ts');\n\n\t\tawait fs.access(indexFilePath);\n\t\tconst fileContents = await fs.readFile(indexFilePath, 'utf-8');\n\t\tconst configObj = extractConfigObject(fileContents);\n\n\t\t// Try to parse with new schema first\n\t\ttry {\n\t\t\treturn memoryConfigSchema.parse(configObj);\n\t\t} catch (parseError) {\n\t\t\tif (!configObj) throw parseError;\n\n\t\t\t// If parsing fails, check if it's an old format\n\t\t\tif (isOldMemoryConfigFormat(configObj)) {\n\t\t\t\tp.note(\n\t\t\t\t\tgenerateUpgradeInstructions(configObj as OldMemoryConfig)\n\t\t\t\t);\n\t\t\t\tp.cancel(\n\t\t\t\t\t'Deployment cancelled. Please update your memory config file to the new format.'\n\t\t\t\t);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\n\t\t\t// If it's neither new nor old format, throw the original error\n\t\t\tthrow parseError;\n\t\t}\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tp.cancel(`Failed to load memory '${memoryName}': ${error.message}`);\n\t\t} else {\n\t\t\tp.cancel(`Failed to load memory '${memoryName}': Unknown error`);\n\t\t}\n\t\tprocess.exit(1);\n\t}\n}\n","/**\n * Represents the old memory configuration format for backward compatibility.\n */\nexport interface OldMemoryConfig {\n\tname: string;\n\tdescription?: string;\n\tconfig?: OldConfigObject;\n}\n\ninterface OldConfigObject {\n\tuseGitRepo: boolean;\n\tdirToTrack: string;\n\textToTrack: string[] | ['*'];\n\tdeployedCommitHash?: string;\n\tembeddedCommitHash?: string;\n}\n\n/**\n * Type guard to check if an object is of type `OldConfigObject`.\n *\n * @param obj - The object to check.\n * @returns `true` if the object is an `OldConfigObject`, otherwise `false`.\n */\nfunction isOldConfigObject(obj: unknown): obj is OldConfigObject {\n\treturn (\n\t\ttypeof obj === 'object' &&\n\t\tobj !== null &&\n\t\t'useGitRepo' in obj &&\n\t\ttypeof (obj as OldConfigObject).useGitRepo === 'boolean' &&\n\t\t'dirToTrack' in obj &&\n\t\ttypeof (obj as OldConfigObject).dirToTrack === 'string' &&\n\t\t'extToTrack' in obj &&\n\t\tArray.isArray((obj as OldConfigObject).extToTrack)\n\t);\n}\n\n/**\n * Checks if an object conforms to the old memory configuration format.\n *\n * @param obj - The object to check.\n * @returns `true` if the object is in the old memory configuration format, otherwise `false`.\n */\nexport function isOldMemoryConfigFormat(obj: unknown): boolean {\n\tif (\n\t\ttypeof obj !== 'object' ||\n\t\tobj === null ||\n\t\t!('name' in obj) ||\n\t\t!('config' in obj)\n\t) {\n\t\treturn false;\n\t}\n\n\tconst typedObj = obj as { name: unknown; config: unknown };\n\n\treturn (\n\t\ttypeof typedObj.name === 'string' &&\n\t\t(typedObj.config === undefined || isOldConfigObject(typedObj.config))\n\t);\n}\n\n/**\n * Generates upgrade instructions for converting an old memory configuration to the new format.\n *\n * @param oldConfig - The old memory configuration.\n * @returns A string containing the upgrade instructions.\n */\nexport function generateUpgradeInstructions(\n\toldConfig: OldMemoryConfig\n): string {\n\tif (!oldConfig.config) {\n\t\treturn 'Invalid memory config.';\n\t}\n\n\tconst newConfigExample = {\n\t\tname: oldConfig.name,\n\t\tdescription: oldConfig.description || 'Your memory description',\n\t\tgit: {\n\t\t\tenabled: oldConfig.config.useGitRepo,\n\t\t\tinclude:\n\t\t\t\toldConfig.config.extToTrack[0] === '*'\n\t\t\t\t\t? [`${oldConfig.config.dirToTrack}/**/*`]\n\t\t\t\t\t: oldConfig.config.extToTrack.map(\n\t\t\t\t\t\t\text => `${oldConfig.config?.dirToTrack}/**/*${ext}`\n\t\t\t\t\t\t),\n\t\t\tgitignore: true,\n\t\t\tdeployedAt: oldConfig.config.deployedCommitHash || '',\n\t\t\tembeddedAt: oldConfig.config.embeddedCommitHash || ''\n\t\t}\n\t};\n\n\treturn `\nYour memory config is using an outdated format in baseai/memory/${oldConfig.name}/index.ts. Please update the file to this new format:\n\n${JSON.stringify(newConfigExample, null, 2)}\n\nKey changes:\n- Removed nested 'config' object structure\n- Git-related fields are now grouped under a 'git' object\n- 'useGitRepo' is now 'git.enabled'\n- 'dirToTrack' and 'extToTrack' are combined into 'git.include' glob patterns\n- 'deployedCommitHash' is now 'git.deployedAt'\n- 'embeddedCommitHash' is now 'git.embeddedAt'\n- Added new 'git.gitignore' field (defaults to true)\n\nFor more information, refer to the documentation: https://baseai.dev/docs/guides/memory-from-git\n`;\n}\n","import chalk from 'chalk';\nimport Table from 'cli-table3';\nimport * as p from '@clack/prompts';\n\n/**\n * Prints a diff table comparing localDocs and prodDocs.\n * \n * @param localDocs - The array of local documents.\n * @param prodDocs - The array of production documents.\n */\nexport function printDiffTable(localDocs: string[], prodDocs: string[]) {\n\tconst allItems = new Set([...localDocs, ...prodDocs]);\n\tconst tableData = Array.from(allItems).map(item => [\n\t\tlocalDocs.includes(item) ? item : '',\n\t\tprodDocs.includes(item) ? item : ''\n\t]);\n\n\tconst table = new Table({\n\t\thead: [chalk.cyan('Local'), chalk.cyan('Prod')],\n\t\tchars: {\n\t\t\ttop: '═',\n\t\t\t'top-mid': '╤',\n\t\t\t'top-left': '╔',\n\t\t\t'top-right': '╗',\n\t\t\tbottom: '═',\n\t\t\t'bottom-mid': '╧',\n\t\t\t'bottom-left': '╚',\n\t\t\t'bottom-right': '╝',\n\t\t\tleft: '║',\n\t\t\t'left-mid': '╟',\n\t\t\tmid: '─',\n\t\t\t'mid-mid': '┼',\n\t\t\tright: '║',\n\t\t\t'right-mid': '╢',\n\t\t\tmiddle: '│'\n\t\t}\n\t});\n\n\ttableData.forEach(row => table.push(row));\n\n\tp.log.message(`Prod and local are out of sync.`);\n\tp.log.message(`\\n${table.toString()}`);\n}\n","import build, { buildMemory } from '@/build';\nimport { OLLAMA } from '@/dev/data/models';\nimport { dlog } from '@/dev/utils/dlog';\nimport { cyan, dim, dimItalic, green } from '@/utils/formatting';\nimport { heading } from '@/utils/heading';\nimport { compareDocumentLists } from '@/utils/memory/compare-docs-list';\nimport { MEMORYSETS } from '@/utils/memory/constants';\nimport {\n\tgetMemoryFileNames,\n\tloadMemoryFiles,\n\ttype MemoryDocumentI\n} from '@/utils/memory/load-memory-files';\nimport { printDiffTable } from '@/utils/memory/print-diff-table';\nimport * as p from '@clack/prompts';\nimport fs from 'fs/promises';\nimport fetch from 'node-fetch';\nimport path from 'path';\nimport color from 'picocolors';\nimport { type MemoryI } from 'types/memory';\nimport type { Pipe, PipeOld } from 'types/pipe';\nimport {\n\thandleGitSyncMemories,\n\tupdateDeployedCommitHash\n} from '@/utils/memory/git-sync/handle-git-sync-memories';\nimport { handleSingleDocDeploy } from './document';\nimport {\n\tgenerateUpgradeInstructions,\n\tisOldMemoryConfigFormat\n} from '@/utils/memory/handle-old-memory-config';\nimport {\n\tretrieveAuthentication,\n\ttype Account\n} from '@/utils/retrieve-credentials';\n\ninterface ErrorResponse {\n\terror?: { message: string };\n}\n\ntype Spinner = ReturnType<typeof p.spinner>;\n\nasync function deploy({\n\toverwrite = false\n}: {\n\toverwrite: boolean;\n}): Promise<void> {\n\tconst spinner = p.spinner();\n\n\tp.intro(heading({ text: 'DEPLOY', sub: 'Deploy your BaseAI project' }));\n\n\ttry {\n\t\t// Build Pipes and Memory.\n\t\tawait build({ calledAsCommand: false });\n\t\tconst buildDir = path.join(process.cwd(), '.baseai');\n\n\t\tconst pipesDir = path.join(buildDir, 'pipes');\n\t\tconst pipes = await readPipesDirectory({ spinner, pipesDir });\n\t\tif (!pipes) {\n\t\t\tp.outro(\n\t\t\t\t`No pipes found. Skipping deployment of pipes. \\nAdd a pipe by running: ${cyan(`npx baseai@latest pipe`)} command`\n\t\t\t);\n\t\t}\n\n\t\tconst memoryDir = path.join(buildDir, 'memory');\n\t\tconst memory = await readMemoryDirectory({\n\t\t\tspinner,\n\t\t\tmemoryDir\n\t\t});\n\n\t\tconst toolsDir = path.join(buildDir, 'tools');\n\t\tconst tools = await readToolsDirectory({ spinner, toolsDir });\n\n\t\tconst account = await retrieveAuthentication({ spinner });\n\t\tif (!account) {\n\t\t\tp.outro(\n\t\t\t\t`No account found. Skipping deployment. \\n Run: ${cyan('npx baseai@latest auth')}`\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (memory && memory.length > 0) {\n\t\t\tawait deployMemories({\n\t\t\t\tspinner,\n\t\t\t\tmemory,\n\t\t\t\tmemoryDir,\n\t\t\t\taccount,\n\t\t\t\toverwrite\n\t\t\t});\n\t\t}\n\t\tif (pipes) await deployPipes({ spinner, pipes, pipesDir, account });\n\n\t\tp.outro(\n\t\t\theading({ text: 'DEPLOYED', sub: 'successfully', green: true })\n\t\t);\n\n\t\tp.log.warning(\n\t\t\tdimItalic(\n\t\t\t\t`Make sure ${cyan(`LANGBASE_API_KEY`)} exists in your production environment.`\n\t\t\t)\n\t\t);\n\n\t\tp.log.info(\n\t\t\t`${dim(`Successfully deployed:`)}\n${dim(`- ${green(pipes?.length)} pipe${pipes?.length !== 1 ? 's' : ''}\n- ${green(tools?.length ?? 0)} tool${tools?.length !== 1 ? 's' : ''}\n- ${green(memory?.length ?? 0)} memory${memory?.length !== 1 ? 'sets' : ''}`)}`\n\t\t);\n\t} catch (error) {\n\t\thandleError({\n\t\t\tspinner,\n\t\t\tmessage: 'An unexpected error occurred',\n\t\t\terror\n\t\t});\n\t}\n}\n\nasync function readPipesDirectory({\n\tspinner,\n\tpipesDir\n}: {\n\tspinner: Spinner;\n\tpipesDir: string;\n}): Promise<string[] | null> {\n\tspinner.start('Reading pipes directory');\n\ttry {\n\t\tconst files = await fs.readdir(pipesDir);\n\t\t// Filter out non-json files\n\t\tconst pipes = files.filter(file => path.extname(file) === '.json');\n\n\t\tspinner.stop(\n\t\t\t`Found ${pipes.length} pipe${pipes.length !== 1 ? 's' : ''}`\n\t\t);\n\t\treturn pipes;\n\t} catch (error) {\n\t\thandleDirectoryReadError({ spinner, dir: pipesDir, error });\n\t\treturn null;\n\t}\n}\n\nasync function readToolsDirectory({\n\tspinner,\n\ttoolsDir\n}: {\n\tspinner: Spinner;\n\ttoolsDir: string;\n}): Promise<string[] | null> {\n\tspinner.start('Reading tools directory');\n\ttry {\n\t\tconst files = await fs.readdir(toolsDir);\n\t\t// Filter out non-json files\n\t\tconst tools = files.filter(file => path.extname(file) === '.json');\n\n\t\tspinner.stop(\n\t\t\t`Found ${tools.length} tool${tools.length !== 1 ? 's' : ''}`\n\t\t);\n\t\treturn tools;\n\t} catch (error) {\n\t\thandleDirectoryReadError({ spinner, dir: toolsDir, error });\n\t\treturn null;\n\t}\n}\n\nasync function deployPipes({\n\tspinner,\n\tpipes,\n\tpipesDir,\n\taccount\n}: {\n\tspinner: Spinner;\n\tpipes: string[];\n\tpipesDir: string;\n\taccount: Account;\n}): Promise<void> {\n\tfor (const pipe of pipes) {\n\t\tif (path.extname(pipe) === '.json') {\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 500)); // To avoid rate limiting\n\t\t\tawait deployPipe({ spinner, pipe, pipesDir, account });\n\t\t}\n\t}\n}\n\nasync function deployPipe({\n\tspinner,\n\tpipe,\n\tpipesDir,\n\taccount\n}: {\n\tspinner: Spinner;\n\tpipe: string;\n\tpipesDir: string;\n\taccount: Account;\n}): Promise<void> {\n\tconst filePath = path.join(pipesDir, pipe);\n\tspinner.start(`Processing pipe: ${pipe}`);\n\ttry {\n\t\tconst pipeContent = await fs.readFile(filePath, 'utf-8');\n\t\tconst pipeObject = JSON.parse(pipeContent) as Pipe;\n\n\t\tif (!pipeObject) {\n\t\t\thandleInvalidConfig({ spinner, name: pipe, type: 'pipe' });\n\t\t\treturn;\n\t\t}\n\n\t\tspinner.stop(`Processed pipe: ${pipe}`);\n\t\tspinner.start(`Deploying pipe: ${pipeObject.name}`);\n\n\t\tif (pipeObject.model.includes(OLLAMA)) {\n\t\t\tspinner.stop(\n\t\t\t\t`Local Ollama model found: ${pipeObject.model}. It can not be deployed.`\n\t\t\t);\n\t\t\tspinner.start(\n\t\t\t\t`Replacing Ollama model with OpenAI gpt-4o-mini model for deployment.`\n\t\t\t);\n\t\t\tpipeObject.model = 'openai:gpt-4o-mini';\n\t\t}\n\n\t\ttry {\n\t\t\t// Wait for 500 ms to avoid rate limiting\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 500));\n\t\t\tconst newPipe = await upsertPipe({\n\t\t\t\tpipe: pipeObject,\n\t\t\t\taccount\n\t\t\t});\n\t\t\tspinner.stop(`Successfully deployed pipe: ${newPipe.name}`);\n\t\t} catch (error) {\n\t\t\thandleDeploymentError({\n\t\t\t\tspinner,\n\t\t\t\tname: pipeObject.name,\n\t\t\t\terror,\n\t\t\t\ttype: 'pipe'\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\thandleFileProcessingError({ spinner, name: pipe, error });\n\t}\n}\n\nfunction getApiUrls(pipeName: string) {\n\treturn {\n\t\tcreateUrl: `https://api.langbase.com/v1/pipes`,\n\t\tupdateUrl: `https://api.langbase.com/v1/pipes/${pipeName}`\n\t};\n}\n\nasync function upsertPipe({ pipe, account }: { pipe: Pipe; account: Account }) {\n\tconst { createUrl } = getApiUrls(pipe.name);\n\n\ttry {\n\t\tconst createResponse = await fetch(createUrl, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\t...pipe,\n\t\t\t\tupsert: true\n\t\t\t})\n\t\t});\n\n\t\tif (createResponse.ok) {\n\t\t\treturn (await createResponse.json()) as any;\n\t\t}\n\n\t\tconst errorData = (await createResponse.json()) as ErrorResponse;\n\n\t\tthrow new Error(\n\t\t\t`HTTP error! status: ${createResponse.status}, message: ${errorData.error?.message}`\n\t\t);\n\t} catch (error) {\n\t\tconsole.error('Error in createNewPipe:', error);\n\t\tthrow error;\n\t}\n}\n\nasync function updateExistingPipe({\n\tupdateUrl,\n\tpipe,\n\taccount\n}: {\n\tupdateUrl: string;\n\tpipe: PipeOld;\n\taccount: Account;\n}): Promise<PipeOld> {\n\tp.log.info(`Pipe \"${pipe.name}\" already exists. Updating instead.`);\n\n\tconst updateResponse = await fetch(updateUrl, {\n\t\tmethod: 'POST',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t},\n\t\tbody: JSON.stringify(pipe)\n\t});\n\n\tif (!updateResponse.ok) {\n\t\tconst error = await updateResponse.text();\n\t\tthrow new Error(\n\t\t\t`HTTP error! status: ${updateResponse.status}, message: ${error}`\n\t\t);\n\t}\n\n\treturn (await updateResponse.json()) as PipeOld;\n}\n\nexport function handleError({\n\tspinner,\n\tmessage,\n\terror\n}: {\n\tspinner: Spinner;\n\tmessage: string;\n\terror: unknown;\n}): void {\n\tspinner.stop(message);\n\tp.log.error(`${message}: ${(error as Error).message}`);\n}\n\nfunction handleDirectoryReadError({\n\tspinner,\n\tdir,\n\terror\n}: {\n\tspinner: Spinner;\n\tdir: string;\n\terror: unknown;\n}): void {\n\tspinner.stop('Failed to read build directory');\n\tif ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n\t\tp.log.error(`BaseAI Directory not found: ${dir}`);\n\t\tp.log.info(\n\t\t\t`Run from the root of your project where the ${color.cyan('baseai')} directory is located.`\n\t\t);\n\t} else {\n\t\tp.log.error(`Error reading directory: ${(error as Error).message}`);\n\t}\n}\n\nexport function handleInvalidConfig({\n\tspinner,\n\tname,\n\ttype\n}: {\n\tspinner: Spinner;\n\tname: string;\n\ttype: 'pipe' | 'memory';\n}): void {\n\tspinner.stop(`Failed to extract ${type} configuration from ${name}`);\n\tp.log.error(`Invalid ${type} configuration`);\n}\n\nexport function handleDeploymentError({\n\tspinner,\n\terror,\n\tname,\n\ttype\n}: {\n\tspinner: Spinner;\n\tname: string;\n\terror: unknown;\n\ttype: 'pipe' | 'memory';\n}): void {\n\tspinner.stop(`Failed to deploy ${type}: ${name}`);\n\tp.log.error(`Deployment error: ${(error as Error).message}`);\n\tprocess.exit(0);\n}\n\nfunction handleFileProcessingError({\n\tspinner,\n\tname,\n\terror\n}: {\n\tspinner: Spinner;\n\tname: string;\n\terror: unknown;\n}): void {\n\tspinner.stop(`Error processing ${name}`);\n\tp.log.error(`File processing error: ${(error as Error).message}`);\n}\n\nexport async function readMemoryDirectory({\n\tspinner,\n\tmemoryDir\n}: {\n\tspinner: Spinner;\n\tmemoryDir: string;\n}): Promise<string[] | null> {\n\tspinner.start('Reading memory directory');\n\ttry {\n\t\tconst memory = await fs.readdir(memoryDir);\n\t\tspinner.stop();\n\t\treturn memory;\n\t} catch (error) {\n\t\thandleDirectoryReadError({ spinner, dir: memoryDir, error });\n\t\treturn null;\n\t}\n}\n\nasync function deployMemories({\n\tspinner,\n\tmemory,\n\tmemoryDir,\n\taccount,\n\toverwrite\n}: {\n\tspinner: Spinner;\n\tmemory: string[];\n\tmemoryDir: string;\n\taccount: Account;\n\toverwrite: boolean;\n}): Promise<void> {\n\tfor (const memoryName of memory) {\n\t\tawait deployMemory({\n\t\t\tspinner,\n\t\t\tmemoryName,\n\t\t\tmemoryDir,\n\t\t\taccount,\n\t\t\toverwrite\n\t\t});\n\t}\n}\n\nexport async function deployMemory({\n\tspinner,\n\tmemoryName,\n\tmemoryDir,\n\taccount,\n\toverwrite\n}: {\n\tspinner: Spinner;\n\tmemoryName: string;\n\tmemoryDir: string;\n\taccount: Account;\n\toverwrite: boolean;\n}): Promise<void> {\n\tconst filePath = path.join(memoryDir, memoryName);\n\tconst memoryNameWithoutExt = memoryName.split('.')[0]; // Remove .json extension\n\n\tspinner.start(`Processing memory: ${memoryNameWithoutExt}`);\n\ttry {\n\t\tconst memoryContent = await fs.readFile(filePath, 'utf-8');\n\t\tconst memoryObject = JSON.parse(memoryContent) as MemoryI;\n\n\t\tif (!memoryObject) {\n\t\t\thandleInvalidConfig({ spinner, name: memoryName, type: 'memory' });\n\t\t\treturn;\n\t\t}\n\n\t\tp.log.step(`Processing documents for memory: ${memoryNameWithoutExt}`);\n\n\t\tif (isOldMemoryConfigFormat(memoryObject)) {\n\t\t\tp.note(generateUpgradeInstructions(memoryObject));\n\t\t\tp.cancel(\n\t\t\t\t'Deployment cancelled. Please update your memory config file to the new format.'\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tlet filesToDeploy: string[] = [];\n\t\tlet filesToDelete: string[] = [];\n\t\tlet memoryDocs: MemoryDocumentI[] = [];\n\n\t\t// Git sync memories\n\t\tif (memoryObject.git.enabled) {\n\t\t\t// Get names of files to deploy, i.e., changed or new files\n\t\t\tconst {\n\t\t\t\tfilesToDeploy: gitFilesToDeploy,\n\t\t\t\tfilesToDelete: gitFilesToDelete\n\t\t\t} = await handleGitSyncMemories({\n\t\t\t\tmemoryName: memoryNameWithoutExt,\n\t\t\t\tconfig: memoryObject,\n\t\t\t\taccount\n\t\t\t});\n\n\t\t\tfilesToDeploy = gitFilesToDeploy;\n\t\t\tfilesToDelete = gitFilesToDelete;\n\n\t\t\t// Load all documents contents for the memory\n\t\t\tmemoryDocs = await loadMemoryFiles(memoryNameWithoutExt);\n\n\t\t\t// Filter memoryDocs to only include documents in filesToDeploy\n\t\t\t// i.e., changed or new files\n\t\t\tmemoryDocs = memoryDocs.filter(doc =>\n\t\t\t\tfilesToDeploy.includes(doc.name)\n\t\t\t);\n\t\t} else {\n\t\t\t// Non-git sync memories\n\t\t\tmemoryDocs = await loadMemoryFiles(memoryNameWithoutExt);\n\t\t\tfilesToDeploy = memoryDocs.map(doc => doc.name);\n\t\t}\n\n\t\tif (filesToDeploy.length === 0) {\n\t\t\tspinner.stop(\n\t\t\t\t`No documents to deploy for memory: ${memoryNameWithoutExt}. Skipping.`\n\t\t\t);\n\t\t}\n\n\t\tspinner.stop(`Processed memory: ${memoryName.split('.')[0]}`);\n\t\tspinner.start(`Deploying memory: ${memoryObject.name.split('.')[0]}`);\n\n\t\ttry {\n\t\t\tawait upsertMemory({\n\t\t\t\tmemory: memoryObject,\n\t\t\t\tdocuments: memoryDocs,\n\t\t\t\taccount,\n\t\t\t\toverwrite,\n\t\t\t\tisGitSync: memoryObject.git.enabled,\n\t\t\t\tdocsToDelete: filesToDelete\n\t\t\t});\n\t\t\tspinner.stop(`Deployment finished memory: ${memoryObject.name}`);\n\t\t} catch (error) {\n\t\t\tdlog('Error in upsertMemory:', error);\n\t\t\tthrow error;\n\t\t}\n\t} catch (error) {\n\t\thandleDeploymentError({\n\t\t\tspinner,\n\t\t\tname: memoryName,\n\t\t\terror,\n\t\t\ttype: 'memory'\n\t\t});\n\t\tspinner.stop(`Error processing memory: ${memoryName}`);\n\t\tthrow error;\n\t}\n}\n\nexport async function upsertMemory({\n\tmemory,\n\tdocuments,\n\taccount,\n\toverwrite,\n\tisGitSync = false,\n\tdocsToDelete = []\n}: {\n\tmemory: MemoryI;\n\tdocuments: MemoryDocumentI[];\n\taccount: Account;\n\toverwrite: boolean;\n\tisGitSync?: boolean;\n\tdocsToDelete?: string[];\n}): Promise<void> {\n\tconst { createMemory } = getMemoryApiUrls({\n\t\tmemoryName: memory.name\n\t});\n\n\ttry {\n\t\tawait new Promise(resolve => setTimeout(resolve, 800)); // To avoid rate limiting\n\t\tconst createResponse = await fetch(createMemory, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t\t},\n\t\t\tbody: JSON.stringify(memory)\n\t\t});\n\n\t\tif (!createResponse.ok) {\n\t\t\tconst errorData = (await createResponse.json()) as ErrorResponse;\n\n\t\t\t// If memory already exists, handle it.\n\t\t\tif (errorData.error?.message.includes('already exists')) {\n\t\t\t\tif (!isGitSync) {\n\t\t\t\t\t// Show that Memory already exists\n\t\t\t\t\tp.log.info(\n\t\t\t\t\t\t`Memory \"${memory.name}\" already exists in production.`\n\t\t\t\t\t);\n\t\t\t\t\tawait handleExistingMemoryDeploy({\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\taccount,\n\t\t\t\t\t\tdocuments,\n\t\t\t\t\t\toverwrite\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If Git-sync memory, update the existing memory\n\t\t\t\tif (isGitSync) {\n\t\t\t\t\tp.log.info(\n\t\t\t\t\t\t`Memory \"${memory.name}\" already exists. Updating changed documents.`\n\t\t\t\t\t);\n\t\t\t\t\tawait handleGitSyncMemoryDeploy({\n\t\t\t\t\t\tmemory,\n\t\t\t\t\t\taccount,\n\t\t\t\t\t\tdocuments,\n\t\t\t\t\t\toverwrite\n\t\t\t\t\t});\n\n\t\t\t\t\tif (docsToDelete?.length > 0) {\n\t\t\t\t\t\tawait deleteDocumentsFromMemory({\n\t\t\t\t\t\t\tdocuments: docsToDelete,\n\t\t\t\t\t\t\tname: memory.name,\n\t\t\t\t\t\t\taccount\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tawait updateDeployedCommitHash(memory.name);\n\n\t\t\t\t\tp.log.info(\n\t\t\t\t\t\t`Updated deployed commit hash for memory: ${memory.name}`\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Throw error if not already exists\n\t\t\tthrow new Error(\n\t\t\t\t`HTTP error! status: ${createResponse.status}, message: ${errorData.error?.message}`\n\t\t\t);\n\t\t}\n\n\t\tdlog('Memory created successfully');\n\n\t\t// Upload documents\n\t\tconst { name } = (await createResponse.json()) as MemoryI;\n\t\tawait uploadDocumentsToMemory({ documents, name, account });\n\n\t\tif (isGitSync) {\n\t\t\tif (docsToDelete?.length > 0) {\n\t\t\t\tawait deleteDocumentsFromMemory({\n\t\t\t\t\tdocuments: docsToDelete,\n\t\t\t\t\tname: memory.name,\n\t\t\t\t\taccount\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tawait updateDeployedCommitHash(memory.name);\n\t\t\tp.log.info(\n\t\t\t\t`Updated deployed commit hash for memory: ${memory.name}`\n\t\t\t);\n\t\t}\n\t} catch (error) {\n\t\tdlog('Error in createNewMemory:', error);\n\t\tthrow error;\n\t}\n}\n\nexport async function uploadDocumentsToMemory({\n\tdocuments,\n\tname,\n\taccount\n}: {\n\tdocuments: MemoryDocumentI[];\n\tname: string;\n\taccount: Account;\n}) {\n\tfor (const doc of documents) {\n\t\ttry {\n\t\t\tp.log.message(`Uploading document: ${doc.name} ....`);\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 800)); // To avoid rate limiting\n\t\t\tconst signedUrl = await getSignedUploadUrl({\n\t\t\t\tdocumentName: doc.name,\n\t\t\t\tmemoryName: name,\n\t\t\t\taccount,\n\t\t\t\tmeta: doc.meta\n\t\t\t});\n\n\t\t\tconst uploadResponse = await uploadDocument(signedUrl, doc.blob);\n\t\t\tdlog(`Upload response status: ${uploadResponse.status}`);\n\n\t\t\tp.log.message(`Uploaded document: ${doc.name}`);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n\nexport async function deleteDocumentsFromMemory({\n\tdocuments,\n\tname,\n\taccount\n}: {\n\tdocuments: string[];\n\tname: string;\n\taccount: Account;\n}) {\n\tp.log.info(`Deleting documents from memory: ${name}`);\n\n\tfor (const doc of documents) {\n\t\ttry {\n\t\t\tp.log.message(`Deleting document: ${doc} ....`);\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 800)); // To avoid rate limiting\n\n\t\t\tconst deleteResponse = await deleteDocument({\n\t\t\t\tdocumentName: doc,\n\t\t\t\tmemoryName: name,\n\t\t\t\taccount\n\t\t\t});\n\n\t\t\tdlog(`Delete response status: ${deleteResponse.status}`);\n\n\t\t\tp.log.message(`Deleted document: ${doc}`);\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\tp.log.info(`Deleted documents from memory: ${name}`);\n}\n\nexport async function handleExistingMemoryDeploy({\n\tmemory,\n\taccount,\n\tdocuments,\n\toverwrite\n}: {\n\tmemory: MemoryI;\n\taccount: Account;\n\tdocuments: MemoryDocumentI[];\n\toverwrite: boolean;\n}) {\n\tp.log.info(`Fetching \"${memory.name}\" memory documents.`);\n\n\t// Fetch the existing documents and compare with the local documents\n\tconst prodDocs = await listMemoryDocuments({\n\t\taccount,\n\t\tmemoryName: memory.name\n\t});\n\n\t// Get the list of local document names\n\tconst localDocs = await getMemoryFileNames(memory.name);\n\n\t// Compare the documents\n\tconst {\n\t\tareListsSame,\n\t\tisProdSubsetOfLocal,\n\t\tisProdSupersetOfLocal,\n\t\tareMutuallyExclusive,\n\t\tareOverlapping\n\t} = compareDocumentLists({\n\t\tlocalDocs,\n\t\tprodDocs\n\t});\n\n\t// If the user wants to overwrite, overwrite the memory.\n\tif (overwrite) {\n\t\tawait overwriteMemory({ memory, documents, account });\n\t\treturn true;\n\t}\n\n\t// If the lists are the same, do nothing and skip deployment.\n\tif (areListsSame) {\n\t\tp.log.info(\n\t\t\t`Documents in local and prod are the same. Skipping deployment for memory: \"${memory.name}\".`\n\t\t);\n\n\t\treturn true;\n\t}\n\n\t// If prod is a subset of local, upload the missing documents.\n\tif (isProdSubsetOfLocal) {\n\t\tawait uploadMissingDocumentsToMemory({\n\t\t\tmemory,\n\t\t\tprodDocs,\n\t\t\tdocuments,\n\t\t\taccount\n\t\t});\n\t\treturn true;\n\t}\n\n\t// If prod is a superset of local or the lists are mutually exclusive, ask the user whether to overwrite.\n\tif (isProdSupersetOfLocal || areMutuallyExclusive || areOverlapping) {\n\t\tawait handleProdSupersetOfLocal({\n\t\t\tmemory,\n\t\t\tlocalDocs,\n\t\t\tprodDocs,\n\t\t\tdocuments,\n\t\t\taccount\n\t\t});\n\t\treturn true;\n\t}\n}\n\nasync function handleProdSupersetOfLocal({\n\tmemory,\n\tlocalDocs,\n\tprodDocs,\n\tdocuments,\n\taccount\n}: {\n\tmemory: MemoryI;\n\tlocalDocs: string[];\n\tprodDocs: string[];\n\tdocuments: MemoryDocumentI[];\n\taccount: Account;\n}) {\n\t// Show the diff table.\n\tprintDiffTable(localDocs, prodDocs);\n\n\t// Inform user, Memory deploy is currently in beta and can currently only overwrite the prod memory.\n\tp.log.warning(\n\t\t`Memory deploy is currently in beta. We only support overwriting the prod memory on Langbase.com.`\n\t);\n\n\t// Ask user to overwrite.\n\tconst shouldOverwrite = await p.confirm({\n\t\tmessage:\n\t\t\t'Do you want to overwrite the prod memory? This will delete all prod documents.',\n\t\tinitialValue: false\n\t});\n\n\tif (!shouldOverwrite) {\n\t\tp.log.message(`Skipping memory deployment for \"${memory.name}\".`);\n\t\treturn;\n\t}\n\n\t// Overwrite the prod memory\n\tawait overwriteMemory({ memory, documents, account });\n}\n\nasync function uploadMissingDocumentsToMemory({\n\tmemory,\n\tprodDocs,\n\tdocuments,\n\taccount\n}: {\n\tmemory: MemoryI;\n\tprodDocs: string[];\n\tdocuments: MemoryDocumentI[];\n\taccount: Account;\n}) {\n\tp.log.info(\n\t\t`Prod has missing documents. Uploading new documents to ${memory.name}.`\n\t);\n\tconst missingDocs = documents.filter(doc => {\n\t\tconst isMissing = !prodDocs.includes(doc.name);\n\t\tif (!isMissing) {\n\t\t\tp.log.message(`Document \"${doc.name}\" already exists. Skipping.`);\n\t\t}\n\t\treturn isMissing;\n\t});\n\n\t// wait for 500 ms to avoid rate limiting\n\tawait new Promise(resolve => setTimeout(resolve, 500));\n\tawait uploadDocumentsToMemory({\n\t\tdocuments: missingDocs,\n\t\tname: memory.name,\n\t\taccount\n\t});\n}\n\nexport async function listMemoryDocuments({\n\taccount,\n\tmemoryName\n}: {\n\taccount: Account;\n\tmemoryName: string;\n}) {\n\tconst { listDocuments } = getMemoryApiUrls({\n\t\tmemoryName: memoryName\n\t});\n\n\t// Wait 500 ms to avoid rate limiting\n\tawait new Promise(resolve => setTimeout(resolve, 500));\n\tconst listResponse = await fetch(listDocuments, {\n\t\tmethod: 'GET',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t}\n\t});\n\n\tif (!listResponse.ok) {\n\t\tconst errorData = (await listResponse.json()) as ErrorResponse;\n\n\t\tconst errorMsg = errorData.error?.message;\n\n\t\tif (errorMsg?.includes('Invalid memory name.')) {\n\t\t\tp.log.info(`Memory \"${memoryName}\" does not exist in production.`);\n\t\t\treturn [];\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`HTTP error! status: ${listResponse.status}, message: ${errorMsg}`\n\t\t);\n\t}\n\n\tconst res = (await listResponse.json()) as { name: string }[];\n\tconst documents = res.map((doc: { name: string }) => doc.name);\n\treturn documents;\n}\n\nasync function getSignedUploadUrl({\n\tdocumentName,\n\tmemoryName,\n\taccount,\n\tmeta\n}: {\n\tdocumentName: string;\n\tmemoryName: string;\n\taccount: Account;\n\tmeta: Record<string, string>;\n}): Promise<string> {\n\tconst { uploadDocument } = getMemoryApiUrls({\n\t\tmemoryName\n\t});\n\n\ttry {\n\t\tconst response = await fetch(uploadDocument, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tmeta,\n\t\t\t\tmemoryName,\n\t\t\t\tfileName: documentName\n\t\t\t})\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = (await response.json()) as ErrorResponse;\n\t\t\tthrow new Error(\n\t\t\t\t`HTTP error! status: ${response.status}, message: ${errorData.error?.message}`\n\t\t\t);\n\t\t}\n\t\tconst { signedUrl } = (await response.json()) as { signedUrl: string };\n\n\t\tif (!signedUrl) {\n\t\t\tthrow new Error('Invalid signedUrl received from API');\n\t\t}\n\n\t\treturn signedUrl;\n\t} catch (error) {\n\t\tdlog('Error in getSignedUploadUrl:', error);\n\t\tthrow error;\n\t}\n}\n\nasync function deleteDocument({\n\tdocumentName,\n\tmemoryName,\n\taccount\n}: {\n\tdocumentName: string;\n\tmemoryName: string;\n\taccount: Account;\n}) {\n\tconst { deleteDocument } = getMemoryApiUrls({\n\t\tmemoryName,\n\t\tdocumentName\n\t});\n\n\ttry {\n\t\tconst response = await fetch(deleteDocument, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t\t}\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst errorData = (await response.json()) as ErrorResponse;\n\t\t\tthrow new Error(\n\t\t\t\t`HTTP error! status: ${response.status}, message: ${errorData.error?.message}`\n\t\t\t);\n\t\t}\n\n\t\treturn response;\n\t} catch (error) {\n\t\tdlog('Error in deleteDocument:', error);\n\t\tthrow error;\n\t}\n}\n\nasync function uploadDocument(signedUrl: string, document: Blob) {\n\tlet mimeType = document.type;\n\n\t// Check if the MIME type is supported.\n\tconst isSupportedMimeType =\n\t\tMEMORYSETS.ACCEPTED_MIME_TYPES.includes(mimeType);\n\n\t// If not, default to text/plain.\n\tif (!isSupportedMimeType) {\n\t\tdlog(`Unsupported MIME type ${mimeType}. Defaulting to text/plain`);\n\t\tmimeType = 'text/plain';\n\t}\n\n\ttry {\n\t\tconst response = await fetch(signedUrl, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': mimeType\n\t\t\t},\n\t\t\tbody: document\n\t\t});\n\n\t\tif (!response.ok) {\n\t\t\tconst error = await response.text();\n\t\t\tthrow new Error(\n\t\t\t\t`HTTP error! status: ${response.status}, message: ${error}`\n\t\t\t);\n\t\t}\n\n\t\treturn response;\n\t} catch (error) {\n\t\tdlog('Error in uploadDocument:', error);\n\t\tthrow error;\n\t}\n}\n\nexport function getMemoryApiUrls({\n\tmemoryName,\n\tdocumentName\n}: {\n\tmemoryName: string;\n\tdocumentName?: string;\n}) {\n\t// Base URL\n\tconst baseUrl = `https://api.langbase.com/v1`;\n\n\t// Create memory URL\n\tconst createMemory = `${baseUrl}/memory`;\n\n\t// Delete memory URL\n\tconst deleteMemory = `${baseUrl}/memory/${memoryName}`;\n\n\t// Upload document URL\n\tconst uploadDocument = `${baseUrl}/memory/documents`;\n\n\t// List documents URL\n\tconst listDocuments = `${baseUrl}/memory/${memoryName}/documents`;\n\n\t// Delete document URL\n\tconst deleteDocument = `${baseUrl}/memory/${memoryName}/documents/${documentName}`;\n\n\treturn {\n\t\tlistDocuments,\n\t\tdeleteMemory,\n\t\tdeleteDocument,\n\t\tcreateMemory,\n\t\tuploadDocument\n\t};\n}\n\nasync function overwriteMemory({\n\tmemory,\n\tdocuments,\n\taccount\n}: {\n\tmemory: MemoryI;\n\tdocuments: MemoryDocumentI[];\n\taccount: Account;\n}): Promise<void> {\n\tp.log.message(\n\t\t`Overwriting memory \"${memory.name}\" in prod at Langbase.com with local documents.`\n\t);\n\n\t// Delete old memory.\n\tdlog(`Deleting old memory: ${memory.name}`);\n\tconst { deleteMemory } = getMemoryApiUrls({\n\t\tmemoryName: memory.name\n\t});\n\n\t// Wait 500 ms to avoid rate limiting\n\tawait new Promise(resolve => setTimeout(resolve, 500));\n\tconst deleteResponse = await fetch(deleteMemory, {\n\t\tmethod: 'DELETE',\n\t\theaders: {\n\t\t\tAuthorization: `Bearer ${account.apiKey}`\n\t\t}\n\t});\n\n\tif (!deleteResponse.ok) {\n\t\tconst error = await deleteResponse.text();\n\t\tthrow new Error(\n\t\t\t`HTTP error! status: ${deleteResponse.status}, message: ${error}`\n\t\t);\n\t}\n\n\tp.log.message(`Overwriting memory: ${memory.name}`);\n\n\t// Reuse same function to create the memory.\n\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\tawait upsertMemory({\n\t\tmemory,\n\t\tdocuments,\n\t\taccount,\n\t\toverwrite: true\n\t});\n}\n\nexport async function handleGitSyncMemoryDeploy({\n\tmemory,\n\taccount,\n\tdocuments,\n\toverwrite\n}: {\n\tmemory: MemoryI;\n\taccount: Account;\n\tdocuments: MemoryDocumentI[];\n\toverwrite: boolean;\n}) {\n\tfor (const doc in documents) {\n\t\tawait new Promise(resolve => setTimeout(resolve, 800)); // To avoid rate limiting\n\t\tawait handleSingleDocDeploy({\n\t\t\tmemory,\n\t\t\taccount,\n\t\t\tdocument: documents[doc],\n\t\t\toverwrite: true // TODO: Implement overwrite for git-sync memories\n\t\t});\n\t}\n}\n\nexport async function deploySingleMemory({\n\tmemoryName,\n\toverwrite\n}: {\n\tmemoryName: string;\n\toverwrite: boolean;\n}): Promise<void> {\n\tconst spinner = p.spinner();\n\n\ttry {\n\t\tp.intro(heading({ text: 'BUILDING', sub: 'baseai...' }));\n\n\t\tawait buildMemory({\n\t\t\tmemoryName: memoryName\n\t\t});\n\n\t\tconsole.log('');\n\t\tp.outro(heading({ text: 'BUILD', sub: 'complete', green: true }));\n\n\t\tp.intro(heading({ text: 'DEPLOY', sub: 'Deploy your BaseAI Memory' }));\n\n\t\tconst buildDir = path.join(process.cwd(), '.baseai');\n\t\tconst memoryDir = path.join(buildDir, 'memory');\n\t\tconst allMemory = await readMemoryDirectory({\n\t\t\tspinner,\n\t\t\tmemoryDir\n\t\t});\n\n\t\t// Check if the memory exists\n\t\tif (!allMemory?.includes(`${memoryName}.json`)) {\n\t\t\tp.log.error(`Memory \"${memoryName}\" not found.`);\n\t\t\treturn;\n\t\t}\n\n\t\t// Retrieve authentication\n\t\tconst account = await retrieveAuthentication({ spinner });\n\t\tif (!account) {\n\t\t\tp.outro(\n\t\t\t\t`No account found. Skipping deployment. \\n Run: ${cyan('npx baseai@latest auth')}`\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\t// Call deployMemory function\n\t\tawait deployMemory({\n\t\t\tspinner,\n\t\t\tmemoryName: `${memoryName}.json`,\n\t\t\tmemoryDir,\n\t\t\taccount,\n\t\t\toverwrite\n\t\t});\n\n\t\tp.outro(`Successfully deployed memory: ${memoryName}`);\n\t\tprocess.exit(0);\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tif ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n\t\t\t\tp.log.error(\n\t\t\t\t\t`Directory or file not found. Make sure you're in the correct project directory and the memory exists.`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tp.log.error(`Error deploying memory: ${error.message}`);\n\t\t\t}\n\t\t} else {\n\t\t\tp.log.error(`An unknown error occurred while deploying memory.`);\n\t\t}\n\t\tprocess.exit(1);\n\t}\n}\n\nexport { deploy };\n","import { execSync } from 'child_process';\nimport * as p from '@clack/prompts';\nimport { saveDeployedCommitHashInMemoryConfig } from './save-deployed-commit-in-config';\nimport { getChangedAndDeletedFilesBetweenCommits } from './get-changed-files-between-commits';\nimport type { MemoryConfigI } from 'types/memory';\nimport { listMemoryDocuments, type Account } from '@/deploy';\nimport { loadMemoryFilesFromCustomDir } from '../load-memory-files';\nimport { listLocalEmbeddedMemoryDocuments } from '../generate-embeddings';\nimport { saveEmbeddedCommitHashInMemoryConfig } from './save-embedded-commit-in-config';\n\nexport async function handleGitSyncMemories({\n\tmemoryName,\n\tconfig,\n\taccount\n}: {\n\tmemoryName: string;\n\tconfig: MemoryConfigI;\n\taccount?: Account; // Undefined for local embed\n}): Promise<{\n\tfilesToDeploy: string[];\n\tfilesToDelete: string[];\n}> {\n\tconst isEmbed = !account;\n\n\t// Check for uncommitted changes\n\ttry {\n\t\tconst hasChanges = execSync('git status --porcelain').toString().trim();\n\t\tif (hasChanges) {\n\t\t\tp.log.error(\n\t\t\t\t`There are uncommitted changes in the Git repository for ${isEmbed ? 'embedding' : 'deploying'} git-synced memory \"${memoryName}\".`\n\t\t\t);\n\t\t\tp.log.info(\n\t\t\t\t`Please commit these changes before ${isEmbed ? 'embedding' : 'deploying'}. Aborting.`\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\t} catch (error) {\n\t\tp.log.error(\n\t\t\t`Failed to check if there are uncommitted changes: ${error}`\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tlet filesToDeploy: string[] = [];\n\tlet filesToDelete: string[] = [];\n\n\t// Step 1:\n\t// Fetch the uploaded documents and compare with the local documents\n\t// Handles new files that are not in the prodDocs due to extension and path updates\n\tconst prodDocs = !isEmbed\n\t\t? await listMemoryDocuments({\n\t\t\t\taccount,\n\t\t\t\tmemoryName\n\t\t\t})\n\t\t: await listLocalEmbeddedMemoryDocuments({\n\t\t\t\tmemoryName\n\t\t\t}); // For local embedded docs are prod equivalent\n\n\tconst allFilesWithContent = await loadMemoryFilesFromCustomDir({\n\t\tmemoryName,\n\t\tmemoryConfig: config\n\t});\n\n\tconst allFiles = allFilesWithContent.map(file => file.name);\n\n\t// Get files from allFiles that are not in the prodDocs\n\tconst newFiles = allFiles.filter(\n\t\tfile => !prodDocs.some(doc => doc === file)\n\t);\n\n\t// Step 2.1:\n\t// If there's no deployedCommitHash, user is deploying for the first time\n\t// Deploy all files in the directory\n\tconst lastHashUsed = isEmbed\n\t\t? config.git?.embeddedAt\n\t\t: config.git?.deployedAt;\n\n\tif (!lastHashUsed) {\n\t\tfilesToDeploy = allFiles;\n\t\tp.log.info(\n\t\t\t`Found no previous ${isEmbed ? 'deployed' : 'embedded'} commit. ${isEmbed ? 'Deploying' : 'Embedding'} all ${filesToDeploy.length} files in memory \"${memoryName}\":`\n\t\t);\n\t}\n\t// Step 2.2: Otherwise, get changed files between commits\n\telse {\n\t\tconst { changedFiles, deletedFiles } =\n\t\t\tawait getChangedAndDeletedFilesBetweenCommits({\n\t\t\t\toldCommit: lastHashUsed,\n\t\t\t\tlatestCommit: 'HEAD',\n\t\t\t\tinclude: config.git.include\n\t\t\t});\n\n\t\tfilesToDeploy = changedFiles;\n\t\tfilesToDelete = deletedFiles;\n\n\t\tif (filesToDeploy.length > 0) {\n\t\t\tp.log.info(\n\t\t\t\t`Found ${filesToDeploy.length} changed files for memory \"${memoryName}\":`\n\t\t\t);\n\n\t\t\t// Print the changed file names TODO: Remove because it may clutter the terminal?\n\t\t\tfilesToDeploy.forEach(file => p.log.message(file));\n\t\t} else {\n\t\t\tconst isEmbed = !account;\n\t\t\tp.log.info(\n\t\t\t\t`No file changes detected for memory \"${memoryName}\" since last ${isEmbed ? 'embedding' : 'deployment'}.`\n\t\t\t);\n\t\t}\n\n\t\tif (filesToDelete.length > 0) {\n\t\t\tp.log.info(\n\t\t\t\t`Found ${filesToDelete.length} deleted files for memory \"${memoryName}\":`\n\t\t\t);\n\n\t\t\t// Print the deleted file names TODO: Remove because it may clutter the terminal?\n\t\t\tfilesToDelete.forEach(file => p.log.message(file));\n\t\t} else {\n\t\t\tconst isEmbed = !account;\n\t\t\tp.log.info(\n\t\t\t\t`No deleted file detected for memory \"${memoryName}\" since last ${isEmbed ? 'embedding' : 'deployment'}.`\n\t\t\t);\n\t\t}\n\t}\n\n\t// Step 3\n\t// Combine filesToDeploy with newFiles, avoid duplicates\n\tfilesToDeploy = [...new Set([...filesToDeploy, ...newFiles])];\n\t// Filter the files to be deleted to make sure they are not in filesToDeploy\n\tfilesToDelete = filesToDelete.filter(file => !filesToDeploy.includes(file));\n\n\treturn {\n\t\tfilesToDeploy,\n\t\tfilesToDelete\n\t};\n}\n\nexport async function updateDeployedCommitHash(memoryName: string) {\n\tconst currentCommitHash = execSync('git rev-parse HEAD').toString().trim();\n\tawait saveDeployedCommitHashInMemoryConfig({\n\t\tmemoryName,\n\t\tdeployedCommitHash: currentCommitHash\n\t});\n}\n\nexport async function updateEmbeddedCommitHash(memoryName: string) {\n\tconst currentCommitHash = execSync('git rev-parse HEAD').toString().trim();\n\tawait saveEmbeddedCommitHashInMemoryConfig({\n\t\tmemoryName,\n\t\tembeddedCommitHash: currentCommitHash\n\t});\n}\n","import fs from 'fs/promises';\nimport * as p from '@clack/prompts';\nimport path from 'path';\n\nexport async function saveDeployedCommitHashInMemoryConfig({\n\tmemoryName,\n\tdeployedCommitHash\n}: {\n\tmemoryName: string;\n\tdeployedCommitHash: string;\n}): Promise<void> {\n\ttry {\n\t\tconst memoryDir = path.join(\n\t\t\tprocess.cwd(),\n\t\t\t'baseai',\n\t\t\t'memory',\n\t\t\tmemoryName\n\t\t);\n\t\tconst indexFilePath = path.join(memoryDir, 'index.ts');\n\t\tlet fileContents = await fs.readFile(indexFilePath, 'utf-8');\n\n\t\t// Check if the git block exists\n\t\tif (fileContents.includes('git:')) {\n\t\t\t// Find the git block including its indentation\n\t\t\tconst gitBlockMatch = fileContents.match(/(\\t*)git:\\s*{[^}]*?}/);\n\t\t\tif (gitBlockMatch) {\n\t\t\t\tconst [fullMatch, outerIndent] = gitBlockMatch;\n\t\t\t\tconst innerIndent = outerIndent + '\\t';\n\n\t\t\t\t// Parse existing content\n\t\t\t\tconst contentMatch = fullMatch.match(\n\t\t\t\t\t/{\\s*\\n?\\s*(.*?)\\s*\\n?\\s*}/s\n\t\t\t\t);\n\t\t\t\tlet existingContent = contentMatch ? contentMatch[1] : '';\n\n\t\t\t\tlet contentLines = existingContent\n\t\t\t\t\t.split('\\n')\n\t\t\t\t\t.map(line => line.trim().replace(/,\\s*$/, '')) // Remove trailing commas\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tlet newGitContent: string;\n\n\t\t\t\t// If deployedAt exists, update it while preserving formatting\n\t\t\t\tif (existingContent.includes('deployedAt:')) {\n\t\t\t\t\tcontentLines = contentLines.map(line => {\n\t\t\t\t\t\tif (line.includes('deployedAt:')) {\n\t\t\t\t\t\t\treturn `deployedAt: '${deployedCommitHash}'`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn line;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Add deployedAt to existing content\n\t\t\t\t\tcontentLines.push(`deployedAt: '${deployedCommitHash}'`);\n\t\t\t\t}\n\n\t\t\t\t// Add commas between lines but not after the last line\n\t\t\t\tnewGitContent = contentLines\n\t\t\t\t\t.map((line, index) => {\n\t\t\t\t\t\tconst isLast = index === contentLines.length - 1;\n\t\t\t\t\t\treturn `${innerIndent}${line}${isLast ? '' : ','}`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('\\n');\n\n\t\t\t\t// Replace the old git block with the new one\n\t\t\t\tfileContents = fileContents.replace(\n\t\t\t\t\t/(\\t*)git:\\s*{[^}]*?}/,\n\t\t\t\t\t`${outerIndent}git: {\\n${newGitContent}\\n${outerIndent}}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Add new git config block\n\t\t\tconst match = fileContents.match(\n\t\t\t\t/(?:const\\s+\\w+\\s*=\\s*\\(\\s*\\)\\s*(?::\\s*\\w+)?\\s*=>\\s*\\({[\\s\\S]*?)(}\\))/\n\t\t\t);\n\n\t\t\tif (match) {\n\t\t\t\t// Insert before the closing parenthesis\n\t\t\t\tconst insertPosition =\n\t\t\t\t\tmatch.index! + match[0].length - match[1].length;\n\t\t\t\tconst prefix = fileContents.slice(0, insertPosition);\n\t\t\t\tconst suffix = fileContents.slice(insertPosition);\n\n\t\t\t\t// Match the indentation of nearby properties\n\t\t\t\tconst indentMatch = prefix.match(/\\n(\\t+)[^\\n]+\\n\\s*$/);\n\t\t\t\tconst baseIndent = indentMatch ? indentMatch[1] : '\\t';\n\t\t\t\tconst innerIndent = baseIndent + '\\t';\n\n\t\t\t\tconst lines = [\n\t\t\t\t\t'enabled: false',\n\t\t\t\t\t\"include: ['**/*']\",\n\t\t\t\t\t'gitignore: false',\n\t\t\t\t\t`deployedAt: '${deployedCommitHash}'`\n\t\t\t\t];\n\n\t\t\t\tconst gitConfig = lines\n\t\t\t\t\t.map((line, index) => {\n\t\t\t\t\t\tconst isLast = index === lines.length - 1;\n\t\t\t\t\t\treturn `${innerIndent}${line}${isLast ? '' : ','}`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('\\n');\n\n\t\t\t\tfileContents = `${prefix},\\n${baseIndent}git: {\\n${gitConfig}\\n${baseIndent}}${suffix}`;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Could not find appropriate location to insert git config'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Write the updated contents back to the file\n\t\tawait fs.writeFile(indexFilePath, fileContents, 'utf-8');\n\n\t\tp.log.success(`Updated deployedAt hash for memory '${memoryName}'.`);\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tp.cancel(\n\t\t\t\t`Failed to save deployedAt hash for memory '${memoryName}': ${error.message}`\n\t\t\t);\n\t\t} else {\n\t\t\tp.cancel(\n\t\t\t\t`Failed to save deployedAt hash for memory '${memoryName}': Unknown error`\n\t\t\t);\n\t\t}\n\t\tthrow error;\n\t}\n}\n","import { execSync } from 'child_process';\n\n/**\n * Retrieves the list of changed and deleted files between two Git commits matching specified glob patterns.\n *\n * @param {Object} params - The parameters for the function.\n * @param {string} params.oldCommit - The old commit reference to compare from.\n * @param {string} [params.latestCommit='HEAD'] - The latest commit reference to compare to. Defaults to 'HEAD'.\n * @param {string[]} params.include - Array of glob patterns to track for changes.\n * @returns {Promise<{ changedFiles: string[]; deletedFiles: string[] }>} - A promise that resolves to an object containing arrays of changed and deleted files.\n * @throws {Error} - Throws an error if the Git command execution fails or if the commit references are invalid.\n */\nexport async function getChangedAndDeletedFilesBetweenCommits({\n\toldCommit,\n\tlatestCommit = 'HEAD',\n\tinclude\n}: {\n\toldCommit: string;\n\tlatestCommit: string;\n\tinclude: string[];\n}): Promise<{ changedFiles: string[]; deletedFiles: string[] }> {\n\ttry {\n\t\t// Validate inputs\n\t\tif (oldCommit === '') {\n\t\t\tthrow new Error('Invalid commit references');\n\t\t}\n\n\t\tif (!Array.isArray(include) || include.length === 0) {\n\t\t\tthrow new Error('Include patterns must be a non-empty array');\n\t\t}\n\n\t\tconst repoPath = process.cwd();\n\n\t\t// Execute the Git commands for changed and deleted files\n\t\tconst changedResult = execSync(\n\t\t\tconstructGitCommand({\n\t\t\t\tinclude,\n\t\t\t\toldCommit,\n\t\t\t\tdiffFilter: 'ACMRT',\n\t\t\t\tlatestCommit\n\t\t\t}),\n\t\t\t{\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\tcwd: repoPath\n\t\t\t}\n\t\t).trim();\n\n\t\tconst deletedResult = execSync(\n\t\t\tconstructGitCommand({\n\t\t\t\tinclude,\n\t\t\t\toldCommit,\n\t\t\t\tdiffFilter: 'D',\n\t\t\t\tlatestCommit\n\t\t\t}),\n\t\t\t{\n\t\t\t\tencoding: 'utf-8',\n\t\t\t\tcwd: repoPath\n\t\t\t}\n\t\t).trim();\n\n\t\t// Process the results\n\t\tconst changedFiles = changedResult\n\t\t\t? changedResult\n\t\t\t\t\t.split('\\n')\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.map(file => file.replace(/\\//g, '-'))\n\t\t\t: [];\n\n\t\tconst deletedFiles = deletedResult\n\t\t\t? deletedResult\n\t\t\t\t\t.split('\\n')\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.map(file => file.replace(/\\//g, '-'))\n\t\t\t: [];\n\n\t\treturn { changedFiles, deletedFiles };\n\t} catch (error) {\n\t\tconsole.error('Error executing Git command:', error);\n\t\tthrow error;\n\t}\n}\n\n// Helper function to construct the Git command for changed files\nconst constructGitCommand = ({\n\tinclude,\n\toldCommit,\n\tdiffFilter,\n\tlatestCommit\n}: {\n\tinclude: string[];\n\toldCommit: string;\n\tdiffFilter: 'ACMRT' | 'D';\n\tlatestCommit: string;\n}) => {\n\tconst baseCommand = `git diff --diff-filter=${diffFilter} --name-only ${oldCommit} ${latestCommit}`;\n\n\t// If there's only one pattern, use it directly\n\tif (include.length === 1) {\n\t\treturn `${baseCommand} -- \"${include[0]}\"`;\n\t}\n\n\t// For multiple patterns, use brace expansion\n\tconst patterns = include.map(pattern => `\"${pattern}\"`).join(' ');\n\treturn `${baseCommand} -- ${patterns}`;\n};\n","import * as p from '@clack/prompts';\nimport figures from 'figures';\nimport color from 'picocolors';\nimport { RecursiveCharacterTextSplitter } from './chunker';\nimport { MEMORYSETS } from './constants';\nimport {\n\taddChunksBulk,\n\taddDocument,\n\tdeleteDocumentFromDB,\n\tgetDocument,\n\tloadDb\n} from './db/lib';\nimport { getOpenAIEmbeddings } from './generate-openai-embeddings';\nimport type { MemoryDocumentI } from './load-memory-files';\nimport { generateLocalEmbeddings } from './generate-local-embeddings';\nimport { loadConfig } from '../config/config-handler';\nimport { dlog } from '@/dev/utils/dlog';\n\nexport async function generateEmbeddings({\n\tmemoryFiles,\n\tmemoryName,\n\toverwrite = false,\n\tuseLocalEmbeddings\n}: {\n\tmemoryFiles: MemoryDocumentI[];\n\tmemoryName: string;\n\toverwrite: boolean;\n\tuseLocalEmbeddings?: boolean;\n}): Promise<string> {\n\tlet memoryDb;\n\tlet totalEmbeddings = 0;\n\tlet totalDocs = memoryFiles.length;\n\tlet successfulDocs = 0;\n\tlet skippedDocs = 0;\n\tlet failedDocs = 0;\n\n\ttry {\n\t\tmemoryDb = await loadDb(memoryName);\n\t} catch (error) {\n\t\tp.cancel(`Failed to load database for memory '${memoryName}'.`);\n\t\tprocess.exit(1);\n\t}\n\n\tconst splitter = new RecursiveCharacterTextSplitter({\n\t\tchunkMaxLength: MEMORYSETS.MIN_CHUNK_LENGTH,\n\t\tchunkOverlap: MEMORYSETS.MIN_CHUNK_OVERLAP\n\t});\n\n\tfor (const { name, content } of memoryFiles) {\n\t\tconst document = getDocument(memoryDb, name);\n\n\t\tif (document && overwrite) {\n\t\t\tp.log.info(\n\t\t\t\t`Removing existing embeddings for DOC: ${color.cyan(name)}`\n\t\t\t);\n\t\t\tawait deleteDocumentFromDB({\n\t\t\t\tdb: memoryDb,\n\t\t\t\tdocName: name\n\t\t\t});\n\t\t}\n\n\t\tif (document && !overwrite) {\n\t\t\tp.log.info(`[SKIPPED] DOC: ${color.cyan(name)} already exists.`);\n\t\t\tskippedDocs++;\n\t\t\tcontinue;\n\t\t}\n\n\t\tp.log.info(`Embedding document: ${name}`);\n\n\t\ttry {\n\t\t\taddDocument({ db: memoryDb, docName: name });\n\n\t\t\tlet chunks;\n\t\t\ttry {\n\t\t\t\tchunks = await splitter.createChunks(content);\n\t\t\t} catch (error) {\n\t\t\t\tp.log.error(\n\t\t\t\t\t`Failed to split document \"${name}\" into chunks. Skipping.`\n\t\t\t\t);\n\t\t\t\tfailedDocs++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet embeddings;\n\t\t\ttry {\n\t\t\t\t// Load the useLocalEmbedding config from the config file.\n\t\t\t\tconst config = await loadConfig();\n\t\t\t\tconst localEmbeddingsConfig =\n\t\t\t\t\tconfig.memory?.useLocalEmbeddings || false;\n\n\t\t\t\t// Read the prop. If prop is present, use it, else use the config.\n\t\t\t\tconst localEmbeddingsEnabled =\n\t\t\t\t\tuseLocalEmbeddings ?? localEmbeddingsConfig;\n\n\t\t\t\tif (localEmbeddingsEnabled) {\n\t\t\t\t\t// Use local embeddings\n\t\t\t\t\tdlog('Generating local embeddings');\n\t\t\t\t\tembeddings = await generateLocalEmbeddings(chunks);\n\t\t\t\t} else {\n\t\t\t\t\t// Use OpenAI embeddings\n\t\t\t\t\tdlog('Generating OpenAI embeddings');\n\t\t\t\t\tembeddings = await getOpenAIEmbeddings(chunks);\n\t\t\t\t}\n\t\t\t} catch (error: any) {\n\t\t\t\tp.cancel(error.message);\n\t\t\t\tp.log.error(\n\t\t\t\t\t`Failed to generate embeddings for document \"${name}\". Skipping.`\n\t\t\t\t);\n\t\t\t\tfailedDocs++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst chunksWithEmbeddings = chunks.map((chunk, index) => ({\n\t\t\t\ttext: chunk,\n\t\t\t\tembedding: embeddings[index].embedding\n\t\t\t}));\n\n\t\t\ttry {\n\t\t\t\tawait addChunksBulk({\n\t\t\t\t\tdb: memoryDb,\n\t\t\t\t\tdocName: name,\n\t\t\t\t\tchunks: chunksWithEmbeddings\n\t\t\t\t});\n\t\t\t\ttotalEmbeddings += chunksWithEmbeddings.length;\n\t\t\t\tsuccessfulDocs++;\n\t\t\t\tp.log.success(`Successfully embedded document: ${name}`);\n\t\t\t} catch (error) {\n\t\t\t\tp.log.error(\n\t\t\t\t\t`Failed to add chunks for document \"${name}\" to the database. Skipping.`\n\t\t\t\t);\n\t\t\t\tfailedDocs++;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tp.log.error(\n\t\t\t\t`An unexpected error occurred while processing document \"${name}\". Skipping.`\n\t\t\t);\n\t\t\tfailedDocs++;\n\t\t}\n\t}\n\n\tgenerateEmbeddingSummary({\n\t\ttotalDocs,\n\t\tsuccessfulDocs,\n\t\tskippedDocs,\n\t\ttotalEmbeddings\n\t});\n\n\tif (successfulDocs === 0 && skippedDocs === 0) {\n\t\tp.cancel(\n\t\t\t'No documents were successfully embedded or skipped. Process failed.'\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (successfulDocs === 0 && skippedDocs === totalDocs) {\n\t\treturn `All documents were skipped. No new embeddings were generated. \\n${color.dim(\n\t\t\t`${figures.arrowRight} Use --overwrite, -o flag to replace existing embeddings.`\n\t\t)}`;\n\t}\n\n\treturn `All done!`;\n}\n\nfunction generateEmbeddingSummary({\n\ttotalDocs,\n\tsuccessfulDocs,\n\tskippedDocs,\n\ttotalEmbeddings\n}: {\n\ttotalDocs: number;\n\tsuccessfulDocs: number;\n\tskippedDocs: number;\n\ttotalEmbeddings: number;\n}): void {\n\tconst failedDocs = totalDocs - successfulDocs - skippedDocs;\n\tconst maxLabelLength = 'Total embeddings generated:'.length;\n\n\tconst formatLine = (\n\t\tlabel: string,\n\t\tvalue: string,\n\t\ticon: string,\n\t\tvalueColor: (s: string) => string\n\t) => {\n\t\tconst paddedLabel = label.padEnd(maxLabelLength);\n\t\treturn `${icon} ${paddedLabel} ${valueColor(value)}`;\n\t};\n\n\tconst summary = [\n\t\tcolor.bold(color.cyan('Embedding Generation Summary:')),\n\t\t'',\n\t\tformatLine(\n\t\t\t'Total documents:',\n\t\t\t`${totalDocs}`,\n\t\t\tfigures.info,\n\t\t\tcolor.blue\n\t\t),\n\t\t...(skippedDocs > 0\n\t\t\t? [\n\t\t\t\t\tformatLine(\n\t\t\t\t\t\t'Skipped:',\n\t\t\t\t\t\t`${skippedDocs}/${totalDocs} docs`,\n\t\t\t\t\t\tfigures.warning,\n\t\t\t\t\t\tcolor.yellow\n\t\t\t\t\t)\n\t\t\t\t]\n\t\t\t: []),\n\t\tformatLine(\n\t\t\t'Successfully embedded:',\n\t\t\t`${successfulDocs}/${totalDocs} docs`,\n\t\t\tfigures.tick,\n\t\t\tcolor.green\n\t\t),\n\t\t...(failedDocs > 0\n\t\t\t? [\n\t\t\t\t\tformatLine(\n\t\t\t\t\t\t'Failed:',\n\t\t\t\t\t\t`${failedDocs}/${totalDocs} docs`,\n\t\t\t\t\t\tfigures.cross,\n\t\t\t\t\t\tcolor.red\n\t\t\t\t\t)\n\t\t\t\t]\n\t\t\t: []),\n\t\tformatLine(\n\t\t\t'Total embeddings generated:',\n\t\t\t`${totalEmbeddings}`,\n\t\t\tfigures.pointer,\n\t\t\tcolor.magenta\n\t\t),\n\t\t''\n\t].join('\\n');\n\n\tp.log.info(summary);\n}\n\nexport async function listLocalEmbeddedMemoryDocuments({\n\tmemoryName\n}: {\n\tmemoryName: string;\n}) {\n\tconst memoryDb = await loadDb(memoryName);\n\tconst documents = Object.keys(memoryDb.data.documents);\n\treturn documents;\n}\n","export interface ChunkingConfig {\n\tchunkMaxLength: number;\n\tchunkOverlap: number;\n}\n\nclass TextSplitter {\n\tprotected chunkSize: number;\n\tprotected chunkOverlap: number;\n\tprotected keepSeparator: boolean;\n\tprotected lengthFunction: (text: string) => number;\n\n\tconstructor(config: ChunkingConfig) {\n\t\tthis.chunkSize = config.chunkMaxLength;\n\t\tthis.chunkOverlap = config.chunkOverlap;\n\t\tthis.keepSeparator = true;\n\t\tthis.lengthFunction = (text: string) => text.length;\n\n\t\tif (this.chunkOverlap >= this.chunkSize) {\n\t\t\tthrow new Error('Cannot have chunkOverlap >= chunkSize');\n\t\t}\n\t}\n\n\tprotected async splitText(text: string): Promise<string[]> {\n\t\tthrow new Error('splitText method must be implemented in subclass');\n\t}\n\n\tprotected async mergeSplits(\n\t\tsplits: string[],\n\t\tseparator: string\n\t): Promise<string[]> {\n\t\tconst docs: string[] = [];\n\t\tconst currentDoc: string[] = [];\n\t\tlet total = 0;\n\t\tfor (const d of splits) {\n\t\t\tconst _len = await this.lengthFunction(d);\n\t\t\tif (\n\t\t\t\ttotal + _len + (currentDoc.length > 0 ? separator.length : 0) >\n\t\t\t\tthis.chunkSize\n\t\t\t) {\n\t\t\t\tif (total > this.chunkSize) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Created a chunk of size ${total}, which is longer than the specified ${this.chunkSize}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (currentDoc.length > 0) {\n\t\t\t\t\tconst doc = this.joinDocs(currentDoc, separator);\n\t\t\t\t\tif (doc !== null) {\n\t\t\t\t\t\tdocs.push(doc);\n\t\t\t\t\t}\n\t\t\t\t\twhile (\n\t\t\t\t\t\ttotal > this.chunkOverlap ||\n\t\t\t\t\t\t(total + _len > this.chunkSize && total > 0)\n\t\t\t\t\t) {\n\t\t\t\t\t\ttotal -= await this.lengthFunction(currentDoc[0]);\n\t\t\t\t\t\tcurrentDoc.shift();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentDoc.push(d);\n\t\t\ttotal += _len;\n\t\t}\n\t\tconst doc = this.joinDocs(currentDoc, separator);\n\t\tif (doc !== null) {\n\t\t\tdocs.push(doc);\n\t\t}\n\t\treturn docs;\n\t}\n\n\tprivate joinDocs(docs: string[], separator: string): string | null {\n\t\tconst text = docs.join(separator).trim();\n\t\treturn text === '' ? null : text;\n\t}\n\n\tasync createChunks(content: string): Promise<string[]> {\n\t\tconst chunks = await this.splitText(content);\n\t\treturn chunks.map(chunk => chunk.replace(/\\0/g, ''));\n\t}\n}\n\nexport class RecursiveCharacterTextSplitter extends TextSplitter {\n\tprivate separators: string[] = ['\\n\\n', '\\n', ' ', ''];\n\n\tconstructor(config: ChunkingConfig, separators?: string[]) {\n\t\tsuper(config);\n\t\tif (separators) {\n\t\t\tthis.separators = separators;\n\t\t}\n\t}\n\n\tprotected async splitText(text: string): Promise<string[]> {\n\t\treturn this._splitText(text, this.separators);\n\t}\n\n\tprivate async _splitText(\n\t\ttext: string,\n\t\tseparators: string[]\n\t): Promise<string[]> {\n\t\tconst finalChunks: string[] = [];\n\n\t\tlet separator: string = separators[separators.length - 1];\n\t\tlet newSeparators;\n\t\tfor (let i = 0; i < separators.length; i += 1) {\n\t\t\tconst s = separators[i];\n\t\t\tif (s === '') {\n\t\t\t\tseparator = s;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (text.includes(s)) {\n\t\t\t\tseparator = s;\n\t\t\t\tnewSeparators = separators.slice(i + 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst splits = this.splitOnSeparator(text, separator);\n\n\t\tlet goodSplits: string[] = [];\n\t\tconst _separator = this.keepSeparator ? '' : separator;\n\t\tfor (const s of splits) {\n\t\t\tif ((await this.lengthFunction(s)) < this.chunkSize) {\n\t\t\t\tgoodSplits.push(s);\n\t\t\t} else {\n\t\t\t\tif (goodSplits.length) {\n\t\t\t\t\tconst mergedText = await this.mergeSplits(\n\t\t\t\t\t\tgoodSplits,\n\t\t\t\t\t\t_separator\n\t\t\t\t\t);\n\t\t\t\t\tfinalChunks.push(...mergedText);\n\t\t\t\t\tgoodSplits = [];\n\t\t\t\t}\n\t\t\t\tif (!newSeparators) {\n\t\t\t\t\tfinalChunks.push(s);\n\t\t\t\t} else {\n\t\t\t\t\tconst otherInfo = await this._splitText(s, newSeparators);\n\t\t\t\t\tfinalChunks.push(...otherInfo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (goodSplits.length) {\n\t\t\tconst mergedText = await this.mergeSplits(goodSplits, _separator);\n\t\t\tfinalChunks.push(...mergedText);\n\t\t}\n\t\treturn finalChunks;\n\t}\n\n\tprivate splitOnSeparator(text: string, separator: string): string[] {\n\t\tlet splits;\n\t\tif (separator) {\n\t\t\tif (this.keepSeparator) {\n\t\t\t\tconst regexEscapedSeparator = separator.replace(\n\t\t\t\t\t/[/\\-\\\\^$*+?.()|[\\]{}]/g,\n\t\t\t\t\t'\\\\$&'\n\t\t\t\t);\n\t\t\t\tsplits = text.split(new RegExp(`(?=${regexEscapedSeparator})`));\n\t\t\t} else {\n\t\t\t\tsplits = text.split(separator);\n\t\t\t}\n\t\t} else {\n\t\t\tsplits = text.split('');\n\t\t}\n\t\treturn splits.filter(s => s !== '');\n\t}\n\n\tstatic fromLanguage(\n\t\tlanguage: string,\n\t\tconfig: ChunkingConfig\n\t): RecursiveCharacterTextSplitter {\n\t\tconst separators =\n\t\t\tRecursiveCharacterTextSplitter.getSeparatorsForLanguage(language);\n\t\treturn new RecursiveCharacterTextSplitter(config, separators);\n\t}\n\n\tprivate static getSeparatorsForLanguage(language: string): string[] {\n\t\t// Not needed for now.\n\t\tthrow new Error('getSeparatorsForLanguage method not implemented');\n\t}\n}\n","import fs from 'fs/promises';\nimport * as p from '@clack/prompts';\nimport path from 'path';\n\nexport async function saveEmbeddedCommitHashInMemoryConfig({\n\tmemoryName,\n\tembeddedCommitHash\n}: {\n\tmemoryName: string;\n\tembeddedCommitHash: string;\n}): Promise<void> {\n\ttry {\n\t\tconst memoryDir = path.join(\n\t\t\tprocess.cwd(),\n\t\t\t'baseai',\n\t\t\t'memory',\n\t\t\tmemoryName\n\t\t);\n\t\tconst indexFilePath = path.join(memoryDir, 'index.ts');\n\t\tlet fileContents = await fs.readFile(indexFilePath, 'utf-8');\n\n\t\t// Check if the git block exists\n\t\tif (fileContents.includes('git:')) {\n\t\t\t// Find the git block including its indentation\n\t\t\tconst gitBlockMatch = fileContents.match(/(\\t*)git:\\s*{[^}]*?}/);\n\t\t\tif (gitBlockMatch) {\n\t\t\t\tconst [fullMatch, outerIndent] = gitBlockMatch;\n\t\t\t\tconst innerIndent = outerIndent + '\\t';\n\n\t\t\t\t// Parse existing content\n\t\t\t\tconst contentMatch = fullMatch.match(\n\t\t\t\t\t/{\\s*\\n?\\s*(.*?)\\s*\\n?\\s*}/s\n\t\t\t\t);\n\t\t\t\tlet existingContent = contentMatch ? contentMatch[1] : '';\n\n\t\t\t\tlet contentLines = existingContent\n\t\t\t\t\t.split('\\n')\n\t\t\t\t\t.map(line => line.trim().replace(/,\\s*$/, '')) // Remove trailing commas\n\t\t\t\t\t.filter(Boolean);\n\n\t\t\t\tlet newGitContent: string;\n\n\t\t\t\t// If embeddedAt exists, update it while preserving formatting\n\t\t\t\tif (existingContent.includes('embeddedAt:')) {\n\t\t\t\t\tcontentLines = contentLines.map(line => {\n\t\t\t\t\t\tif (line.includes('embeddedAt:')) {\n\t\t\t\t\t\t\treturn `embeddedAt: '${embeddedCommitHash}'`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn line;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Add embeddedAt to existing content\n\t\t\t\t\tcontentLines.push(`embeddedAt: '${embeddedCommitHash}'`);\n\t\t\t\t}\n\n\t\t\t\t// Add commas between lines but not after the last line\n\t\t\t\tnewGitContent = contentLines\n\t\t\t\t\t.map((line, index) => {\n\t\t\t\t\t\tconst isLast = index === contentLines.length - 1;\n\t\t\t\t\t\treturn `${innerIndent}${line}${isLast ? '' : ','}`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('\\n');\n\n\t\t\t\t// Replace the old git block with the new one\n\t\t\t\tfileContents = fileContents.replace(\n\t\t\t\t\t/(\\t*)git:\\s*{[^}]*?}/,\n\t\t\t\t\t`${outerIndent}git: {\\n${newGitContent}\\n${outerIndent}}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Add new git config block\n\t\t\tconst match = fileContents.match(\n\t\t\t\t/(?:const\\s+\\w+\\s*=\\s*\\(\\s*\\)\\s*(?::\\s*\\w+)?\\s*=>\\s*\\({[\\s\\S]*?)(}\\))/\n\t\t\t);\n\n\t\t\tif (match) {\n\t\t\t\t// Insert before the closing parenthesis\n\t\t\t\tconst insertPosition =\n\t\t\t\t\tmatch.index! + match[0].length - match[1].length;\n\t\t\t\tconst prefix = fileContents.slice(0, insertPosition);\n\t\t\t\tconst suffix = fileContents.slice(insertPosition);\n\n\t\t\t\t// Match the indentation of nearby properties\n\t\t\t\tconst indentMatch = prefix.match(/\\n(\\t+)[^\\n]+\\n\\s*$/);\n\t\t\t\tconst baseIndent = indentMatch ? indentMatch[1] : '\\t';\n\t\t\t\tconst innerIndent = baseIndent + '\\t';\n\n\t\t\t\tconst lines = [\n\t\t\t\t\t'enabled: false',\n\t\t\t\t\t\"include: ['**/*']\",\n\t\t\t\t\t'gitignore: false',\n\t\t\t\t\t`embeddedAt: '${embeddedCommitHash}'`\n\t\t\t\t];\n\n\t\t\t\tconst gitConfig = lines\n\t\t\t\t\t.map((line, index) => {\n\t\t\t\t\t\tconst isLast = index === lines.length - 1;\n\t\t\t\t\t\treturn `${innerIndent}${line}${isLast ? '' : ','}`;\n\t\t\t\t\t})\n\t\t\t\t\t.join('\\n');\n\n\t\t\t\tfileContents = `${prefix},\\n${baseIndent}git: {\\n${gitConfig}\\n${baseIndent}}${suffix}`;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Could not find appropriate location to insert git config'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Write the updated contents back to the file\n\t\tawait fs.writeFile(indexFilePath, fileContents, 'utf-8');\n\n\t\tp.log.success(`Updated embeddedAt hash for memory '${memoryName}'.`);\n\t} catch (error) {\n\t\tif (error instanceof Error) {\n\t\t\tp.cancel(\n\t\t\t\t`Failed to save embeddedAt hash for memory '${memoryName}': ${error.message}`\n\t\t\t);\n\t\t} else {\n\t\t\tp.cancel(\n\t\t\t\t`Failed to save embeddedAt hash for memory '${memoryName}': Unknown error`\n\t\t\t);\n\t\t}\n\t\tthrow error;\n\t}\n}\n","import * as p from '@clack/prompts';\nimport { checkMemoryExists } from './check-memory-exist';\nimport { loadMemoryFiles } from './load-memory-files';\nimport color from 'picocolors';\nimport { validateMemoryDocNames } from './lib';\n\ntype Spinner = ReturnType<typeof p.spinner>;\n\nexport const isMemoryDocExist = async ({\n\tmemoryName,\n\tdocumentName,\n\tspinner\n}: {\n\tmemoryName: string;\n\tdocumentName: string;\n\tspinner: Spinner;\n}) => {\n\tif (!memoryName) {\n\t\tp.cancel(\n\t\t\t'Memory name is required. Use --memory or -m flag to specify.'\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\tif (!documentName) {\n\t\tp.cancel(\n\t\t\t'Document name is required. Use --document or -d flag to specify.'\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\t// 1- Check memory exists.\n\tconst { memoryName: validMemoryName, documentName: validDocumentName } =\n\t\tvalidateMemoryDocNames({\n\t\t\tmemoryName,\n\t\t\tdocumentName\n\t\t});\n\n\t// 2- Check if memory exists.\n\tawait checkMemoryExists(validMemoryName);\n\n\t// 3- Load memory data.\n\tspinner.start('Loading docs...');\n\tconst memoryFiles = await loadMemoryFiles(validMemoryName);\n\n\tif (memoryFiles.length === 0) {\n\t\tp.cancel(`No valid documents found in memory '${memoryName}'.`);\n\t\tprocess.exit(1);\n\t}\n\n\t// Find the document file.\n\tconst memoryFile = memoryFiles.find(\n\t\tfile => file.name === validDocumentName\n\t);\n\n\tif (!memoryFile) {\n\t\tspinner.stop(`Stopped!`);\n\t\tp.cancel(\n\t\t\t`Doc: ${color.cyan(validDocumentName)} not found in memory ${validMemoryName}`\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\treturn {\n\t\tmemoryFile,\n\t\tvalidMemoryName,\n\t\tvalidDocumentName\n\t};\n};\n","import * as p from '@clack/prompts';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nexport const checkMemoryExists = async (memoryName: string) => {\n\tconst memoryDir = path.join(process.cwd(), 'baseai', 'memory', memoryName);\n\tconst indexFilePath = path.join(memoryDir, 'index.ts');\n\n\ttry {\n\t\tawait fs.access(memoryDir);\n\t} catch (error) {\n\t\tp.cancel(`Memory '${memoryName}' does not exist.`);\n\t\tprocess.exit(1);\n\t}\n\n\ttry {\n\t\tawait fs.access(indexFilePath);\n\t} catch (error) {\n\t\tp.cancel(\n\t\t\t`Index file for memory '${memoryName}/index.ts' does not exist.`\n\t\t);\n\t\tprocess.exit(1);\n\t}\n\n\treturn true;\n};\n","import { buildMemory } from '@/build';\nimport { heading } from '@/utils/heading';\nimport { isMemoryDocExist } from '@/utils/memory/check-memory-doc-exists';\nimport * as p from '@clack/prompts';\nimport {\n\thandleDeploymentError,\n\thandleError,\n\thandleInvalidConfig,\n\tlistMemoryDocuments,\n\tuploadDocumentsToMemory,\n} from '.';\nimport path from 'path';\nimport fs from 'fs/promises';\nimport { cyan } from '@/utils/formatting';\nimport {\n\tgetMemoryFileNames,\n\tloadMemoryFiles,\n\ttype MemoryDocumentI\n} from '@/utils/memory/load-memory-files';\nimport type { MemoryI } from 'types/memory';\nimport { compareDocumentLists } from '@/utils/memory/compare-docs-list';\nimport { retrieveAuthentication, type Account } from '@/utils/retrieve-credentials';\n\ntype Spinner = ReturnType<typeof p.spinner>;\n\nexport async function deploySingleDocument({\n\tmemoryName,\n\tdocumentName,\n\toverwrite\n}: {\n\tmemoryName: string;\n\tdocumentName: string;\n\toverwrite: boolean;\n}) {\n\tp.intro(heading({ text: 'DEPLOY', sub: 'Deploy a document' }));\n\n\tconst spinner = p.spinner();\n\ttry {\n\t\tconst { validDocumentName, validMemoryName } = await isMemoryDocExist({\n\t\t\tspinner,\n\t\t\tmemoryName,\n\t\t\tdocumentName\n\t\t});\n\n\t\tspinner.stop('Loaded docs');\n\n\t\tawait buildMemory({ memoryName: validMemoryName });\n\t\tconst buildDir = path.join(process.cwd(), '.baseai');\n\t\tconst memoryDir = path.join(buildDir, 'memory');\n\n\t\tconst account = await retrieveAuthentication({ spinner });\n\t\tif (!account) {\n\t\t\tp.outro(\n\t\t\t\t`No account found. Skipping deployment. \\n Run: ${cyan('npx baseai@latest auth')}`\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tawait deployDocument({\n\t\t\taccount,\n\t\t\tspinner,\n\t\t\tmemoryDir,\n\t\t\toverwrite,\n\t\t\tmemoryName: validMemoryName,\n\t\t\tdocumentName: validDocumentName\n\t\t});\n\n\t\tp.outro(\n\t\t\theading({ text: 'DEPLOYED', sub: 'successfully', green: true })\n\t\t);\n\t} catch (error) {\n\t\thandleError({\n\t\t\tspinner,\n\t\t\tmessage: 'An unexpected error occurred',\n\t\t\terror\n\t\t});\n\t}\n}\n\nasync function deployDocument({\n\taccount,\n\tspinner,\n\toverwrite,\n\tmemoryDir,\n\tmemoryName,\n\tdocumentName\n}: {\n\taccount: Account;\n\tspinner: Spinner;\n\tmemoryDir: string;\n\toverwrite: boolean;\n\tmemoryName: string;\n\tdocumentName: string;\n}) {\n\tconst memoryPath = path.join(memoryDir, `${memoryName}.json`);\n\ttry {\n\t\tconst memoryContent = await fs.readFile(memoryPath, 'utf-8');\n\t\tconst memoryObject = JSON.parse(memoryContent);\n\n\t\tif (!memoryObject) {\n\t\t\thandleInvalidConfig({ spinner, name: memoryName, type: 'memory' });\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tp.log.step(`Processing ${documentName} of memory: ${memoryName}`);\n\t\tconst memoryDocs = await loadMemoryFiles(memoryName);\n\n\t\tconst document = memoryDocs.find(doc => doc.name === documentName);\n\n\t\tif (!document) {\n\t\t\tspinner.stop(\n\t\t\t\t`Document ${documentName} not found in memory ${memoryName}`\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tawait handleSingleDocDeploy({\n\t\t\tmemory: memoryObject,\n\t\t\taccount,\n\t\t\tdocument,\n\t\t\toverwrite\n\t\t});\n\n\t\tspinner.stop(\n\t\t\t`Finished processing document ${documentName} of memory ${memoryName}`\n\t\t);\n\t} catch (error) {\n\t\thandleDeploymentError({\n\t\t\tspinner,\n\t\t\tname: memoryName,\n\t\t\terror,\n\t\t\ttype: 'memory'\n\t\t});\n\t\tprocess.exit(1);\n\t}\n}\n\nexport async function handleSingleDocDeploy({\n\tmemory,\n\taccount,\n\tdocument,\n\toverwrite\n}: {\n\tmemory: MemoryI;\n\taccount: Account;\n\tdocument: MemoryDocumentI;\n\toverwrite: boolean;\n}) {\n\tp.log.info(\n\t\t`Checking \"${memory.name}\" memory for document \"${document.name}\".`\n\t);\n\n\t// Fetch the existing documents\n\tconst prodDocs = await listMemoryDocuments({\n\t\taccount,\n\t\tmemoryName: memory.name\n\t});\n\n\t// If overwrite is present, deploy.\n\tif (overwrite) {\n\t\tawait uploadDocumentsToMemory({\n\t\t\taccount,\n\t\t\tdocuments: [document],\n\t\t\tname: memory.name\n\t\t});\n\t\tp.log.success(\n\t\t\t`Document \"${document.name}\" uploaded to memory \"${memory.name}\".`\n\t\t);\n\t\treturn;\n\t}\n\n\t// Get the list of local document names\n\tconst localDocs = await getMemoryFileNames(memory.name);\n\n\t// If it is the only that does not exist in prod, deploy.\n\tconst onlyDeployDocMissing = checkOnlyDeployDocumentMissing({\n\t\tlocalDocs,\n\t\tprodDocs,\n\t\tdeployDoc: document.name\n\t});\n\n\tif (onlyDeployDocMissing) {\n\t\tawait uploadDocumentsToMemory({\n\t\t\taccount,\n\t\t\tdocuments: [document],\n\t\t\tname: memory.name\n\t\t});\n\t\tp.log.success(\n\t\t\t`Document \"${document.name}\" uploaded to memory \"${memory.name}\".`\n\t\t);\n\t\treturn;\n\t}\n\n\tconst existInProd = prodDocs.includes(document.name);\n\n\tif (existInProd) {\n\t\tp.log.info(\n\t\t\t`Document \"${document.name}\" already exists in memory \"${memory.name}\".`\n\t\t);\n\n\t\tp.log.info(\n\t\t\t`Use the --overwrite flag to overwrite the existing document in memory.\\n`\n\t\t);\n\t\treturn;\n\t}\n\n\t// Compare the documents\n\tconst { isProdSupersetOfLocal, areMutuallyExclusive, areOverlapping } =\n\t\tcompareDocumentLists({\n\t\t\tlocalDocs,\n\t\t\tprodDocs\n\t\t});\n\n\tif (isProdSupersetOfLocal || areMutuallyExclusive || areOverlapping) {\n\t\tp.log.warning(\n\t\t\t`The documents in memory \"${memory.name}\" are not in sync with the production memory.`\n\t\t);\n\n\t\tp.log.warning(\n\t\t\t`Memory deploy is currently in beta. We only support overwriting the prod memory on Langbase.com.`\n\t\t);\n\n\t\tp.log.info(\n\t\t\t`Use the --overwrite flag to overwrite the existing document in memory.\\n`\n\t\t);\n\t\treturn;\n\t}\n}\n\nexport function checkOnlyDeployDocumentMissing({\n\tlocalDocs,\n\tprodDocs,\n\tdeployDoc\n}: {\n\tlocalDocs: string[];\n\tprodDocs: string[];\n\tdeployDoc: string;\n}): boolean {\n\t// Convert arrays to Sets for efficient lookup\n\tconst localDocSet = new Set(localDocs);\n\tconst prodDocSet = new Set(prodDocs);\n\n\t// Check if the deployed document is in local but not in prod\n\tconst deployDocMissing =\n\t\tlocalDocSet.has(deployDoc) && !prodDocSet.has(deployDoc);\n\n\t// If sizes don't match (excluding deployDoc), sets can't be equal\n\tif (localDocSet.size !== prodDocSet.size + 1) {\n\t\treturn false;\n\t}\n\n\t// Check if all docs in prod are in local (excluding deployDoc)\n\tfor (const doc of prodDocSet) {\n\t\tif (!localDocSet.has(doc)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// At this point, we know:\n\t// 1. Local has exactly one more doc than prod (deployDoc)\n\t// 2. All docs in prod are in local\n\t// Therefore, local and prod are the same except for deployDoc\n\n\treturn deployDocMissing;\n}\n","import { heading } from '@/utils/heading';\nimport * as p from '@clack/prompts';\nimport { outro } from '@clack/prompts';\nimport { serve } from '@hono/node-server';\nimport figures from 'figures';\nimport { Hono, type Context } from 'hono';\nimport { prettyJSON } from 'hono/pretty-json';\nimport { trimTrailingSlash } from 'hono/trailing-slash';\nimport color from 'picocolors';\nimport type { HonoEnv } from './hono/env';\nimport { handleError } from './hono/errors';\nimport { customCors } from './middleware/custom-cors';\nimport { poweredBy } from './middleware/powered-by';\nimport { preFlight } from './middleware/pre-flight';\nimport { registerRoot } from './routes/base';\nimport { registerV1PipesRun } from './routes/v1/pipes/run';\n\nexport async function runBaseServer() {\n\tconst app = new Hono();\n\n\tapp.use(trimTrailingSlash());\n\tapp.use('*', customCors);\n\tapp.use(prettyJSON());\n\tapp.use(poweredBy());\n\tapp.use(preFlight());\n\tapp.onError((err, c) => {\n\t\treturn handleError(err, c as unknown as Context<HonoEnv, any, {}>);\n\t});\n\n\t// Routes.\n\tregisterRoot(app);\n\tregisterV1PipesRun(app);\n\n\tconst port = 9000;\n\n\ttry {\n\t\tp.intro(heading({ text: 'DEV', sub: 'BaseAI dev server' }));\n\n\t\tconst server = serve({\n\t\t\tfetch: app.fetch,\n\t\t\tport\n\t\t});\n\n\t\tserver.on('error', (e: NodeJS.ErrnoException) => {\n\t\t\tif (e.code === 'EADDRINUSE') {\n\t\t\t\tp.log.error(\n\t\t\t\t\tcolor.red(`Error: Port ${port} is already in use.`)\n\t\t\t\t);\n\t\t\t\tp.log.info(\n\t\t\t\t\t`Please close the other application using 9000 port. And try again.`\n\t\t\t\t);\n\n\t\t\t\tprocess.exit(1);\n\t\t\t} else {\n\t\t\t\tconsole.error('Unexpected server error:', e);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t});\n\n\t\tserver.on('listening', () => {\n\t\t\toutro(\n\t\t\t\t`BaseAI server running on: ${color.green(`http://localhost:${port}`)}`\n\t\t\t);\n\t\t\tconsole.log(\n\t\t\t\t`When needed you can press ${color.cyan('Ctrl + C')} to shut down.`\n\t\t\t);\n\t\t});\n\n\t\t// Add immediate shutdown handler using Clack\n\t\tprocess.on('SIGINT', () => {\n\t\t\tconst spinner = p.spinner();\n\t\t\tspinner.start('Shutting down server');\n\n\t\t\tserver.close(() => {\n\t\t\t\tspinner.stop('Shutting down the server …');\n\t\t\t\tp.outro(\n\t\t\t\t\t`${color.green(figures.tick)} BaseAI server has been gracefully shut down.`\n\t\t\t\t);\n\t\t\t\tprocess.exit(0);\n\t\t\t});\n\t\t});\n\t} catch (error: any) {\n\t\tp.outro(`Error: Unable to start server. ${error.message}`);\n\t\tprocess.exit(1);\n\t}\n}\n","import { z } from '@hono/zod-openapi';\nimport type { Context } from 'hono';\nimport { HTTPException } from 'hono/http-exception';\nimport type { StatusCode } from 'hono/utils/http-status';\nimport type { RateLimitErrorResponse } from 'types/api';\nimport { type AnyZodObject, ZodError } from 'zod';\nimport { generateErrorMessage } from 'zod-error';\nimport { fromZodError } from 'zod-validation-error';\nimport type { HonoEnv } from '../hono/env';\n\nconst ErrorCode = z.enum([\n\t'BAD_REQUEST',\n\t'FORBIDDEN',\n\t'INTERNAL_SERVER_ERROR',\n\t'USAGE_EXCEEDED',\n\t'DISABLED',\n\t'NOT_FOUND',\n\t'CONFLICT',\n\t'RATE_LIMITED',\n\t'UNAUTHORIZED',\n\t'PRECONDITION_FAILED',\n\t'INSUFFICIENT_PERMISSIONS'\n]);\n\nexport function errorSchemaFactory(code: z.ZodEnum<any>) {\n\treturn z.object({\n\t\terror: z.object({\n\t\t\tcode: code.openapi({\n\t\t\t\tdescription: 'A machine readable error code.',\n\t\t\t\texample: code._def.values.at(0)\n\t\t\t}),\n\t\t\tdocs: z.string().openapi({\n\t\t\t\tdescription:\n\t\t\t\t\t'A link to our documentation with more details about this error code',\n\t\t\t\texample: `https://langbase.com/docs/api-reference/errors/${code._def.values\n\t\t\t\t\t.at(0)\n\t\t\t\t\t.toLowerCase()}`\n\t\t\t}),\n\t\t\tmessage: z.string().openapi({\n\t\t\t\tdescription: 'A human readable explanation of what went wrong'\n\t\t\t})\n\t\t})\n\t});\n}\n\nexport const ErrorSchema = z.object({\n\tsuccess: z.literal(false).openapi({\n\t\tdescription: 'Indicates that the request was not successful'\n\t}),\n\terror: z.object({\n\t\tcode: ErrorCode.openapi({\n\t\t\tdescription: 'A machine readable error code.',\n\t\t\texample: 'INTERNAL_SERVER_ERROR'\n\t\t}),\n\t\tstatus: z.number().openapi({ description: 'The HTTP status code' }),\n\t\tmessage: z.string().openapi({\n\t\t\tdescription: 'A human readable explanation of what went wrong'\n\t\t}),\n\t\tdocs: z.string().openapi({\n\t\t\tdescription:\n\t\t\t\t'A link to our documentation with more details about this error code',\n\t\t\texample:\n\t\t\t\t'https://langbase.com/docs/api-reference/errors/bad_request'\n\t\t}),\n\t\tcause: z.instanceof(ZodError).optional(),\n\t\trateLimit: z\n\t\t\t.object({\n\t\t\t\tlimit: z.number().openapi({\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The maximum number of requests that you can make per hour'\n\t\t\t\t}),\n\t\t\t\tremaining: z.number().openapi({\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The number of requests remaining in the current rate limit window'\n\t\t\t\t}),\n\t\t\t\treset: z.number().openapi({\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'The time at which the current rate limit window resets, in UTC epoch seconds'\n\t\t\t\t})\n\t\t\t})\n\t\t\t.optional()\n\t})\n});\n\nexport type ErrorCodesType = z.infer<typeof ErrorCode>;\nexport type ErrorSchemaType = z.infer<typeof ErrorSchema>;\n\nfunction codeToStatus(code: ErrorCodesType): StatusCode {\n\tswitch (code) {\n\t\tcase 'BAD_REQUEST':\n\t\t\treturn 400;\n\t\tcase 'UNAUTHORIZED':\n\t\t\treturn 401;\n\t\tcase 'FORBIDDEN':\n\t\tcase 'DISABLED':\n\t\tcase 'INSUFFICIENT_PERMISSIONS':\n\t\tcase 'USAGE_EXCEEDED':\n\t\t\treturn 403;\n\t\tcase 'NOT_FOUND':\n\t\t\treturn 404;\n\t\tcase 'CONFLICT':\n\t\t\treturn 409;\n\t\tcase 'PRECONDITION_FAILED':\n\t\t\treturn 412;\n\t\tcase 'RATE_LIMITED':\n\t\t\treturn 429;\n\t\tcase 'INTERNAL_SERVER_ERROR':\n\t\t\treturn 500;\n\t}\n}\n\nexport class ApiError extends HTTPException {\n\tpublic readonly code: ErrorCodesType;\n\tpublic readonly success: boolean;\n\tpublic readonly rateLimit?: RateLimitErrorResponse;\n\tpublic readonly docs?: string;\n\n\tconstructor({\n\t\tstatus,\n\t\tcode,\n\t\tmessage,\n\t\trateLimit,\n\t\tdocs\n\t}: {\n\t\tstatus?: StatusCode;\n\t\tcode: ErrorCodesType;\n\t\tmessage: string;\n\t\trateLimit?: RateLimitErrorResponse;\n\t\tdocs?: string;\n\t}) {\n\t\tsuper(status || codeToStatus(code), { message });\n\t\tthis.code = code;\n\t\tthis.success = false;\n\t\tthis.rateLimit = rateLimit;\n\t\tthis.docs = docs;\n\t}\n}\n\nexport class ApiErrorZod extends HTTPException {\n\tpublic readonly code: ErrorCodesType;\n\n\tconstructor({\n\t\tcode,\n\t\tvalidationResult,\n\t\tcustomMessage\n\t}: {\n\t\tcode: ErrorCodesType;\n\t\tvalidationResult: { success: boolean; error?: ZodError };\n\t\tcustomMessage?: string;\n\t}) {\n\t\tlet message = '';\n\t\tif (validationResult.error) {\n\t\t\tconst _customMessage = customMessage ? customMessage : ``;\n\t\t\tlet _validationMessage = fromZodError(\n\t\t\t\tvalidationResult.error\n\t\t\t).toString();\n\t\t\tmessage = `${_customMessage} HINT: ${_validationMessage}`.trim();\n\t\t}\n\n\t\tsuper(codeToStatus(code), { message });\n\t\tthis.code = code;\n\t\tthis.cause = validationResult.error;\n\t}\n\n\t// Helper static method to simplify throwing errors\n\tstatic handle({\n\t\tcode,\n\t\tresult,\n\t\tmessage\n\t}: {\n\t\tcode: ErrorCodesType;\n\t\tresult: ReturnType<AnyZodObject['safeParse']>;\n\t\tmessage?: string;\n\t}) {\n\t\tif (!result.success) {\n\t\t\tthrow new ApiErrorZod({\n\t\t\t\tcode,\n\t\t\t\tvalidationResult: result,\n\t\t\t\tcustomMessage: message\n\t\t\t});\n\t\t}\n\t}\n}\n\n/**\n * Handles errors and returns a response object.\n *\n * @param err - The error object.\n * @param c - The context object.\n * @returns The response object.\n */\nexport function handleError(err: Error, c: Context<HonoEnv>): Response {\n\tif (err instanceof ApiError) {\n\t\treturn c.json<ErrorSchemaType, StatusCode>(\n\t\t\t{\n\t\t\t\tsuccess: false,\n\t\t\t\terror: {\n\t\t\t\t\tcode: err.code,\n\t\t\t\t\tstatus: err.status,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tdocs:\n\t\t\t\t\t\terr.docs ||\n\t\t\t\t\t\t`https://langbase.com/docs/api-reference/errors/${err.code.toLowerCase()}`,\n\t\t\t\t\trateLimit: err.rateLimit as\n\t\t\t\t\t\t| RateLimitErrorResponse\n\t\t\t\t\t\t| undefined\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ status: err.status }\n\t\t);\n\t}\n\n\tif (err instanceof ApiErrorZod) {\n\t\treturn c.json<ErrorSchemaType, StatusCode>(\n\t\t\t{\n\t\t\t\tsuccess: false,\n\t\t\t\terror: {\n\t\t\t\t\tcode: err.code,\n\t\t\t\t\tstatus: err.status,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tdocs: `https://langbase.com/docs/api-reference/errors/${err.code.toLowerCase()}`,\n\t\t\t\t\tcause: err.cause as ZodError | undefined\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ status: err.status }\n\t\t);\n\t}\n\n\treturn c.json<ErrorSchemaType, StatusCode>(\n\t\t{\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\t\tstatus: 500,\n\t\t\t\tmessage: 'Something unexpected happened.',\n\t\t\t\tdocs: 'https://langbase.com/docs/api-reference/errors/internal_server_error'\n\t\t\t}\n\t\t},\n\t\t{ status: 500 }\n\t);\n}\n\nexport function errorResponse(\n\tc: Context,\n\tcode: ErrorCodesType,\n\tmessage: string\n) {\n\treturn c.json<ErrorSchemaType, StatusCode>(\n\t\t{\n\t\t\tsuccess: false,\n\t\t\terror: {\n\t\t\t\tcode: code,\n\t\t\t\tstatus: codeToStatus(code),\n\t\t\t\tmessage,\n\t\t\t\tdocs: `https://langbase.com/docs/api-reference/errors/${code.toLowerCase()}`\n\t\t\t}\n\t\t},\n\t\t{ status: codeToStatus(code) }\n\t);\n}\n\nexport function handleZodError(\n\tresult:\n\t\t| {\n\t\t\t\tsuccess: true;\n\t\t\t\tdata: any;\n\t\t  }\n\t\t| {\n\t\t\t\tsuccess: false;\n\t\t\t\terror: ZodError;\n\t\t  },\n\tc: Context\n) {\n\tif (!result.success) {\n\t\treturn c.json<ErrorSchemaType, StatusCode>(\n\t\t\t{\n\t\t\t\tsuccess: false,\n\t\t\t\terror: {\n\t\t\t\t\tcode: 'BAD_REQUEST',\n\t\t\t\t\tstatus: 400,\n\t\t\t\t\tdocs: 'https://langbase.com/docs/api-reference/errors/bad_request',\n\t\t\t\t\tmessage: generateErrorMessage(result.error.issues, {\n\t\t\t\t\t\tmaxErrors: 1,\n\t\t\t\t\t\tdelimiter: {\n\t\t\t\t\t\t\tcomponent: ': '\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpath: {\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\ttype: 'objectNotation',\n\t\t\t\t\t\t\tlabel: ''\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcode: {\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tlabel: ''\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmessage: {\n\t\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\t\tlabel: ''\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuffix: ', See \"https://langbase.com/docs/api-reference\" for more details'\n\t\t\t\t\t}),\n\t\t\t\t\tcause: result.error\n\t\t\t\t}\n\t\t\t},\n\t\t\t{ status: 400 }\n\t\t);\n\t}\n}\n","import type { MiddlewareHandler } from 'hono';\nimport { cors } from 'hono/cors';\n\n// Custom CORS middleware configuration\nexport const customCors: MiddlewareHandler = cors({\n\torigin: '*', // Equivalent to 'Access-Control-Allow-Origin'\n\tmaxAge: 86400, // Equivalent to 'Access-Control-Max-Age'\n\tallowMethods: ['GET', 'POST', 'OPTIONS'], // Equivalent to 'Access-Control-Allow-Methods'\n\tallowHeaders: ['Content-Type', 'Authorization'] // Equivalent to 'Access-Control-Allow-Headers'\n});\n","import type { MiddlewareHandler } from 'hono';\n\nexport const poweredBy = (): MiddlewareHandler => {\n\treturn async function poweredBy(c, next) {\n\t\tawait next();\n\t\tc.res.headers.set('lb-powered-by', 'Langbase');\n\t\tc.res.headers.set('powered-by', 'BaseAI');\n\t\tc.res.headers.set('env', 'local');\n\t};\n};\n","import {MiddlewareHandler} from 'hono';\n\nexport const preFlight = (): MiddlewareHandler => {\n\treturn async function preFlight(c, next) {\n\t\tif (c.req.method === 'OPTIONS') {\n\t\t\treturn new Response(null);\n\t\t}\n\t\tawait next();\n\t};\n};\n","export const registerRoot = (app: any) =>\n\tapp.get('/', (c: any) => {\n\t\treturn c.json({\n\t\t\tsuccess: true,\n\t\t\tmessage: 'BaseAI Local API',\n\t\t\tlink: 'https://langbase.com/docs'\n\t\t});\n\t});\n","import type { Message, Pipe } from 'types/pipe';\n\nexport function getPipeFewShotsMessages(pipe: Pipe): Message[] {\n\tconst fewShotMessages: Message[] = pipe.messages.filter(\n\t\tm => m.role !== 'system'\n\t);\n\n\tif (fewShotMessages && fewShotMessages.length > 0) {\n\t\treturn fewShotMessages;\n\t}\n\n\treturn [];\n}\n","export type Models =\n\t| 'Audio models'\n\t| 'Embedding models'\n\t| 'Fine-tuning models'\n\t| 'GPT-4'\n\t| 'GPT-4 Turbo'\n\t| 'GPT-3.5 Turbo'\n\t| 'InstructGPT'\n\t| 'Base models'\n\t| 'Image models';\n\nexport type GPT4Model =\n\t| 'gpt-4'\n\t| 'gpt-4-0314'\n\t| 'gpt-4-0613'\n\t| 'gpt-4-32k'\n\t| 'gpt-4-32k-0314'\n\t| 'gpt-4-1106-preview'\n\t| 'gpt-4-1106-vision-preview';\n\nexport type GPT3Model =\n\t| 'gpt-3.5-turbo'\n\t| 'gpt-3.5-turbo-0301'\n\t| 'gpt-3.5-turbo-0613'\n\t| 'gpt-3.5-turbo-16k-0613'\n\t| 'gpt-3.5-turbo-1106';\n\nexport type ChatCompletionModel = GPT3Model | GPT4Model;\n\nexport type CompletionModel =\n\t| 'text-ada-001'\n\t| 'text-babbage-001'\n\t| 'text-curie-001'\n\t| 'text-davinci-002'\n\t| 'text-davinci-003'\n\t| 'text-davinci:003';\n\nexport type EditModel = 'text-davinci-edit-001' | 'code-davinci-edit-001';\n\nexport type FineTunedModel =\n\t| 'text-davinci-003'\n\t| 'text-davinci-002'\n\t| 'text-curie-001'\n\t| 'text-babbage-001'\n\t| 'text-ada-001';\n\nexport type AudioModel = 'whisper-1' | 'whisper-2';\n\nexport type EmbeddingModel =\n\t| 'text-embedding-ada-002'\n\t| 'text-embedding-ada-002-v2'\n\t| 'text-search-ada-doc-001';\n\nexport type ImageResolution = '256x256' | '512x512' | '1024x1024';\n\nexport type Snapshot =\n\t| ChatCompletionModel\n\t| CompletionModel\n\t| EditModel\n\t| FineTunedModel\n\t| AudioModel\n\t| EmbeddingModel\n\t| ImageResolution;\n\nexport type CompletionModelCost = {\n\tprompt: number;\n\tcompletion: number;\n};\n\nexport type CostPerUnit = {\n\t[key in Snapshot | string]?: CompletionModelCost | number;\n};\n\nexport const IMAGE_MODEL_COST = {\n\t'1024x1024': 0.02, // per 1 image\n\t'512x512': 0.018, // per 1 image\n\t'256x256': 0.016 // per 1 image\n};\n\nexport const OPEN_AI: string = 'OpenAI';\nexport const ANTHROPIC: string = 'Anthropic';\nexport const TOGETHER_AI: string = 'Together';\nexport const GOOGLE: string = 'Google';\nexport const GROQ: string = 'Groq';\nexport const COHERE: string = 'Cohere';\nexport const FIREWORKS_AI: string = 'Fireworks AI';\nexport const PERPLEXITY: string = 'Perplexity';\n\n// Not being used yet\nexport const DEEPINFRA: string = 'deepinfra';\nexport const BEDROCK: string = 'bedrock';\nexport const AZURE_OPEN_AI: string = 'azure-openai';\nexport const X_AI: string = 'xAI';\nexport const OLLAMA: string = 'ollama';\n\ninterface Model {\n\tid: string;\n\tprovider: string;\n\tpromptCost: number;\n\tcompletionCost: number;\n\trequestCost?: number;\n\ttoolSupport?: {\n\t\ttoolChoice: boolean;\n\t\tparallelToolCalls: boolean;\n\t};\n}\n\ninterface ModelsByProviderInclCosts {\n\t[provider: string]: Model[];\n}\n\nexport const modelsByProvider: ModelsByProviderInclCosts = {\n\t[OPEN_AI]: [\n\t\t{\n\t\t\tid: 'gpt-4o',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 5.0,\n\t\t\tcompletionCost: 15.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4o-2024-08-06',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 2.5,\n\t\t\tcompletionCost: 10.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4o-mini',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 0.15,\n\t\t\tcompletionCost: 0.6,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-turbo',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-turbo-preview',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-0125-preview',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-1106-preview',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 10.0,\n\t\t\tcompletionCost: 30.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 30.0,\n\t\t\tcompletionCost: 60.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-0613',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 30.0,\n\t\t\tcompletionCost: 60.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-4-32k',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 60.0,\n\t\t\tcompletionCost: 120.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo-0125',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo-1106',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 1.0,\n\t\t\tcompletionCost: 2.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gpt-3.5-turbo-16k',\n\t\t\tprovider: OPEN_AI,\n\t\t\tpromptCost: 3.0,\n\t\t\tcompletionCost: 4.0,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t}\n\t],\n\t[TOGETHER_AI]: [\n\t\t{\n\t\t\tid: 'meta-llama/Llama-3.3-70B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.88,\n\t\t\tcompletionCost: 0.88,\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 5,\n\t\t\tcompletionCost: 5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.88,\n\t\t\tcompletionCost: 0.88,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.18,\n\t\t\tcompletionCost: 0.18,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-3-70b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-3-8b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'togethercomputer/Llama-2-7B-32K-Instruct',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-2-13b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.225,\n\t\t\tcompletionCost: 0.225\n\t\t},\n\t\t{\n\t\t\tid: 'meta-llama/Llama-2-70b-chat-hf',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t},\n\t\t{\n\t\t\tid: 'google/gemma-7b-it',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'google/gemma-2b-it',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.1,\n\t\t\tcompletionCost: 0.1\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mistral-7B-Instruct-v0.1',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mistral-7B-Instruct-v0.2',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mixtral-8x7B-Instruct-v0.1',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 0.6,\n\t\t\tcompletionCost: 0.6,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'mistralai/Mixtral-8x22B-Instruct-v0.1',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 1.2,\n\t\t\tcompletionCost: 1.2\n\t\t},\n\t\t{\n\t\t\tid: 'databricks/dbrx-instruct',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tpromptCost: 1.2,\n\t\t\tcompletionCost: 1.2\n\t\t}\n\t],\n\t[ANTHROPIC]: [\n\t\t{\n\t\t\tid: 'claude-3-5-sonnet-latest',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-5-sonnet-20240620',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-opus-20240229',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 15,\n\t\t\tcompletionCost: 75,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-sonnet-20240229',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-haiku-20240307',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 0.25,\n\t\t\tcompletionCost: 1.25,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'claude-3-5-haiku-20241022',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t}\n\t],\n\t[GROQ]: [\n\t\t{\n\t\t\tid: 'llama-3.3-70b-versatile',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79,\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-70b-versatile',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-8b-instant',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79\n\t\t},\n\t\t{\n\t\t\tid: 'llama3-70b-8192',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.59,\n\t\t\tcompletionCost: 0.79\n\t\t},\n\t\t{\n\t\t\tid: 'llama3-8b-8192',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.05,\n\t\t\tcompletionCost: 0.1\n\t\t},\n\t\t{\n\t\t\tid: 'mixtral-8x7b-32768',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.27,\n\t\t\tcompletionCost: 0.27\n\t\t},\n\t\t{\n\t\t\tid: 'gemma2-9b-it',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'gemma-7b-it',\n\t\t\tprovider: GROQ,\n\t\t\tpromptCost: 0.07,\n\t\t\tcompletionCost: 0.07\n\t\t}\n\t],\n\t[GOOGLE]: [\n\t\t{\n\t\t\tid: 'gemini-1.5-pro-latest',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 3.5,\n\t\t\tcompletionCost: 10.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gemini-1.5-flash-latest',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 0.075,\n\t\t\tcompletionCost: 0.3,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gemini-1.5-flash-8b-latest',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 0.0375,\n\t\t\tcompletionCost: 0.15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: true\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tid: 'gemini-pro',\n\t\t\tprovider: GOOGLE,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: false,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t}\n\t],\n\t[COHERE]: [\n\t\t{\n\t\t\tid: 'command-r',\n\t\t\tprovider: COHERE,\n\t\t\tpromptCost: 0.5,\n\t\t\tcompletionCost: 1.5\n\t\t},\n\t\t{\n\t\t\tid: 'command-r-plus',\n\t\t\tprovider: COHERE,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 15\n\t\t}\n\t],\n\t[FIREWORKS_AI]: [\n\t\t{\n\t\t\tid: 'llama-v3p3-70b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.88,\n\t\t\tcompletionCost: 0.88,\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3p1-405b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 3\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3p1-70b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3p1-8b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t},\n\t\t{\n\t\t\tid: 'yi-large',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 3,\n\t\t\tcompletionCost: 3\n\t\t},\n\t\t{\n\t\t\tid: 'llama-v3-70b-instruct',\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tpromptCost: 0.9,\n\t\t\tcompletionCost: 0.9\n\t\t}\n\t],\n\t[PERPLEXITY]: [\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-huge-128k-online',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 5,\n\t\t\tcompletionCost: 5,\n\t\t\trequestCost: 0.005\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-large-128k-online',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 1,\n\t\t\trequestCost: 0.005\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-small-128k-online',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2,\n\t\t\trequestCost: 0.005\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-large-128k-chat',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 1,\n\t\t\tcompletionCost: 1\n\t\t},\n\t\t{\n\t\t\tid: 'llama-3.1-sonar-small-128k-chat',\n\t\t\tprovider: PERPLEXITY,\n\t\t\tpromptCost: 0.2,\n\t\t\tcompletionCost: 0.2\n\t\t}\n\t],\n\t[X_AI]: [\n\t\t{\n\t\t\tid: 'grok-beta',\n\t\t\tprovider: X_AI,\n\t\t\tpromptCost: 5,\n\t\t\tcompletionCost: 15,\n\t\t\ttoolSupport: {\n\t\t\t\ttoolChoice: true,\n\t\t\t\tparallelToolCalls: false\n\t\t\t}\n\t\t}\n\t]\n};\n\n// Keep it synced with API. Add model IDs.\nexport const jsonModeModels = [\n\t'gpt-4o',\n\t'gpt-4o-2024-08-06',\n\t'gpt-4o-mini',\n\t'gpt-4-turbo',\n\t'gpt-4-turbo-preview',\n\t'gpt-4-0125-preview',\n\t'gpt-3.5-turbo',\n\t'gpt-3.5-turbo-0125',\n\t'gpt-3.5-turbo-1106',\n\t'gpt-4-1106-preview',\n\t'mistralai/Mistral-7B-Instruct-v0.1',\n\t'mistralai/Mixtral-8x7B-Instruct-v0.1',\n\t'gemini-1.5-pro-latest',\n\t'gemini-1.5-flash-latest'\n];\n","import {OPEN_AI} from './models';\n\nexport const CONTENT_TYPES = {\n\tAPPLICATION_JSON: 'application/json',\n\tMULTIPART_FORM_DATA: 'multipart/form-data',\n\tEVENT_STREAM: 'text/event-stream',\n\tAUDIO_MPEG: 'audio/mpeg',\n\tAPPLICATION_OCTET_STREAM: 'application/octet-stream',\n\tGENERIC_AUDIO_PATTERN: 'audio',\n\tPLAIN_TEXT: 'text/plain',\n\tHTML: 'text/html',\n\tGENERIC_IMAGE_PATTERN: 'image/',\n};\n\nexport const REQUEST_TIMEOUT_STATUS_CODE = 408;\nexport const defaultJsonPrompt = 'Output should be in JSON format.';\nexport const defaultRagPrompt = `Below is some CONTEXT for you to answer the questions. ONLY answer from the CONTEXT. CONTEXT consists of multiple information chunks. Each chunk has a source mentioned at the end.\\n\\nFor each piece of response you provide, cite the source in brackets like so: [1].\\n\\nAt the end of the answer, always list each source with its corresponding number and provide the document name. like so [1] Filename.doc.\\n\\nIf you don't know the answer, just say that you don't know. Ask for more context and better questions if needed.`;\n\nexport const defaultPipeVersionInsert = {\n\tmeta: {\n\t\tnumber: '1',\n\t\tstream: true,\n\t\tstore: true,\n\t\tdebug: false,\n\t\tjson: false,\n\t},\n\tmodel: {\n\t\tname: 'gpt-4o-mini',\n\t\tprovider: OPEN_AI,\n\t\ttone: 'Custom',\n\t\tparams: {\n\t\t\tmax_tokens: 1000,\n\t\t\ttemperature: 0.7,\n\t\t\ttop_p: 1,\n\t\t\tfrequency_penalty: 0,\n\t\t\tpresence_penalty: 0,\n\t\t\tstop: [],\n\t\t},\n\t\ttool_choice: 'auto',\n\t\tparallel_tool_calls: true,\n\t},\n\tprompt: {\n\t\topening: `Welcome to Langbase. Prompt away!`,\n\t\tsystem: `You're a helpful AI assistant.`,\n\t\tsafety: '',\n\t\tmessages: [],\n\t\tvariables: [],\n\t\tjson: '',\n\t\trag: '',\n\t},\n\tmemorysets: [],\n\tpipe_id: '',\n\tpreview: false,\n\tfunctions: [],\n};\n","/**\n * Adds JSON mode if enabled and supported by the current model\n *\n * @param {string} pipe - The pipe config.\n * @param {string} prompt - The system prompt.\n * @returns {string} The prompt with JSON mode line added.\n */\n\nimport { jsonModeModels } from '@/data/models';\nimport { defaultJsonPrompt } from '@/dev/data/globals';\nimport type { Pipe } from 'types/pipe';\n\nexport function addJsonMode({\n\tpipe,\n\tsystemPrompt\n}: {\n\tpipe: Pipe;\n\tsystemPrompt: string;\n}) {\n\t// Return the system prompt if JSON mode is not enabled\n\tif (!pipe?.json) return systemPrompt;\n\n\tconst modelName = pipe.model.split(':')[1];\n\t// Return the system prompt if JSON mode is not supported by the current model\n\tif (!jsonModeModels.includes(modelName)) return systemPrompt;\n\n\tconst jsonModePrompt = getJsonPrompt(pipe);\n\n\t// Add JSON mode if enabled & supported by model\n\treturn `${systemPrompt}\\n\\n${jsonModePrompt}`;\n}\n\nfunction getJsonPrompt(pipe: Pipe): string {\n\tconst jsonPrompt =\n\t\tpipe.messages.find(m => m.role === 'system' && m.name === 'json')\n\t\t\t?.content || '';\n\n\t// Use default prompt if json prompt is empty or not set\n\tconst useDefaultPrompt = jsonPrompt === '';\n\treturn useDefaultPrompt ? defaultJsonPrompt : jsonPrompt;\n}\n","import { defaultRagPrompt } from '@/utils/memory/constants';\nimport type { SimilarChunk } from '@/utils/memory/db/lib';\nimport type { Message, Pipe } from 'types/pipe';\nimport { addJsonMode } from './add-json-mode';\n\nexport function getSystemPromptMessage({\n\tpipe,\n\tsimilarChunks\n}: {\n\tpipe: Pipe;\n\tsimilarChunks: SimilarChunk[] | undefined;\n}) {\n\tlet systemPrompt = '';\n\n\tsystemPrompt = addSystemPrompt(pipe);\n\tsystemPrompt = addSafetyPrompt({ pipe, systemPrompt });\n\tsystemPrompt = addJsonMode({ pipe, systemPrompt });\n\tsystemPrompt = addRagPromptWithAugmentedContext({\n\t\tpipe,\n\t\tsystemPrompt,\n\t\tsimilarChunks\n\t});\n\n\treturn [{ role: 'system', content: systemPrompt }] as Message[];\n}\n\nfunction addSystemPrompt(pipe: Pipe): string {\n\tconst defualtSystemPrompt = `You are a helpful AI Chat assistant`;\n\tconst systemPrompt =\n\t\tpipe.messages.find(m => m.role === 'system' && !m.name)?.content || '';\n\tconst hasSystemPrompt = systemPrompt !== '';\n\n\tconst systemPromptWithoutSafety = hasSystemPrompt\n\t\t? systemPrompt\n\t\t: defualtSystemPrompt;\n\n\treturn systemPromptWithoutSafety;\n}\n\nfunction getSafetyPrompt(pipe: Pipe): string {\n\treturn (\n\t\tpipe.messages.find(m => m.role === 'system' && m.name === 'safety')\n\t\t\t?.content || ''\n\t);\n}\n\nfunction addSafetyPrompt({\n\tpipe,\n\tsystemPrompt\n}: {\n\tpipe: Pipe;\n\tsystemPrompt: string;\n}): string {\n\tlet safetyPrompt = getSafetyPrompt(pipe);\n\tconst hasSafetyPrompt = safetyPrompt !== '';\n\n\tsafetyPrompt = hasSafetyPrompt\n\t\t? `\"\"\"SAFETY GUIDELINE: ${safetyPrompt}\"\"\"`\n\t\t: ``;\n\n\treturn `${systemPrompt} \\n ${safetyPrompt}`.trim();\n}\n\nfunction addRagPromptWithAugmentedContext({\n\tpipe,\n\tsystemPrompt,\n\tsimilarChunks\n}: {\n\tpipe: Pipe;\n\tsystemPrompt: string;\n\tsimilarChunks: SimilarChunk[] | undefined;\n}): string {\n\t// No RAG: then return the system prompt.\n\tif (!similarChunks || similarChunks.length === 0) return systemPrompt;\n\n\tconst memoryContext = similarChunks\n\t\t.map(chunk => `${chunk.text} \\n\\n Source: ${chunk.attributes.docName}`)\n\t\t.join('\\n\\n');\n\n\t// Extract Rag prompt from the messages.\n\tconst ragMsg =\n\t\tpipe.messages.find(m => m.role === 'system' && m.name === 'rag')\n\t\t\t?.content || '';\n\n\t// If there is no rag prompt, use the default rag prompt.\n\tconst hasRagPrompt = ragMsg !== '';\n\tconst ragPrompt = hasRagPrompt ? ragMsg : defaultRagPrompt;\n\n\tconst contextContent = `\"\"\"CONTEXT:\\n ${memoryContext}\"\"\"`;\n\tconst ragPromptWithAugmentedContext = `\"\"\"${ragPrompt}\"\"\" \\n\\n ${contextContent}`;\n\n\treturn `${systemPrompt} \\n\\n ${ragPromptWithAugmentedContext}`.trim();\n}\n","import type { Message, Pipe, VariableI, VariablesI } from 'types/pipe';\nimport { dlog } from '../dlog';\n\n/**\n * Process the messages to replace variables with their values\n * Replaces variables in messages content with their values\n */\nexport function processMessages({\n\tpipe,\n\tmessages,\n\tvariables\n}: {\n\tpipe: Pipe;\n\tmessages: Message[];\n\tvariables?: VariablesI;\n}) {\n\tconst variablesMap = getVarsMap({ pipe, variables });\n\n\tconst messagesWithVarsValues = replaceVarsInMessagesWithVals({\n\t\tmessages,\n\t\tvariablesMap\n\t});\n\treturn { messages: messagesWithVarsValues, variablesMap };\n}\n\nfunction getVarsMap({\n\tpipe,\n\tvariables\n}: {\n\tpipe: Pipe;\n\tvariables?: VariablesI;\n}) {\n\tconst hasPipeVars = pipe.variables ? pipe.variables.length > 0 : false;\n\tconst hasCurrentPromptVars = variables ? variables.length > 0 : false;\n\n\tconst pipeVars = hasPipeVars ? pipe.variables : [];\n\tconst currentPromptVars = hasCurrentPromptVars ? variables : [];\n\n\tlet finalVariablesMap: Map<string, string> = new Map();\n\n\tif (hasPipeVars) {\n\t\tpipeVars.forEach((v: { name: string; value: string }) =>\n\t\t\tfinalVariablesMap.set(v.name, v.value)\n\t\t);\n\t}\n\n\tif (hasCurrentPromptVars) {\n\t\tcurrentPromptVars?.forEach((v: VariableI) =>\n\t\t\tfinalVariablesMap.set(v.name, v.value)\n\t\t);\n\t}\n\n\t// Convert the map back to an array for debugging\n\tlet finalVariables: VariableI[] = Array.from(\n\t\tfinalVariablesMap,\n\t\t([name, value]) => ({\n\t\t\tname,\n\t\t\tvalue\n\t\t})\n\t);\n\tdlog(`finalVariables`, finalVariables);\n\n\treturn finalVariablesMap;\n}\n\n// Function to replace variables in the messages\nfunction replaceVarsInMessagesWithVals({\n\tmessages,\n\tvariablesMap\n}: {\n\tmessages: Message[];\n\tvariablesMap: Map<string, string>;\n}): Message[] {\n\tconst variableRegex = /{{(.*?)}}/g; // Regex to match double curly braces\n\n\treturn messages.map(message => {\n\t\t// When Assistant requests a tool call,\n\t\t// 1- message.content is empty\n\t\t// 2- message.role is 'assistant'\n\t\t// 3- message.tool_calls is an array of tool calls requested by LLM.\n\t\tconst isAssistantToolCall =\n\t\t\t!message.content &&\n\t\t\tmessage.role === 'assistant' &&\n\t\t\tmessage.tool_calls?.length;\n\n\t\t// Since no content to replace variables in, return the message as is.\n\t\tif (isAssistantToolCall) return message;\n\t\tif (!message.content) return message;\n\n\t\t// Replace variables in the message content\n\t\tconst updatedContent = message.content.replace(\n\t\t\tvariableRegex,\n\t\t\t(match, varName) => {\n\t\t\t\tconst trimmedVarName = varName.trim(); // Trim any extra spaces\n\t\t\t\t// If the variable exists in the map, replace with its value; otherwise, leave the placeholder intact\n\t\t\t\treturn variablesMap.get(trimmedVarName) || match;\n\t\t\t}\n\t\t);\n\t\treturn {\n\t\t\t...message,\n\t\t\tcontent: updatedContent\n\t\t};\n\t});\n}\n","import { ApiError } from '@/dev/hono/errors';\nimport type { SimilarChunk } from '@/utils/memory/db/lib';\nimport type { Message, Pipe, VariablesI } from 'types/pipe';\nimport { dlog } from '../dlog';\nimport { getPipeFewShotsMessages } from './get-few-shot-messages';\nimport { getSystemPromptMessage } from './get-system-prompt';\nimport { processMessages } from './process-messages';\n\nexport function getRunThread({\n\tpipe,\n\tmessages,\n\tsimilarChunks,\n\tvariables\n}: {\n\tpipe: Pipe;\n\tmessages: Message[];\n\tsimilarChunks: SimilarChunk[] | undefined;\n\tvariables?: VariablesI;\n}) {\n\ttry {\n\t\tconst systemPromptMessage = getSystemPromptMessage({\n\t\t\tpipe,\n\t\t\tsimilarChunks\n\t\t});\n\t\tconst pipeFewShotsMessages = getPipeFewShotsMessages(pipe);\n\n\t\tconst messagesThread = [\n\t\t\t// Messages in the pipe\n\t\t\t...systemPromptMessage,\n\t\t\t...pipeFewShotsMessages,\n\t\t\t// Messages sent with the request\n\t\t\t...messages\n\t\t];\n\n\t\tconst { messages: messagesThreadWithVars } = processMessages({\n\t\t\tpipe,\n\t\t\tmessages: messagesThread,\n\t\t\tvariables\n\t\t});\n\n\t\treturn messagesThreadWithVars;\n\t} catch (error: any) {\n\t\tdlog('Error get-run-thread.ts:', error);\n\n\t\tthrow new ApiError({\n\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\tmessage: `Something unexpected happened. Error generating thread of messages.`\n\t\t});\n\t}\n}\n","import type { ProviderAPIConfig } from 'types/providers';\n\nconst AnthropicAPIConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.anthropic.com/v1',\n\theaders: ({\n\t\tllmApiKey,\n\t\tendpoint\n\t}: {\n\t\tllmApiKey: string;\n\t\tendpoint: string;\n\t}) => {\n\t\tconst headers: Record<string, string> = {\n\t\t\t'X-API-Key': `${llmApiKey}`,\n\t\t\t'anthropic-version': '2023-06-01'\n\t\t};\n\t\tif (endpoint === 'chatComplete') {\n\t\t\theaders['anthropic-beta'] = 'messages-2023-12-15';\n\t\t}\n\t\treturn headers;\n\t},\n\tchatComplete: '/messages'\n};\n\nexport default AnthropicAPIConfig;\n","import type { ErrorResponse } from 'types/providers';\n\nexport const generateInvalidProviderResponseError: (\n\tresponse: Record<string, any>,\n\tprovider: string\n) => ErrorResponse = (response, provider) => {\n\treturn {\n\t\terror: {\n\t\t\tmessage: `Invalid response received from ${provider}: ${JSON.stringify(response)}`,\n\t\t\ttype: null,\n\t\t\tparam: null,\n\t\t\tcode: null\n\t\t},\n\t\tprovider: provider\n\t} as ErrorResponse;\n};\n\nexport const generateErrorResponse: (\n\terrorDetails: {\n\t\tmessage: string;\n\t\ttype: string | null;\n\t\tparam: string | null;\n\t\tcode: string | null;\n\t},\n\tprovider: string\n) => ErrorResponse = ({ message, type, param, code }, provider) => {\n\treturn {\n\t\terror: {\n\t\t\tmessage: `${message}`,\n\t\t\ttype: type ?? null,\n\t\t\tparam: param ?? null,\n\t\t\tcode: code ?? null\n\t\t},\n\t\tprovider: provider\n\t} as ErrorResponse;\n};\n\nconst fileExtensionMimeTypeMap = {\n\tmp4: 'video/mp4',\n\tjpeg: 'image/jpeg',\n\tjpg: 'image/jpeg',\n\tpng: 'image/png',\n\tbmp: 'image/bmp',\n\ttiff: 'image/tiff',\n\twebp: 'image/webp',\n\tpdf: 'application/pdf',\n\tmp3: 'audio/mp3',\n\twav: 'audio/wav',\n\ttxt: 'text/plain',\n\tmov: 'video/mov',\n\tmpeg: 'video/mpeg',\n\tmpg: 'video/mpg',\n\tavi: 'video/avi',\n\twmv: 'video/wmv',\n\tmpegps: 'video/mpegps',\n\tflv: 'video/flv'\n};\n\nexport const getMimeType = (url: string): string | undefined => {\n\tconst urlParts = url.split('.');\n\tconst extension = urlParts[\n\t\turlParts.length - 1\n\t] as keyof typeof fileExtensionMimeTypeMap;\n\tconst mimeType = fileExtensionMimeTypeMap[extension];\n\treturn mimeType;\n};\n","import type {\n\tChatCompletionResponse,\n\tContentType,\n\tErrorResponse,\n\tMessageRole,\n\tModelParams,\n\tProviderConfig,\n\tProviderMessage\n} from 'types/providers';\nimport { ANTHROPIC } from '@/data/models';\nimport { generateInvalidProviderResponseError } from '../utils';\n\ninterface AnthropicTool {\n\tname: string;\n\tdescription: string;\n\tinput_schema: {\n\t\ttype: string;\n\t\tproperties: Record<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\ttype: string;\n\t\t\t\tdescription: string;\n\t\t\t}\n\t\t>;\n\t\trequired: string[];\n\t};\n}\n\ninterface AnthropicToolResultContentItem {\n\ttype: 'tool_result';\n\ttool_use_id: string;\n\tcontent?: string;\n}\n\ntype AnthropicMessageContentItem = AnthropicToolResultContentItem | ContentType;\n\ninterface AnthropicMessage extends ProviderMessage {\n\tcontent?: string | AnthropicMessageContentItem[];\n}\n\ninterface AnthorpicTextContentItem {\n\ttype: 'text';\n\ttext: string;\n}\n\ninterface AnthropicToolContentItem {\n\ttype: 'tool_use';\n\tname: string;\n\tid: string;\n\tinput: Record<string, any>;\n}\n\ntype AnthropicContentItem = AnthorpicTextContentItem | AnthropicToolContentItem;\n\nconst transformAssistantMessage = (msg: ProviderMessage): AnthropicMessage => {\n\tlet content: AnthropicContentItem[] = [];\n\tconst containsToolCalls = msg.tool_calls && msg.tool_calls.length;\n\n\tif (msg.content && typeof msg.content === 'string') {\n\t\tcontent.push({\n\t\t\ttype: 'text',\n\t\t\ttext: msg.content\n\t\t});\n\t} else if (\n\t\tmsg.content &&\n\t\ttypeof msg.content === 'object' &&\n\t\tmsg.content.length\n\t) {\n\t\tif (msg.content[0].text) {\n\t\t\tcontent.push({\n\t\t\t\ttype: 'text',\n\t\t\t\ttext: msg.content[0].text\n\t\t\t});\n\t\t}\n\t}\n\tif (containsToolCalls) {\n\t\tmsg.tool_calls.forEach((toolCall: any) => {\n\t\t\tcontent.push({\n\t\t\t\ttype: 'tool_use',\n\t\t\t\tname: toolCall.function.name,\n\t\t\t\tid: toolCall.id,\n\t\t\t\tinput: JSON.parse(toolCall.function.arguments)\n\t\t\t});\n\t\t});\n\t}\n\treturn {\n\t\trole: msg.role,\n\t\tcontent\n\t};\n};\n\nconst transformToolMessage = (msg: ProviderMessage): AnthropicMessage => {\n\treturn {\n\t\trole: 'user',\n\t\tcontent: [\n\t\t\t{\n\t\t\t\ttype: 'tool_result',\n\t\t\t\ttool_use_id: msg.tool_call_id,\n\t\t\t\tcontent: msg.content as string\n\t\t\t}\n\t\t]\n\t};\n};\n\nexport const AnthropicChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\tdefault: 'claude-3-haiku',\n\t\trequired: true\n\t},\n\tmessages: [\n\t\t{\n\t\t\tparam: 'messages',\n\t\t\trequired: true,\n\t\t\ttransform: (params: ModelParams) => {\n\t\t\t\tlet messages: ProviderMessage[] = [];\n\t\t\t\tlet lastRole: MessageRole | undefined;\n\n\t\t\t\tif (!!params.messages) {\n\t\t\t\t\tparams.messages.forEach((msg: ProviderMessage) => {\n\t\t\t\t\t\tif (msg.role === 'system') return;\n\n\t\t\t\t\t\tif (msg.role === 'assistant') {\n\t\t\t\t\t\t\tmessages.push(transformAssistantMessage(msg));\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tmsg.content &&\n\t\t\t\t\t\t\ttypeof msg.content === 'object' &&\n\t\t\t\t\t\t\tmsg.content.length\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst transformedMessage: Record<string, any> = {\n\t\t\t\t\t\t\t\trole: msg.role,\n\t\t\t\t\t\t\t\tcontent: []\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tmsg.content.forEach(item => {\n\t\t\t\t\t\t\t\tif (item.type === 'text') {\n\t\t\t\t\t\t\t\t\ttransformedMessage.content.push({\n\t\t\t\t\t\t\t\t\t\ttype: item.type,\n\t\t\t\t\t\t\t\t\t\ttext: item.text\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\titem.type === 'image_url' &&\n\t\t\t\t\t\t\t\t\titem.image_url &&\n\t\t\t\t\t\t\t\t\titem.image_url.url\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tconst parts = item.image_url.url.split(';');\n\t\t\t\t\t\t\t\t\tif (parts.length === 2) {\n\t\t\t\t\t\t\t\t\t\tconst base64ImageParts =\n\t\t\t\t\t\t\t\t\t\t\tparts[1].split(',');\n\t\t\t\t\t\t\t\t\t\tconst base64Image = base64ImageParts[1];\n\t\t\t\t\t\t\t\t\t\tconst mediaTypeParts =\n\t\t\t\t\t\t\t\t\t\t\tparts[0].split(':');\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tmediaTypeParts.length === 2 &&\n\t\t\t\t\t\t\t\t\t\t\tbase64Image\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tconst mediaType = mediaTypeParts[1];\n\t\t\t\t\t\t\t\t\t\t\ttransformedMessage.content.push({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'base64',\n\t\t\t\t\t\t\t\t\t\t\t\t\tmedia_type: mediaType,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdata: base64Image\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tmessages.push(\n\t\t\t\t\t\t\t\ttransformedMessage as ProviderMessage\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (msg.role === 'tool') {\n\t\t\t\t\t\t\t// Combine consecutive tool messages into a single message\n\t\t\t\t\t\t\t// add consecutive tool message as tool_result in content array\n\t\t\t\t\t\t\tif (lastRole === 'tool') {\n\t\t\t\t\t\t\t\tconst toolMessage = transformToolMessage(msg);\n\t\t\t\t\t\t\t\tconst content =\n\t\t\t\t\t\t\t\t\ttoolMessage.content as AnthropicMessageContentItem[];\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\tmessages[messages.length - 1]\n\t\t\t\t\t\t\t\t\t\t.content as AnthropicMessageContentItem[]\n\t\t\t\t\t\t\t\t).push(content[0]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmessages.push(transformToolMessage(msg));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmessages.push({\n\t\t\t\t\t\t\t\trole: msg.role,\n\t\t\t\t\t\t\t\tcontent: msg.content\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlastRole = msg.role;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn messages;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tparam: 'system',\n\t\t\trequired: false,\n\t\t\ttransform: (params: ModelParams) => {\n\t\t\t\tlet systemMessage: string = '';\n\t\t\t\t// Transform the chat messages into a simple prompt\n\t\t\t\tif (!!params.messages) {\n\t\t\t\t\tparams.messages.forEach(msg => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tmsg.role === 'system' &&\n\t\t\t\t\t\t\tmsg.content &&\n\t\t\t\t\t\t\ttypeof msg.content === 'object' &&\n\t\t\t\t\t\t\tmsg.content[0].text\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsystemMessage = msg.content[0].text;\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tmsg.role === 'system' &&\n\t\t\t\t\t\t\ttypeof msg.content === 'string'\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tsystemMessage = msg.content;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn systemMessage;\n\t\t\t}\n\t\t}\n\t],\n\ttools: {\n\t\tparam: 'tools',\n\t\trequired: false,\n\t\ttransform: (params: ModelParams) => {\n\t\t\tlet tools: AnthropicTool[] = [];\n\t\t\tif (params.tools) {\n\t\t\t\tparams.tools.forEach(tool => {\n\t\t\t\t\tif (tool.function) {\n\t\t\t\t\t\ttools.push({\n\t\t\t\t\t\t\tname: tool.function.name,\n\t\t\t\t\t\t\tdescription: tool.function?.description || '',\n\t\t\t\t\t\t\tinput_schema: {\n\t\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\t\ttool.function.parameters?.type || 'object',\n\t\t\t\t\t\t\t\tproperties:\n\t\t\t\t\t\t\t\t\ttool.function.parameters?.properties || {},\n\t\t\t\t\t\t\t\trequired:\n\t\t\t\t\t\t\t\t\ttool.function.parameters?.required || []\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn tools;\n\t\t}\n\t},\n\t// None is not supported by Anthropic, defaults to auto\n\ttool_choice: {\n\t\tparam: 'tool_choice',\n\t\trequired: false,\n\t\ttransform: (params: ModelParams) => {\n\t\t\tlet toolChoice = {};\n\t\t\tif (params.tool_choice) {\n\t\t\t\tif (typeof params.tool_choice === 'string') {\n\t\t\t\t\tif (params.tool_choice === 'required')\n\t\t\t\t\t\ttoolChoice = { type: 'any' };\n\t\t\t\t\telse if (params.tool_choice === 'auto')\n\t\t\t\t\t\ttoolChoice = { type: 'auto' };\n\t\t\t\t} else if (typeof params.tool_choice === 'object') {\n\t\t\t\t\ttoolChoice = {\n\t\t\t\t\t\ttype: 'tool',\n\t\t\t\t\t\tname: params.tool_choice.function.name\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!params.parallel_tool_calls) {\n\t\t\t\ttoolChoice = { ...toolChoice, disable_parallel_tool_use: true };\n\t\t\t}\n\n\t\t\treturn toolChoice;\n\t\t}\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\trequired: true\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tdefault: -1,\n\t\tmin: -1\n\t},\n\ttop_k: {\n\t\tparam: 'top_k',\n\t\tdefault: -1\n\t},\n\tstop: {\n\t\tparam: 'stop_sequences'\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tuser: {\n\t\tparam: 'metadata.user_id'\n\t}\n};\n\nexport interface AnthropicErrorObject {\n\ttype: string;\n\tmessage: string;\n}\n\ninterface AnthropicErrorResponse {\n\ttype: string;\n\terror: AnthropicErrorObject;\n}\n\ninterface AnthropicChatCompleteResponse {\n\tid: string;\n\ttype: string;\n\trole: string;\n\tcontent: AnthropicContentItem[];\n\tstop_reason: string;\n\tmodel: string;\n\tstop_sequence: null | string;\n\tusage: {\n\t\tinput_tokens: number;\n\t\toutput_tokens: number;\n\t};\n}\n\nexport interface AnthropicChatCompleteStreamResponse {\n\ttype: string;\n\tindex: number;\n\tdelta: {\n\t\ttype: string;\n\t\ttext: string;\n\t\tpartial_json?: string;\n\t\tstop_reason?: string;\n\t};\n\tcontent_block?: {\n\t\ttype: string;\n\t\tid?: string;\n\t\ttext?: string;\n\t\tname?: string;\n\t\tinput?: {};\n\t};\n\tusage?: {\n\t\toutput_tokens?: number;\n\t\tinput_tokens?: number;\n\t\tcache_creation_input_tokens?: number;\n\t\tcache_read_input_tokens?: number;\n\t};\n\tmessage?: {\n\t\tusage?: {\n\t\t\toutput_tokens?: number;\n\t\t\tinput_tokens?: number;\n\t\t\tcache_creation_input_tokens?: number;\n\t\t\tcache_read_input_tokens?: number;\n\t\t};\n\t};\n}\n\nexport const AnthropicChatCompleteResponseTransform: (\n\tresponse: AnthropicChatCompleteResponse | AnthropicErrorResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif (responseStatus !== 200 && 'error' in response) {\n\t\treturn {\n\t\t\terror: {\n\t\t\t\tmessage: response.error?.message,\n\t\t\t\ttype: response.error?.type,\n\t\t\t\tparam: null,\n\t\t\t\tcode: null\n\t\t\t},\n\t\t\tprovider: ANTHROPIC\n\t\t} as ErrorResponse;\n\t}\n\n\tif ('content' in response) {\n\t\tconst { input_tokens = 0, output_tokens = 0 } = response?.usage;\n\n\t\tlet content = '';\n\t\tif (response.content.length && response.content[0].type === 'text') {\n\t\t\tcontent = response.content[0].text;\n\t\t}\n\n\t\tlet toolCalls: any = [];\n\t\tresponse.content.forEach(item => {\n\t\t\tif (item.type === 'tool_use') {\n\t\t\t\ttoolCalls.push({\n\t\t\t\t\tid: item.id,\n\t\t\t\t\ttype: 'function',\n\t\t\t\t\tfunction: {\n\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\targuments: JSON.stringify(item.input)\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tid: response.id,\n\t\t\tobject: 'chat_completion',\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: response.model,\n\t\t\tprovider: ANTHROPIC,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\tcontent,\n\t\t\t\t\t\ttool_calls: toolCalls.length ? toolCalls : undefined\n\t\t\t\t\t},\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tlogprobs: null,\n\t\t\t\t\tfinish_reason: response.stop_reason\n\t\t\t\t}\n\t\t\t],\n\t\t\tusage: {\n\t\t\t\tprompt_tokens: input_tokens,\n\t\t\t\tcompletion_tokens: output_tokens,\n\t\t\t\ttotal_tokens: input_tokens + output_tokens\n\t\t\t}\n\t\t};\n\t}\n\treturn generateInvalidProviderResponseError(response, ANTHROPIC);\n};\n\nexport const AnthropicChatCompleteStreamChunkTransform: (\n\tresponse: string,\n\tfallbackId: string\n) => string | undefined = (responseChunk, fallbackId) => {\n\tlet chunk = responseChunk.trim();\n\tif (\n\t\tchunk.startsWith('event: ping') ||\n\t\tchunk.startsWith('event: content_block_stop')\n\t) {\n\t\treturn;\n\t}\n\n\tif (chunk.startsWith('event: message_stop')) {\n\t\treturn 'data: [DONE]\\n\\n';\n\t}\n\n\tchunk = chunk.replace(/^event: content_block_delta[\\r\\n]*/, '');\n\tchunk = chunk.replace(/^event: content_block_start[\\r\\n]*/, '');\n\tchunk = chunk.replace(/^event: message_delta[\\r\\n]*/, '');\n\tchunk = chunk.replace(/^event: message_start[\\r\\n]*/, '');\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\n\tconst parsedChunk: AnthropicChatCompleteStreamResponse = JSON.parse(chunk);\n\n\tif (parsedChunk.type === 'message_start') {\n\t\treturn (\n\t\t\t`data: ${JSON.stringify({\n\t\t\t\tid: fallbackId,\n\t\t\t\tobject: 'chat.completion.chunk',\n\t\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\t\tmodel: '',\n\t\t\t\tprovider: ANTHROPIC,\n\t\t\t\tchoices: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdelta: {\n\t\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\t\tcontent: ''\n\t\t\t\t\t\t},\n\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\tlogprobs: null,\n\t\t\t\t\t\tfinish_reason: null\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})}` + '\\n\\n'\n\t\t);\n\t}\n\n\tif (parsedChunk.type === 'message_delta') {\n\t\treturn (\n\t\t\t`data: ${JSON.stringify({\n\t\t\t\tid: fallbackId,\n\t\t\t\tobject: 'chat.completion.chunk',\n\t\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\t\tmodel: '',\n\t\t\t\tprovider: ANTHROPIC,\n\t\t\t\tchoices: [\n\t\t\t\t\t{\n\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\tdelta: {},\n\t\t\t\t\t\tfinish_reason: parsedChunk.delta?.stop_reason\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t})}` + '\\n\\n'\n\t\t);\n\t}\n\n\tconst toolCalls = [];\n\tconst isToolBlockStart: boolean =\n\t\tparsedChunk.type === 'content_block_start' &&\n\t\t!!parsedChunk.content_block?.id;\n\tconst isToolBlockDelta: boolean =\n\t\tparsedChunk.type === 'content_block_delta' &&\n\t\t!!parsedChunk.delta.partial_json;\n\tconst toolIndex: number = parsedChunk.index;\n\n\tif (isToolBlockStart && parsedChunk.content_block) {\n\t\ttoolCalls.push({\n\t\t\tindex: toolIndex,\n\t\t\tid: parsedChunk.content_block.id,\n\t\t\ttype: 'function',\n\t\t\tfunction: {\n\t\t\t\tname: parsedChunk.content_block.name,\n\t\t\t\targuments: ''\n\t\t\t}\n\t\t});\n\t} else if (isToolBlockDelta) {\n\t\ttoolCalls.push({\n\t\t\tindex: toolIndex,\n\t\t\tfunction: {\n\t\t\t\targuments: parsedChunk.delta.partial_json\n\t\t\t}\n\t\t});\n\t}\n\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: fallbackId,\n\t\t\tobject: 'chat.completion.chunk',\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: '',\n\t\t\tprovider: ANTHROPIC,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tdelta: {\n\t\t\t\t\t\tcontent: parsedChunk.delta?.text,\n\t\t\t\t\t\ttool_calls: toolCalls.length ? toolCalls : undefined\n\t\t\t\t\t},\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tlogprobs: null,\n\t\t\t\t\tfinish_reason: parsedChunk.delta?.stop_reason ?? null\n\t\t\t\t}\n\t\t\t]\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport AnthropicAPIConfig from './api';\nimport {\n\tAnthropicChatCompleteConfig,\n\tAnthropicChatCompleteResponseTransform,\n\tAnthropicChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst AnthropicConfig: ProviderConfigs = {\n\tchatComplete: AnthropicChatCompleteConfig,\n\tapi: AnthropicAPIConfig,\n\tresponseTransforms: {\n\t\tchatComplete: AnthropicChatCompleteResponseTransform,\n\t\t'stream-chatComplete': AnthropicChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default AnthropicConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst OpenAIAPIConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.openai.com/v1',\n\theaders: (API_KEY: string) => {\n\t\treturn { Authorization: `Bearer ${API_KEY}` };\n\t},\n\tchatComplete: '/chat/completions'\n};\n\nexport default OpenAIAPIConfig;\n","import type { ChatCompletionResponse, ProviderConfig } from 'types/providers';\n\nexport const OpenAIChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'gpt-4o-mini'\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\tdefault: ''\n\t},\n\tfunctions: {\n\t\tparam: 'functions'\n\t},\n\tfunction_call: {\n\t\tparam: 'function_call'\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\tdefault: 100,\n\t\tmin: 0\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 2\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\tn: {\n\t\tparam: 'n',\n\t\tdefault: 1\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tstop: {\n\t\tparam: 'stop'\n\t},\n\tpresence_penalty: {\n\t\tparam: 'presence_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tfrequency_penalty: {\n\t\tparam: 'frequency_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tlogit_bias: {\n\t\tparam: 'logit_bias'\n\t},\n\tuser: {\n\t\tparam: 'user'\n\t},\n\tseed: {\n\t\tparam: 'seed'\n\t},\n\ttools: {\n\t\tparam: 'tools'\n\t},\n\ttool_choice: {\n\t\tparam: 'tool_choice'\n\t},\n\tresponse_format: {\n\t\tparam: 'response_format'\n\t},\n\tlogprobs: {\n\t\tparam: 'logprobs',\n\t\tdefault: false\n\t},\n\ttop_logprobs: {\n\t\tparam: 'top_logprobs'\n\t}\n};\n\nexport interface OpenAIChatCompleteResponse extends ChatCompletionResponse {\n\tsystem_fingerprint: string;\n}\n\nexport const OpenAIChatCompleteResponseTransform: (\n\tresponse: OpenAIChatCompleteResponse\n) => ChatCompletionResponse = response => response;\n","import type { ProviderConfigs } from 'types/providers';\nimport OpenAIAPIConfig from './api';\nimport { OpenAIChatCompleteConfig } from './chatComplete';\n\nconst OpenAIConfig: ProviderConfigs = {\n\tapi: OpenAIAPIConfig,\n\tchatComplete: OpenAIChatCompleteConfig\n};\n\nexport default OpenAIConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst TogetherAIApiConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.together.xyz',\n\theaders: (API_KEY: string) => {\n\t\treturn { Authorization: `Bearer ${API_KEY}` };\n\t},\n\tchatComplete: '/v1/chat/completions',\n\tcomplete: '/v1/completions',\n\tembed: '/v1/embeddings'\n};\n\nexport default TogetherAIApiConfig;\n","import { TOGETHER_AI } from '@/dev/data/models';\nimport type {\n\tChatCompletionResponse,\n\tErrorResponse,\n\tProviderConfig\n} from 'types/providers';\n\nexport const TogetherAIChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'mistralai/Mistral-7B-Instruct-v0.1'\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\trequired: true,\n\t\tdefault: ''\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\trequired: true,\n\t\tdefault: 128,\n\t\tmin: 1\n\t},\n\tstop: {\n\t\tparam: 'stop'\n\t},\n\ttemperature: {\n\t\tparam: 'temperature'\n\t},\n\ttop_p: {\n\t\tparam: 'top_p'\n\t},\n\ttop_k: {\n\t\tparam: 'top_k'\n\t},\n\tfrequency_penalty: {\n\t\tparam: 'repetition_penalty'\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tlogprobs: {\n\t\tparam: 'logprobs'\n\t},\n\ttools: {\n\t\tparam: 'tools'\n\t},\n\ttool_choice: {\n\t\tparam: 'tool_choice'\n\t},\n\tresponse_format: {\n\t\tparam: 'response_format'\n\t}\n};\n\nexport interface TogetherAIChatCompleteResponse extends ChatCompletionResponse {\n\tusage: {\n\t\tprompt_tokens: number;\n\t\tcompletion_tokens: number;\n\t\ttotal_tokens: number;\n\t};\n}\n\nexport interface TogetherAIErrorResponse {\n\tmodel: string;\n\tjob_id: string;\n\trequest_id: string;\n\terror: string;\n\tmessage?: string;\n\ttype?: string;\n}\n\nexport interface TogetherAIOpenAICompatibleErrorResponse\n\textends ErrorResponse {}\n\nexport interface TogetherAIChatCompletionStreamChunk {\n\tid: string;\n\trequest_id: string;\n\tobject: string;\n\tchoices: {\n\t\tindex: number;\n\t\tdelta: {\n\t\t\tcontent: string;\n\t\t};\n\t}[];\n}\n\nexport const TogetherAIErrorResponseTransform: (\n\tresponse: TogetherAIErrorResponse | TogetherAIOpenAICompatibleErrorResponse\n) => ErrorResponse | false = response => {\n\tif ('error' in response && typeof response.error === 'string') {\n\t\treturn {\n\t\t\terror: {\n\t\t\t\tmessage: response.error,\n\t\t\t\ttype: null,\n\t\t\t\tparam: null,\n\t\t\t\tcode: null\n\t\t\t},\n\t\t\tprovider: TOGETHER_AI\n\t\t} as ErrorResponse;\n\t}\n\n\tif ('error' in response && typeof response.error === 'object') {\n\t\treturn {\n\t\t\terror: {\n\t\t\t\tmessage: response.error?.message || '',\n\t\t\t\ttype: response.error?.type || null,\n\t\t\t\tparam: response.error?.param || null,\n\t\t\t\tcode: response.error?.code || null\n\t\t\t},\n\t\t\tprovider: TOGETHER_AI\n\t\t} as ErrorResponse;\n\t}\n\n\tif ('message' in response) {\n\t\treturn {\n\t\t\terror: {\n\t\t\t\tmessage: response.message,\n\t\t\t\ttype: response.type,\n\t\t\t\tparam: null,\n\t\t\t\tcode: null\n\t\t\t},\n\t\t\tprovider: TOGETHER_AI\n\t\t} as ErrorResponse;\n\t}\n\n\treturn false;\n};\n\nexport const TogetherAIChatCompleteResponseTransform: (\n\tresponse:\n\t\t| TogetherAIChatCompleteResponse\n\t\t| TogetherAIErrorResponse\n\t\t| TogetherAIOpenAICompatibleErrorResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif (responseStatus !== 200 && !('choices' in response)) {\n\t\tconst errorResponse = TogetherAIErrorResponseTransform(response);\n\t\tif (errorResponse) return errorResponse;\n\t}\n\n\tif ('choices' in response) {\n\t\treturn {\n\t\t\tid: response.id,\n\t\t\tobject: response.object,\n\t\t\tcreated: response.created,\n\t\t\tmodel: response.model,\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tchoices: response.choices.map(choice => {\n\t\t\t\treturn {\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\tcontent: choice.message.content,\n\t\t\t\t\t\ttool_calls: choice.message.tool_calls\n\t\t\t\t\t\t\t? choice.message.tool_calls.map(\n\t\t\t\t\t\t\t\t\t(toolCall: any) => ({\n\t\t\t\t\t\t\t\t\t\tid: toolCall.id,\n\t\t\t\t\t\t\t\t\t\ttype: toolCall.type,\n\t\t\t\t\t\t\t\t\t\tfunction: toolCall.function\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t},\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tlogprobs: null,\n\t\t\t\t\tfinish_reason: choice.finish_reason\n\t\t\t\t};\n\t\t\t}),\n\t\t\tusage: {\n\t\t\t\tprompt_tokens: response.usage?.prompt_tokens,\n\t\t\t\tcompletion_tokens: response.usage?.completion_tokens,\n\t\t\t\ttotal_tokens: response.usage?.total_tokens\n\t\t\t}\n\t\t};\n\t}\n\treturn {\n\t\terror: {\n\t\t\tmessage: `Invalid response recieved from together-ai: ${JSON.stringify(response)}`,\n\t\t\ttype: null,\n\t\t\tparam: null,\n\t\t\tcode: null\n\t\t},\n\t\tprovider: TOGETHER_AI\n\t} as ErrorResponse;\n};\n\nexport const TogetherAIChatCompleteStreamChunkTransform: (\n\tresponse: string\n) => string = responseChunk => {\n\tlet chunk = responseChunk.trim();\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\tif (chunk === '[DONE]') {\n\t\treturn `data: ${chunk}\\n\\n`;\n\t}\n\tconst parsedChunk: TogetherAIChatCompletionStreamChunk = JSON.parse(chunk);\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: parsedChunk.id,\n\t\t\tobject: parsedChunk.object,\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: '',\n\t\t\tprovider: TOGETHER_AI,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tdelta: {\n\t\t\t\t\t\tcontent: parsedChunk.choices[0]?.delta.content\n\t\t\t\t\t},\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tfinish_reason: ''\n\t\t\t\t}\n\t\t\t]\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport TogetherAIApiConfig from './api';\nimport { TogetherAIChatCompleteConfig } from './chatComplete';\n\nconst TogetherAIConfig: ProviderConfigs = {\n\tchatComplete: TogetherAIChatCompleteConfig,\n\tapi: TogetherAIApiConfig\n};\n\nexport default TogetherAIConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst GroqAPIConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.groq.com/openai/v1',\n\theaders: (llmApiKey: string) => {\n\t\treturn { Authorization: `Bearer ${llmApiKey}` };\n\t},\n\tchatComplete: '/chat/completions'\n};\n\nexport default GroqAPIConfig;\n","import type { ProviderConfig } from 'types/providers';\nexport const GroqChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'mixtral-8x7b-32768'\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\tdefault: ''\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\tdefault: 100,\n\t\tmin: 0\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 2\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tstop: {\n\t\tparam: 'stop'\n\t},\n\tn: {\n\t\tparam: 'n',\n\t\tdefault: 1,\n\t\tmax: 1,\n\t\tmin: 1\n\t}\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport GroqAPIConfig from './api';\nimport { GroqChatCompleteConfig } from './chatComplete';\n\nconst GroqConfig: ProviderConfigs = {\n\tchatComplete: GroqChatCompleteConfig,\n\tapi: GroqAPIConfig\n};\n\nexport default GroqConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst GoogleApiConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://generativelanguage.googleapis.com/v1beta',\n\theaders: () => {\n\t\treturn { 'Content-Type': 'application/json' };\n\t},\n\tgetEndpoint: ({\n\t\tendpoint,\n\t\tllmApiKey,\n\t\tmodel,\n\t\tstream\n\t}: {\n\t\tendpoint: string;\n\t\tllmApiKey: string;\n\t\tmodel: string;\n\t\tstream: boolean;\n\t}) => {\n\t\tlet mappedEndpoint = endpoint;\n\t\tif (stream) {\n\t\t\tmappedEndpoint = `stream-${endpoint}`;\n\t\t}\n\t\tswitch (mappedEndpoint) {\n\t\t\tcase 'chatComplete': {\n\t\t\t\treturn `/models/${model}:generateContent?key=${llmApiKey}`;\n\t\t\t}\n\t\t\tcase 'stream-chatComplete': {\n\t\t\t\treturn `/models/${model}:streamGenerateContent?key=${llmApiKey}`;\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default GoogleApiConfig;\n","import {\n\tgenerateErrorResponse,\n\tgenerateInvalidProviderResponseError,\n\tgetMimeType\n} from '../utils';\nimport { GOOGLE } from '@/dev/data/models';\nimport type { ToolCall, ToolChoice } from 'types/pipe';\nimport type {\n\tChatCompletionResponse,\n\tContentType,\n\tErrorResponse,\n\tMessageRole,\n\tModelParams,\n\tProviderConfig,\n\tProviderMessage\n} from 'types/providers';\n\nconst transformGenerationConfig = (params: ModelParams) => {\n\tconst generationConfig: Record<string, any> = {};\n\tif (params['temperature']) {\n\t\tgenerationConfig['temperature'] = params['temperature'];\n\t}\n\tif (params['top_p']) {\n\t\tgenerationConfig['topP'] = params['top_p'];\n\t}\n\tif (params['top_k']) {\n\t\tgenerationConfig['topK'] = params['top_k'];\n\t}\n\tif (params['max_tokens']) {\n\t\tgenerationConfig['maxOutputTokens'] = params['max_tokens'];\n\t}\n\tif (params['stop']) {\n\t\tgenerationConfig['stopSequences'] = params['stop'];\n\t}\n\treturn generationConfig;\n};\n\nexport type GoogleMessageRole = 'user' | 'model' | 'function';\n\ninterface GoogleFunctionCallMessagePart {\n\tfunctionCall: GoogleGenerateFunctionCall;\n}\n\ninterface GoogleFunctionResponseMessagePart {\n\tfunctionResponse: {\n\t\tname: string;\n\t\tresponse: {\n\t\t\tname?: string;\n\t\t\tcontent: string;\n\t\t};\n\t};\n}\n\ntype GoogleMessagePart =\n\t| GoogleFunctionCallMessagePart\n\t| GoogleFunctionResponseMessagePart\n\t| { text: string };\n\nexport interface GoogleMessage {\n\trole: GoogleMessageRole;\n\tparts: GoogleMessagePart[];\n}\n\nexport interface GoogleToolConfig {\n\tfunction_calling_config: {\n\t\tmode: GoogleToolChoiceType | undefined;\n\t\tallowed_function_names?: string[];\n\t};\n}\n\nexport const transformOpenAIRoleToGoogleRole = (\n\trole: MessageRole\n): GoogleMessageRole => {\n\tswitch (role) {\n\t\tcase 'assistant':\n\t\t\treturn 'model';\n\t\tcase 'tool':\n\t\t\treturn 'function';\n\t\t// Not all gemini models support system role\n\t\tcase 'system':\n\t\t\treturn 'user';\n\t\t// user is the default role\n\t\tdefault:\n\t\t\treturn role;\n\t}\n};\n\ntype GoogleToolChoiceType = 'AUTO' | 'ANY' | 'NONE';\n\nexport const transformToolChoiceForGemini = (\n\ttool_choice: ToolChoice\n): GoogleToolChoiceType | undefined => {\n\tif (typeof tool_choice === 'object' && tool_choice.type === 'function')\n\t\treturn 'ANY';\n\tif (typeof tool_choice === 'string') {\n\t\tswitch (tool_choice) {\n\t\t\tcase 'auto':\n\t\t\t\treturn 'AUTO';\n\t\t\tcase 'none':\n\t\t\t\treturn 'NONE';\n\t\t\tcase 'required':\n\t\t\t\treturn 'ANY';\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const GoogleChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'gemini-pro'\n\t},\n\tmessages: {\n\t\tparam: 'contents',\n\t\tdefault: '',\n\t\ttransform: (params: ModelParams) => {\n\t\t\tconst messages: GoogleMessage[] = [];\n\t\t\tlet lastRole: GoogleMessageRole | undefined;\n\n\t\t\tparams.messages?.forEach((message: ProviderMessage) => {\n\t\t\t\tconst role = transformOpenAIRoleToGoogleRole(message.role);\n\t\t\t\tlet parts = [];\n\n\t\t\t\tif (message.role === 'assistant' && message.tool_calls) {\n\t\t\t\t\tmessage.tool_calls.forEach((tool_call: ToolCall) => {\n\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\tfunctionCall: {\n\t\t\t\t\t\t\t\tname: tool_call.function.name,\n\t\t\t\t\t\t\t\targs: JSON.parse(tool_call.function.arguments)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else if (\n\t\t\t\t\tmessage.role === 'tool' &&\n\t\t\t\t\ttypeof message.content === 'string'\n\t\t\t\t) {\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\tfunctionResponse: {\n\t\t\t\t\t\t\tname: message.name ?? 'lb-random-tool-name',\n\t\t\t\t\t\t\tresponse: {\n\t\t\t\t\t\t\t\tcontent: message.content\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (\n\t\t\t\t\tmessage.content &&\n\t\t\t\t\ttypeof message.content === 'object'\n\t\t\t\t) {\n\t\t\t\t\tmessage.content.forEach((c: ContentType) => {\n\t\t\t\t\t\tif (c.type === 'text') {\n\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\ttext: c.text\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (c.type === 'image_url') {\n\t\t\t\t\t\t\tconst { url } = c.image_url || {};\n\t\t\t\t\t\t\tif (!url) return;\n\n\t\t\t\t\t\t\t// Handle different types of image URLs\n\t\t\t\t\t\t\tif (url.startsWith('data:')) {\n\t\t\t\t\t\t\t\tconst [mimeTypeWithPrefix, base64Image] =\n\t\t\t\t\t\t\t\t\turl.split(';base64,');\n\t\t\t\t\t\t\t\tconst mimeType =\n\t\t\t\t\t\t\t\t\tmimeTypeWithPrefix.split(':')[1];\n\n\t\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\t\tinlineData: {\n\t\t\t\t\t\t\t\t\t\tmimeType: mimeType,\n\t\t\t\t\t\t\t\t\t\tdata: base64Image\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\turl.startsWith('gs://') ||\n\t\t\t\t\t\t\t\turl.startsWith('https://') ||\n\t\t\t\t\t\t\t\turl.startsWith('http://')\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\t\tfileData: {\n\t\t\t\t\t\t\t\t\t\tmimeType: getMimeType(url),\n\t\t\t\t\t\t\t\t\t\tfileUri: url\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparts.push({\n\t\t\t\t\t\t\t\t\tinlineData: {\n\t\t\t\t\t\t\t\t\t\tmimeType: 'image/jpeg',\n\t\t\t\t\t\t\t\t\t\tdata: c.image_url?.url\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else if (typeof message.content === 'string') {\n\t\t\t\t\tparts.push({\n\t\t\t\t\t\ttext: message.content\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Combine consecutive messages if they are from the same role\n\t\t\t\t// This takes care of the \"Please ensure that multiturn requests alternate between user and model.\n\t\t\t\t// Also possible fix for \"Please ensure that function call turn comes immediately after a user turn or after a function response turn.\" in parallel tool calls\n\t\t\t\tconst shouldCombineMessages =\n\t\t\t\t\tlastRole === role && !params.model?.includes('vision');\n\n\t\t\t\tif (shouldCombineMessages) {\n\t\t\t\t\tmessages[messages.length - 1].parts.push(...parts);\n\t\t\t\t} else {\n\t\t\t\t\tmessages.push({ role, parts });\n\t\t\t\t}\n\t\t\t\tlastRole = role;\n\t\t\t});\n\t\t\treturn messages;\n\t\t}\n\t},\n\ttemperature: {\n\t\tparam: 'generationConfig',\n\t\ttransform: (params: ModelParams) => transformGenerationConfig(params)\n\t},\n\ttop_p: {\n\t\tparam: 'generationConfig',\n\t\ttransform: (params: ModelParams) => transformGenerationConfig(params)\n\t},\n\ttop_k: {\n\t\tparam: 'generationConfig',\n\t\ttransform: (params: ModelParams) => transformGenerationConfig(params)\n\t},\n\tmax_tokens: {\n\t\tparam: 'generationConfig',\n\t\ttransform: (params: ModelParams) => transformGenerationConfig(params)\n\t},\n\tstop: {\n\t\tparam: 'generationConfig',\n\t\ttransform: (params: ModelParams) => transformGenerationConfig(params)\n\t},\n\ttools: {\n\t\tparam: 'tools',\n\t\tdefault: '',\n\t\ttransform: (params: ModelParams) => {\n\t\t\tconst functionDeclarations: any = [];\n\t\t\tparams.tools?.forEach(tool => {\n\t\t\t\tif (tool.type === 'function') {\n\t\t\t\t\tfunctionDeclarations.push(tool.function);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn [{ functionDeclarations }];\n\t\t}\n\t},\n\ttool_choice: {\n\t\tparam: 'tool_config',\n\t\tdefault: '',\n\t\ttransform: (params: ModelParams) => {\n\t\t\tif (params.tool_choice) {\n\t\t\t\tconst allowedFunctionNames: string[] = [];\n\t\t\t\t// If tool_choice is an object and type is function, add the function name to allowedFunctionNames\n\t\t\t\tif (\n\t\t\t\t\ttypeof params.tool_choice === 'object' &&\n\t\t\t\t\tparams.tool_choice.type === 'function'\n\t\t\t\t) {\n\t\t\t\t\tallowedFunctionNames.push(params.tool_choice.function.name);\n\t\t\t\t}\n\t\t\t\tconst toolConfig: GoogleToolConfig = {\n\t\t\t\t\tfunction_calling_config: {\n\t\t\t\t\t\tmode: transformToolChoiceForGemini(params.tool_choice)\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t// TODO: @msaaddev I think we can't have more than one function in tool_choice\n\t\t\t\t// but this will also handle the case if we have more than one function in tool_choice\n\n\t\t\t\t// If tool_choice has functions, add the function names to allowedFunctionNames\n\t\t\t\tif (allowedFunctionNames.length > 0) {\n\t\t\t\t\ttoolConfig.function_calling_config.allowed_function_names =\n\t\t\t\t\t\tallowedFunctionNames;\n\t\t\t\t}\n\t\t\t\treturn toolConfig;\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport interface GoogleErrorResponse {\n\terror: {\n\t\tcode: number;\n\t\tmessage: string;\n\t\tstatus: string;\n\t\tdetails: Array<Record<string, any>>;\n\t};\n}\n\ninterface GoogleGenerateFunctionCall {\n\tname: string;\n\targs: Record<string, any>;\n}\n\ninterface GoogleGenerateContentResponse {\n\tcandidates: {\n\t\tcontent: {\n\t\t\tparts: {\n\t\t\t\ttext?: string;\n\t\t\t\tfunctionCall?: GoogleGenerateFunctionCall;\n\t\t\t}[];\n\t\t};\n\t\tfinishReason: string;\n\t\tindex: number;\n\t\tsafetyRatings: {\n\t\t\tcategory: string;\n\t\t\tprobability: string;\n\t\t}[];\n\t}[];\n\tpromptFeedback: {\n\t\tsafetyRatings: {\n\t\t\tcategory: string;\n\t\t\tprobability: string;\n\t\t}[];\n\t};\n\tusageMetadata: {\n\t\tpromptTokenCount: number;\n\t\tcandidatesTokenCount: number;\n\t\ttotalTokenCount: number;\n\t};\n}\n\nexport const GoogleChatCompleteResponseTransform: (\n\tresponse: GoogleGenerateContentResponse | GoogleErrorResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\t// Extract error from response. It is in an array when streaming, and object when not streaming\n\tconst errorObject = Array.isArray(response)\n\t\t? response.find(item => 'error' in item)?.error\n\t\t: 'error' in response\n\t\t\t? response.error\n\t\t\t: null;\n\n\tif (responseStatus !== 200 && errorObject) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: errorObject?.message ?? '',\n\t\t\t\ttype: errorObject?.status ?? null,\n\t\t\t\tparam: null,\n\t\t\t\tcode: errorObject?.code ? `${errorObject.code}` : null\n\t\t\t},\n\t\t\tGOOGLE\n\t\t);\n\t}\n\tif ('candidates' in response) {\n\t\treturn {\n\t\t\tid: crypto.randomUUID(),\n\t\t\tobject: 'chat_completion',\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: 'Unknown',\n\t\t\tprovider: GOOGLE,\n\t\t\tchoices:\n\t\t\t\tresponse.candidates?.map(generation => {\n\t\t\t\t\t// In blocking mode: Google AI does not return content if response > max output tokens param\n\t\t\t\t\t// Test it by asking a big response while keeping maxtokens low ~ 50\n\t\t\t\t\tif (\n\t\t\t\t\t\tgeneration.finishReason === 'MAX_TOKENS' &&\n\t\t\t\t\t\t!generation.content\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow Error(\n\t\t\t\t\t\t\t'The response exceeded your Max Tokens limit parameter. Increase the limit or change the prompt accordingly.'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet message: ProviderMessage = {\n\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\tcontent: ''\n\t\t\t\t\t};\n\t\t\t\t\tif (generation.content?.parts[0]?.text) {\n\t\t\t\t\t\tmessage = {\n\t\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\t\tcontent: generation.content.parts[0]?.text\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (generation.content?.parts[0]?.functionCall) {\n\t\t\t\t\t\tmessage = {\n\t\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\t\tcontent: null,\n\t\t\t\t\t\t\ttool_calls: generation.content.parts.map(part => {\n\t\t\t\t\t\t\t\tif (part.functionCall) {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tid: crypto.randomUUID(),\n\t\t\t\t\t\t\t\t\t\ttype: 'function',\n\t\t\t\t\t\t\t\t\t\tfunction: {\n\t\t\t\t\t\t\t\t\t\t\tname: part.functionCall.name,\n\t\t\t\t\t\t\t\t\t\t\targuments: JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\tpart.functionCall.args\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\tindex: generation.index,\n\t\t\t\t\t\tfinish_reason: generation.finishReason\n\t\t\t\t\t};\n\t\t\t\t}) ?? [],\n\t\t\tusage: {\n\t\t\t\tprompt_tokens: response.usageMetadata.promptTokenCount,\n\t\t\t\tcompletion_tokens: response.usageMetadata.candidatesTokenCount,\n\t\t\t\ttotal_tokens: response.usageMetadata.totalTokenCount\n\t\t\t}\n\t\t};\n\t}\n\n\treturn generateInvalidProviderResponseError(response, GOOGLE);\n};\n\nexport const GoogleChatCompleteStreamChunkTransform: (\n\tresponse: string,\n\tfallbackId: string\n) => string = (responseChunk, fallbackId) => {\n\tlet chunk = responseChunk.trim();\n\tif (chunk.startsWith('[')) {\n\t\tchunk = chunk.slice(1);\n\t}\n\n\tif (chunk.endsWith(',')) {\n\t\tchunk = chunk.slice(0, chunk.length - 1);\n\t}\n\tif (chunk.endsWith(']')) {\n\t\tchunk = chunk.slice(0, chunk.length - 2);\n\t}\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\tif (chunk === '[DONE]') {\n\t\treturn `data: ${chunk}\\n\\n`;\n\t}\n\n\tconst parsedChunk: GoogleGenerateContentResponse = JSON.parse(chunk);\n\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: fallbackId,\n\t\t\tobject: 'chat.completion.chunk',\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: '',\n\t\t\tprovider: 'google',\n\t\t\tchoices:\n\t\t\t\tparsedChunk.candidates?.map((generation, index) => {\n\t\t\t\t\tlet message: ProviderMessage = {\n\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\tcontent: ''\n\t\t\t\t\t};\n\t\t\t\t\tif (generation.content.parts[0]?.text) {\n\t\t\t\t\t\tmessage = {\n\t\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\t\tcontent: generation.content.parts[0]?.text\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (generation.content.parts[0]?.functionCall) {\n\t\t\t\t\t\tmessage = {\n\t\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\t\ttool_calls: generation.content.parts.map(\n\t\t\t\t\t\t\t\t(part, idx) => {\n\t\t\t\t\t\t\t\t\tif (part.functionCall) {\n\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\tindex: idx,\n\t\t\t\t\t\t\t\t\t\t\tid: crypto.randomUUID(),\n\t\t\t\t\t\t\t\t\t\t\ttype: 'function',\n\t\t\t\t\t\t\t\t\t\t\tfunction: {\n\t\t\t\t\t\t\t\t\t\t\t\tname: part.functionCall.name,\n\t\t\t\t\t\t\t\t\t\t\t\targuments: JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart.functionCall.args\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdelta: message,\n\t\t\t\t\t\tindex: generation.index ?? index,\n\t\t\t\t\t\tfinish_reason: generation.finishReason\n\t\t\t\t\t};\n\t\t\t\t}) ?? []\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport GoogleApiConfig from './api';\nimport {\n\tGoogleChatCompleteConfig,\n\tGoogleChatCompleteResponseTransform,\n\tGoogleChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst GoogleConfig: ProviderConfigs = {\n\tapi: GoogleApiConfig,\n\tchatComplete: GoogleChatCompleteConfig,\n\tresponseTransforms: {\n\t\tchatComplete: GoogleChatCompleteResponseTransform,\n\t\t'stream-chatComplete': GoogleChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default GoogleConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst CohereAPIConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.cohere.ai/v1',\n\theaders: (llmApiKey: string) => {\n\t\treturn { Authorization: `Bearer ${llmApiKey}` };\n\t},\n\tchatComplete: '/chat'\n};\n\nexport default CohereAPIConfig;\n","import type {\n\tChatCompletionResponse,\n\tErrorResponse,\n\tProviderConfig,\n\tModelParams,\n\tProviderMessage\n} from 'types/providers';\n\nimport { generateErrorResponse } from '../utils';\nimport { COHERE } from '@/dev/data/models';\n\nexport const CohereChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\tdefault: 'command-r',\n\t\trequired: true\n\t},\n\tmessages: [\n\t\t{\n\t\t\tparam: 'message',\n\t\t\trequired: true,\n\t\t\t// Adds the last message's content to the message param\n\t\t\ttransform: (params: ModelParams) => {\n\t\t\t\tlet message: string = '';\n\n\t\t\t\tif (!!params.messages) {\n\t\t\t\t\tlet messages: ProviderMessage[] = params.messages;\n\t\t\t\t\tlet lastMessage = messages[messages.length - 1];\n\n\t\t\t\t\t// Check if last message's content is a string\n\t\t\t\t\tif (typeof lastMessage.content === 'string') {\n\t\t\t\t\t\tmessage = lastMessage.content;\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: Handle if content is an object\n\t\t\t\t}\n\t\t\t\treturn message;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tparam: 'chat_history',\n\t\t\t// Adds all messages except the last one to the chat_history param which is an array of objects with role and message\n\t\t\ttransform: (params: ModelParams) => {\n\t\t\t\tlet chat_history: { role: string; message: string }[] = [];\n\n\t\t\t\tif (!!params.messages) {\n\t\t\t\t\tlet messages: ProviderMessage[] = params.messages;\n\n\t\t\t\t\t// Retrun if there is only one message. No need to add it to chat_history\n\t\t\t\t\tif (messages.length === 1) return chat_history;\n\t\t\t\t\t// Remove the last message. It will be sent as the message param\n\t\t\t\t\tmessages.pop();\n\n\t\t\t\t\tmessages.forEach(msg => {\n\t\t\t\t\t\tif (typeof msg.content === 'string') {\n\t\t\t\t\t\t\t// Map roles to the ones accepted by Cohere. Default is USER.\n\t\t\t\t\t\t\tlet role: 'CHATBOT' | 'SYSTEM' | 'USER' = 'USER';\n\t\t\t\t\t\t\tif (msg.role === 'assistant') {\n\t\t\t\t\t\t\t\trole = 'CHATBOT';\n\t\t\t\t\t\t\t} else if (msg.role === 'system') {\n\t\t\t\t\t\t\t\trole = 'SYSTEM';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchat_history.push({ role, message: msg.content });\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn chat_history;\n\t\t\t}\n\t\t}\n\t],\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\tdefault: 50,\n\t\tmin: 1\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 0.3,\n\t\tmin: 0,\n\t\tmax: 5\n\t},\n\ttop_p: {\n\t\tparam: 'p',\n\t\tdefault: 0.75,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\ttop_k: {\n\t\tparam: 'k',\n\t\tdefault: 0,\n\t\tmax: 500\n\t},\n\tfrequency_penalty: {\n\t\tparam: 'frequency_penalty',\n\t\tdefault: 0,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\t// TODO: @ahmadbilaldev Error: cannot specify both frequency_penalty and presence_penalty. However, docs say this is supported.\n\t// presence_penalty: {\n\t// \tparam: \"presence_penalty\",\n\t// \tdefault: 0,\n\t// \tmin: 0,\n\t// \tmax: 1,\n\t// },\n\tstop: {\n\t\tparam: 'stop_sequences'\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tprompt_truncation: {\n\t\tparam: 'prompt_truncation',\n\t\tdefault: 'OFF',\n\t\trequired: true\n\t}\n};\n\ninterface CohereCompleteResponse {\n\tresponse_id: string;\n\ttext: string;\n\tchat_history: {\n\t\trole: string;\n\t\tmessage: string;\n\t}[];\n\tfinish_reason: string;\n\tmeta: {\n\t\tapi_version: {\n\t\t\tversion: string;\n\t\t};\n\t\ttokens: {\n\t\t\tinput_tokens: number;\n\t\t\toutput_tokens: number;\n\t\t};\n\t};\n\tmessage?: string;\n\tstatus?: number;\n}\n\nexport const CohereChatCompleteResponseTransform: (\n\tresponse: CohereCompleteResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif (responseStatus !== 200) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: response.message || '',\n\t\t\t\ttype: null,\n\t\t\t\tparam: null,\n\t\t\t\tcode: null\n\t\t\t},\n\t\t\tCOHERE\n\t\t);\n\t}\n\tconst { input_tokens = 0, output_tokens = 0 } = response.meta?.tokens;\n\n\treturn {\n\t\tid: response.response_id,\n\t\tobject: 'chat_completion',\n\t\tcreated: Math.floor(Date.now() / 1000),\n\t\tmodel: 'Unknown',\n\t\tprovider: COHERE,\n\t\tchoices: [\n\t\t\t{\n\t\t\t\tmessage: { role: 'assistant', content: response.text },\n\t\t\t\tindex: 0,\n\t\t\t\tfinish_reason: response.finish_reason\n\t\t\t}\n\t\t],\n\t\tusage: {\n\t\t\tprompt_tokens: input_tokens,\n\t\t\tcompletion_tokens: output_tokens,\n\t\t\ttotal_tokens: input_tokens + output_tokens\n\t\t}\n\t};\n};\n\nexport interface CohereStreamChunk {\n\tid?: string;\n\tresponse: {\n\t\tgenerations?: {\n\t\t\tid: string;\n\t\t\ttext: string;\n\t\t\tfinish_reason: boolean;\n\t\t}[];\n\t};\n\tprompt?: string;\n\tmeta?: {\n\t\tapi_version: {\n\t\t\tversion: string;\n\t\t};\n\t};\n\ttext: string;\n\tis_finished: boolean;\n\tindex?: number;\n}\n\nexport const CohereChatCompleteStreamChunkTransform: (\n\tresponse: string,\n\tfallbackId: string\n) => string = (responseChunk, fallbackId) => {\n\tlet chunk = responseChunk.trim();\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\tconst parsedChunk: CohereStreamChunk = JSON.parse(chunk);\n\n\t// discard the last cohere chunk as it sends the whole response combined.\n\tif (parsedChunk.is_finished) {\n\t\treturn '';\n\t}\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: parsedChunk.id ?? fallbackId,\n\t\t\tobject: 'chat.completion.chunk',\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: '',\n\t\t\tprovider: COHERE,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tdelta: {\n\t\t\t\t\t\tcontent:\n\t\t\t\t\t\t\tparsedChunk.response?.generations?.[0]?.text ??\n\t\t\t\t\t\t\tparsedChunk.text\n\t\t\t\t\t},\n\t\t\t\t\tindex: parsedChunk.index ?? 0,\n\t\t\t\t\tlogprobs: null,\n\t\t\t\t\tfinish_reason:\n\t\t\t\t\t\tparsedChunk.response?.generations?.[0]?.finish_reason ??\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t]\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport CohereAPIConfig from './api';\nimport {\n\tCohereChatCompleteConfig,\n\tCohereChatCompleteResponseTransform,\n\tCohereChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst CohereConfig: ProviderConfigs = {\n\tchatComplete: CohereChatCompleteConfig,\n\tapi: CohereAPIConfig,\n\tresponseTransforms: {\n\t\tchatComplete: CohereChatCompleteResponseTransform,\n\t\t'stream-chatComplete': CohereChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default CohereConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst FireworksAIAPIConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.fireworks.ai/inference/v1',\n\theaders: ({ llmApiKey }: { llmApiKey: string }) => {\n\t\treturn {\n\t\t\tAuthorization: `Bearer ${llmApiKey}`,\n\t\t\tAccept: 'application/json'\n\t\t};\n\t},\n\tgetEndpoint: ({ endpoint }: { endpoint: string }) => {\n\t\tswitch (endpoint) {\n\t\t\tcase 'chatComplete':\n\t\t\t\treturn '/chat/completions';\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t}\n};\n\nexport default FireworksAIAPIConfig;\n","import { FIREWORKS_AI } from '@/dev/data/models';\nimport {\n\tgenerateErrorResponse,\n\tgenerateInvalidProviderResponseError\n} from '../utils';\n\nimport type {\n\tChatCompletionResponse,\n\tErrorResponse,\n\tProviderConfig\n} from 'types/providers';\n\nexport const FireworksAIChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\trequired: true,\n\t\tdefault: []\n\t},\n\ttools: {\n\t\tparam: 'tools'\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\tdefault: 200,\n\t\tmin: 1\n\t},\n\tprompt_truncate_len: {\n\t\tparam: 'prompt_truncate_len',\n\t\tdefault: 1500\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 2\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\ttop_k: {\n\t\tparam: 'top_k',\n\t\tmin: 1,\n\t\tmax: 128\n\t},\n\tfrequency_penalty: {\n\t\tparam: 'frequency_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tpresence_penalty: {\n\t\tparam: 'presence_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tn: {\n\t\tparam: 'n',\n\t\tdefault: 1,\n\t\tmin: 1,\n\t\tmax: 128\n\t},\n\tstop: {\n\t\tparam: 'stop'\n\t},\n\tresponse_format: {\n\t\tparam: 'response_format'\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tcontext_length_exceeded_behavior: {\n\t\tparam: 'context_length_exceeded_behavior'\n\t},\n\tuser: {\n\t\tparam: 'user'\n\t}\n};\n\ninterface FireworksAIChatCompleteResponse extends ChatCompletionResponse {\n\tid: string;\n\tobject: string;\n\tcreated: number;\n\tmodel: string;\n\tusage: {\n\t\tprompt_tokens: number;\n\t\tcompletion_tokens: number;\n\t\ttotal_tokens: number;\n\t};\n}\n\nexport interface FireworksAIValidationErrorResponse {\n\tfault: {\n\t\tfaultstring: string;\n\t\tdetail: {\n\t\t\terrorcode: string;\n\t\t};\n\t};\n}\n\nexport interface FireworksAIErrorResponse extends ErrorResponse {}\n\nexport interface FireworksAIStreamChunk {\n\tid: string;\n\tobject: string;\n\tcreated: number;\n\tmodel: string;\n\tchoices: {\n\t\tdelta: {\n\t\t\trole?: string | null;\n\t\t\tcontent?: string;\n\t\t};\n\t\tindex: number;\n\t\tfinish_reason: string | null;\n\t}[];\n\tusage: null | {\n\t\tprompt_tokens: number;\n\t\tcompletion_tokens: number;\n\t\ttotal_tokens: number;\n\t};\n}\n\nexport const FireworksAIErrorResponseTransform: (\n\tresponse: FireworksAIValidationErrorResponse | FireworksAIErrorResponse\n) => ErrorResponse = response => {\n\tif ('fault' in response) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: response.fault.faultstring,\n\t\t\t\ttype: null,\n\t\t\t\tparam: null,\n\t\t\t\tcode: response.fault.detail.errorcode\n\t\t\t},\n\t\t\tFIREWORKS_AI\n\t\t);\n\t} else if ('detail' in response) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: response.detail as string,\n\t\t\t\ttype: null,\n\t\t\t\tparam: null,\n\t\t\t\tcode: null\n\t\t\t},\n\t\t\tFIREWORKS_AI\n\t\t);\n\t}\n\treturn generateErrorResponse(\n\t\t{\n\t\t\tmessage: response.error as unknown as string,\n\t\t\ttype: null,\n\t\t\tparam: null,\n\t\t\tcode: null\n\t\t},\n\t\tFIREWORKS_AI\n\t);\n};\n\nexport const FireworksAIChatCompleteResponseTransform: (\n\tresponse:\n\t\t| FireworksAIChatCompleteResponse\n\t\t| FireworksAIValidationErrorResponse\n\t\t| FireworksAIErrorResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif (responseStatus !== 200) {\n\t\treturn FireworksAIErrorResponseTransform(\n\t\t\tresponse as\n\t\t\t\t| FireworksAIValidationErrorResponse\n\t\t\t\t| FireworksAIErrorResponse\n\t\t);\n\t}\n\n\tif ('choices' in response) {\n\t\treturn {\n\t\t\tid: response.id,\n\t\t\tobject: response.object,\n\t\t\tcreated: response.created,\n\t\t\tmodel: response.model,\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tchoices: response.choices.map(c => ({\n\t\t\t\tindex: c.index,\n\t\t\t\tmessage: {\n\t\t\t\t\trole: c.message.role,\n\t\t\t\t\tcontent: c.message.content,\n\t\t\t\t\ttool_calls: c.message.tool_calls\n\t\t\t\t},\n\t\t\t\tfinish_reason: c.finish_reason\n\t\t\t})),\n\t\t\tusage: {\n\t\t\t\tprompt_tokens: response.usage?.prompt_tokens,\n\t\t\t\tcompletion_tokens: response.usage?.completion_tokens,\n\t\t\t\ttotal_tokens: response.usage?.total_tokens\n\t\t\t}\n\t\t};\n\t}\n\t// Invalid response received from provider\n\treturn generateInvalidProviderResponseError(response, FIREWORKS_AI);\n};\n\nexport const FireworksAIChatCompleteStreamChunkTransform: (\n\tresponse: string\n) => string = responseChunk => {\n\tlet chunk = responseChunk.trim();\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\tif (chunk === '[DONE]') {\n\t\treturn `data: ${chunk}\\n\\n`;\n\t}\n\tconst parsedChunk: FireworksAIStreamChunk = JSON.parse(chunk);\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: parsedChunk.id,\n\t\t\tobject: parsedChunk.object,\n\t\t\tcreated: parsedChunk.created,\n\t\t\tmodel: parsedChunk.model,\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tindex: parsedChunk.choices[0].index,\n\t\t\t\t\tdelta: parsedChunk.choices[0].delta,\n\t\t\t\t\tfinish_reason: parsedChunk.choices[0].finish_reason\n\t\t\t\t}\n\t\t\t],\n\t\t\t...(parsedChunk.usage ? { usage: parsedChunk.usage } : {})\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport FireworksAIAPIConfig from './api';\nimport {\n\tFireworksAIChatCompleteConfig,\n\tFireworksAIChatCompleteResponseTransform,\n\tFireworksAIChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst FireworksAIConfig: ProviderConfigs = {\n\tchatComplete: FireworksAIChatCompleteConfig,\n\tapi: FireworksAIAPIConfig,\n\tresponseTransforms: {\n\t\tchatComplete: FireworksAIChatCompleteResponseTransform,\n\t\t'stream-chatComplete': FireworksAIChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default FireworksAIConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst PerplexityAIApiConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.perplexity.ai',\n\theaders: (llmApiKey: string) => {\n\t\treturn {\n\t\t\tAuthorization: `Bearer ${llmApiKey}`,\n\t\t\t'content-type': 'application/json',\n\t\t\taccept: 'application/json'\n\t\t};\n\t},\n\tchatComplete: '/chat/completions'\n};\n\nexport default PerplexityAIApiConfig;\n","import { PERPLEXITY } from '@/dev/data/models';\nimport type {\n\tChatCompletionResponse,\n\tErrorResponse,\n\tProviderConfig\n} from 'types/providers';\nimport {\n\tgenerateErrorResponse,\n\tgenerateInvalidProviderResponseError\n} from '../utils';\n\nexport const PerplexityAIChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'llama-3.1-sonar-small-128k-chat'\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\trequired: true,\n\t\tdefault: []\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\trequired: true,\n\t\tmin: 1\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tmin: 0,\n\t\tmax: 2\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\ttop_k: {\n\t\tparam: 'top_k',\n\t\tmin: 0,\n\t\tmax: 2048\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tpresence_penalty: {\n\t\tparam: 'presence_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tfrequency_penalty: {\n\t\tparam: 'repetition_penalty'\n\t},\n\tn: {\n\t\tparam: 'n',\n\t\tmax: 1,\n\t\tmin: 1\n\t}\n};\n\ninterface PerplexityAIChatChoice {\n\tmessage: {\n\t\trole: string;\n\t\tcontent: string;\n\t};\n\tdelta: {\n\t\trole: string;\n\t\tcontent: string;\n\t};\n\tindex: number;\n\tfinish_reason: string | null;\n}\n\nexport interface PerplexityAIChatCompleteResponse {\n\tid: string;\n\tmodel: string;\n\tobject: string;\n\tcreated: number;\n\tchoices: PerplexityAIChatChoice[];\n\tusage: {\n\t\tprompt_tokens: number;\n\t\tcompletion_tokens: number;\n\t\ttotal_tokens: number;\n\t};\n}\n\nexport interface PerplexityAIErrorResponse {\n\terror: {\n\t\tmessage: string;\n\t\ttype: string;\n\t\tcode: number;\n\t};\n}\n\nexport interface PerplexityAIChatCompletionStreamChunk {\n\tid: string;\n\tmodel: string;\n\tobject: string;\n\tcreated: number;\n\tusage: {\n\t\tprompt_tokens: number;\n\t\tcompletion_tokens: number;\n\t\ttotal_tokens: number;\n\t};\n\tchoices: PerplexityAIChatChoice[];\n}\n\nexport const PerplexityAIChatCompleteResponseTransform: (\n\tresponse: PerplexityAIChatCompleteResponse | PerplexityAIErrorResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif ('error' in response) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: response.error.message,\n\t\t\t\ttype: response.error.type,\n\t\t\t\tparam: null,\n\t\t\t\tcode: response.error.code.toString()\n\t\t\t},\n\t\t\tPERPLEXITY\n\t\t);\n\t}\n\n\tif ('choices' in response) {\n\t\treturn {\n\t\t\tid: response.id,\n\t\t\tobject: response.object,\n\t\t\tcreated: response.created,\n\t\t\tmodel: response.model,\n\t\t\tprovider: PERPLEXITY,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tmessage: {\n\t\t\t\t\t\trole: 'assistant',\n\t\t\t\t\t\tcontent: response.choices[0]?.message.content\n\t\t\t\t\t},\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tlogprobs: null,\n\t\t\t\t\tfinish_reason: ''\n\t\t\t\t}\n\t\t\t],\n\t\t\tusage: {\n\t\t\t\tprompt_tokens: response.usage.prompt_tokens,\n\t\t\t\tcompletion_tokens: response.usage.completion_tokens,\n\t\t\t\ttotal_tokens: response.usage.total_tokens\n\t\t\t}\n\t\t};\n\t}\n\n\treturn generateInvalidProviderResponseError(response, PERPLEXITY);\n};\n\nexport const PerplexityAIChatCompleteStreamChunkTransform: (\n\tresponse: string\n) => string = responseChunk => {\n\tlet chunk = responseChunk.trim();\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\n\tconst parsedChunk: PerplexityAIChatCompletionStreamChunk =\n\t\tJSON.parse(chunk);\n\tlet returnChunk =\n\t\t`data: ${JSON.stringify({\n\t\t\tid: parsedChunk.id,\n\t\t\tobject: parsedChunk.object,\n\t\t\tcreated: Math.floor(Date.now() / 1000),\n\t\t\tmodel: parsedChunk.model,\n\t\t\tprovider: PERPLEXITY,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tdelta: {\n\t\t\t\t\t\trole: parsedChunk.choices[0]?.delta.role,\n\t\t\t\t\t\tcontent: parsedChunk.choices[0]?.delta.content\n\t\t\t\t\t},\n\t\t\t\t\tindex: 0,\n\t\t\t\t\tfinish_reason: parsedChunk.choices[0]?.finish_reason\n\t\t\t\t}\n\t\t\t]\n\t\t})}` + '\\n\\n';\n\n\treturn returnChunk;\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport PerplexityAIApiConfig from './api';\nimport {\n\tPerplexityAIChatCompleteConfig,\n\tPerplexityAIChatCompleteResponseTransform,\n\tPerplexityAIChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst PerplexityAIConfig: ProviderConfigs = {\n\tchatComplete: PerplexityAIChatCompleteConfig,\n\tapi: PerplexityAIApiConfig,\n\tresponseTransforms: {\n\t\tchatComplete: PerplexityAIChatCompleteResponseTransform,\n\t\t'stream-chatComplete': PerplexityAIChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default PerplexityAIConfig;\n","import type { ProviderAPIConfig } from 'types/providers';\nconst MistralAIAPIConfig: ProviderAPIConfig = {\n\tbaseURL: 'https://api.mistral.ai/v1',\n\theaders: (llmApiKey: string) => {\n\t\treturn {\n\t\t\tAuthorization: `Bearer ${llmApiKey}`\n\t\t};\n\t},\n\tchatComplete: '/chat/completions'\n};\n\nexport default MistralAIAPIConfig;\n","import { MISTRAL_AI } from '@/dev/data/models';\nimport type {\n\tChatCompletionResponse,\n\tErrorResponse,\n\tProviderConfig\n} from 'types/providers';\nimport {\n\tgenerateErrorResponse,\n\tgenerateInvalidProviderResponseError\n} from '../utils';\n\nexport const MistralAIChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'mistral-large-latest'\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\tdefault: []\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 0.7,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\tdefault: null,\n\t\tmin: 1\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\tseed: {\n\t\tparam: 'random_seed',\n\t\tdefault: null\n\t},\n\tsafe_prompt: {\n\t\tparam: 'safe_prompt',\n\t\tdefault: false\n\t},\n\tsafe_mode: {\n\t\tparam: 'safe_prompt',\n\t\tdefault: false\n\t}\n};\n\ninterface MistralAIChatCompleteResponse extends ChatCompletionResponse {\n\tid: string;\n\tobject: string;\n\tcreated: number;\n\tmodel: string;\n\tusage: {\n\t\tprompt_tokens: number;\n\t\tcompletion_tokens: number;\n\t\ttotal_tokens: number;\n\t};\n}\n\nexport interface MistralAIErrorResponse {\n\tobject: string;\n\tmessage: string;\n\ttype: string;\n\tparam: string | null;\n\tcode: string;\n}\n\ninterface MistralAIStreamChunk {\n\tid: string;\n\tobject: string;\n\tcreated: number;\n\tmodel: string;\n\tchoices: {\n\t\tdelta: {\n\t\t\trole?: string | null;\n\t\t\tcontent?: string;\n\t\t};\n\t\tindex: number;\n\t\tfinish_reason: string | null;\n\t}[];\n}\n\nexport const MistralAIChatCompleteResponseTransform: (\n\tresponse: MistralAIChatCompleteResponse | MistralAIErrorResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif ('message' in response && responseStatus !== 200) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: response.message,\n\t\t\t\ttype: response.type,\n\t\t\t\tparam: response.param,\n\t\t\t\tcode: response.code\n\t\t\t},\n\t\t\tMISTRAL_AI\n\t\t);\n\t}\n\n\tif ('choices' in response) {\n\t\treturn {\n\t\t\tid: response.id,\n\t\t\tobject: response.object,\n\t\t\tcreated: response.created,\n\t\t\tmodel: response.model,\n\t\t\tprovider: MISTRAL_AI,\n\t\t\tchoices: response.choices.map(c => ({\n\t\t\t\tindex: c.index,\n\t\t\t\tmessage: {\n\t\t\t\t\trole: c.message.role,\n\t\t\t\t\tcontent: c.message.content\n\t\t\t\t},\n\t\t\t\tfinish_reason: c.finish_reason\n\t\t\t})),\n\t\t\tusage: {\n\t\t\t\tprompt_tokens: response.usage?.prompt_tokens,\n\t\t\t\tcompletion_tokens: response.usage?.completion_tokens,\n\t\t\t\ttotal_tokens: response.usage?.total_tokens\n\t\t\t}\n\t\t};\n\t}\n\n\treturn generateInvalidProviderResponseError(response, MISTRAL_AI);\n};\n\nexport const MistralAIChatCompleteStreamChunkTransform: (\n\tresponse: string\n) => string = responseChunk => {\n\tlet chunk = responseChunk.trim();\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\tif (chunk === '[DONE]') {\n\t\treturn `data: ${chunk}\\n\\n`;\n\t}\n\tconst parsedChunk: MistralAIStreamChunk = JSON.parse(chunk);\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: parsedChunk.id,\n\t\t\tobject: parsedChunk.object,\n\t\t\tcreated: parsedChunk.created,\n\t\t\tmodel: parsedChunk.model,\n\t\t\tprovider: MISTRAL_AI,\n\t\t\tchoices: [\n\t\t\t\t{\n\t\t\t\t\tindex: parsedChunk.choices[0].index,\n\t\t\t\t\tdelta: parsedChunk.choices[0].delta,\n\t\t\t\t\tfinish_reason: parsedChunk.choices[0].finish_reason\n\t\t\t\t}\n\t\t\t]\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport MistralAIAPIConfig from './api';\nimport {\n\tMistralAIChatCompleteConfig,\n\tMistralAIChatCompleteResponseTransform,\n\tMistralAIChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst MistralAIConfig: ProviderConfigs = {\n\tchatComplete: MistralAIChatCompleteConfig,\n\tapi: MistralAIAPIConfig,\n\tresponseTransforms: {\n\t\tchatComplete: MistralAIChatCompleteResponseTransform,\n\t\t'stream-chatComplete': MistralAIChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default MistralAIConfig;\n","import type { ProviderAPIConfig, ProviderOptions } from 'types/providers';\n\nconst OllamaAPIConfig: ProviderAPIConfig = {\n\theaders: () => {\n\t\treturn {};\n\t},\n\tgetBaseURL: ({ providerOptions }: { providerOptions: ProviderOptions }) => {\n\t\treturn providerOptions.customHost ?? 'http://localhost:11434';\n\t},\n\tchatComplete: '/v1/chat/completions'\n};\n\nexport default OllamaAPIConfig;\n","import type {\n\tChatCompletionResponse,\n\tErrorResponse,\n\tProviderConfig\n} from 'types/providers';\nimport { generateErrorResponse } from '../utils';\nimport { OLLAMA } from '@/dev/data/models';\n\nexport const OllamaChatCompleteConfig: ProviderConfig = {\n\tmodel: {\n\t\tparam: 'model',\n\t\trequired: true,\n\t\tdefault: 'llama2'\n\t},\n\tmessages: {\n\t\tparam: 'messages',\n\t\tdefault: ''\n\t},\n\tfrequency_penalty: {\n\t\tparam: 'frequency_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tpresence_penalty: {\n\t\tparam: 'presence_penalty',\n\t\tmin: -2,\n\t\tmax: 2\n\t},\n\tresponse_format: {\n\t\tparam: 'response_format'\n\t},\n\tseed: {\n\t\tparam: 'seed'\n\t},\n\tstop: {\n\t\tparam: 'stop'\n\t},\n\tstream: {\n\t\tparam: 'stream',\n\t\tdefault: false\n\t},\n\ttemperature: {\n\t\tparam: 'temperature',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 2\n\t},\n\ttop_p: {\n\t\tparam: 'top_p',\n\t\tdefault: 1,\n\t\tmin: 0,\n\t\tmax: 1\n\t},\n\tmax_tokens: {\n\t\tparam: 'max_tokens',\n\t\tdefault: 100,\n\t\tmin: 0\n\t}\n};\n\nexport interface OllamaChatCompleteResponse\n\textends ChatCompletionResponse,\n\t\tErrorResponse {\n\tsystem_fingerprint: string;\n}\n\nexport interface OllamaStreamChunk {\n\tid: string;\n\tobject: string;\n\tcreated: number;\n\tmodel: string;\n\tsystem_fingerprint: string;\n\tchoices: {\n\t\tdelta: {\n\t\t\trole: string;\n\t\t\tcontent?: string;\n\t\t};\n\t\tindex: number;\n\t\tfinish_reason: string | null;\n\t}[];\n}\n\nexport const OllamaChatCompleteResponseTransform: (\n\tresponse: OllamaChatCompleteResponse,\n\tresponseStatus: number\n) => ChatCompletionResponse | ErrorResponse = (response, responseStatus) => {\n\tif (responseStatus !== 200) {\n\t\treturn generateErrorResponse(\n\t\t\t{\n\t\t\t\tmessage: response.error?.message,\n\t\t\t\ttype: response.error?.type,\n\t\t\t\tparam: null,\n\t\t\t\tcode: null\n\t\t\t},\n\t\t\tOLLAMA\n\t\t);\n\t}\n\n\treturn {\n\t\tid: response.id,\n\t\tobject: response.object,\n\t\tcreated: response.created,\n\t\tmodel: response.model,\n\t\tprovider: OLLAMA,\n\t\tchoices: response.choices,\n\t\tusage: response.usage\n\t};\n};\n\nexport const OllamaChatCompleteStreamChunkTransform: (\n\treponse: string\n) => string = responseChunk => {\n\tlet chunk = responseChunk.trim();\n\tchunk = chunk.replace(/^data: /, '');\n\tchunk = chunk.trim();\n\tif (chunk === '[DONE]') {\n\t\treturn `data: ${chunk}\\n\\n`;\n\t}\n\tconst parsedChunk: OllamaStreamChunk = JSON.parse(chunk);\n\treturn (\n\t\t`data: ${JSON.stringify({\n\t\t\tid: parsedChunk.id,\n\t\t\tobject: parsedChunk.object,\n\t\t\tcreated: parsedChunk.created,\n\t\t\tmodel: parsedChunk.model,\n\t\t\tprovider: OLLAMA,\n\t\t\tchoices: parsedChunk.choices\n\t\t})}` + '\\n\\n'\n\t);\n};\n","import type { ProviderConfigs } from 'types/providers';\nimport OllamaAPIConfig from './api';\nimport {\n\tOllamaChatCompleteConfig,\n\tOllamaChatCompleteResponseTransform,\n\tOllamaChatCompleteStreamChunkTransform\n} from './chatComplete';\n\nconst OllamaConfig: ProviderConfigs = {\n\tapi: OllamaAPIConfig,\n\tchatComplete: OllamaChatCompleteConfig,\n\tresponseTransforms: {\n\t\tchatComplete: OllamaChatCompleteResponseTransform,\n\t\t'stream-chatComplete': OllamaChatCompleteStreamChunkTransform\n\t}\n};\n\nexport default OllamaConfig;\n","import {\n\tANTHROPIC,\n\tCOHERE,\n\tFIREWORKS_AI,\n\tGOOGLE,\n\tGROQ,\n\tMISTRAL_AI,\n\tOLLAMA,\n\tOPEN_AI,\n\tPERPLEXITY,\n\tTOGETHER_AI\n} from '../data/models';\n\nimport type { ProviderConfigs } from 'types/providers';\n\nimport AnthropicConfig from './anthropic';\nimport OpenAIConfig from './openai';\nimport TogetherAIConfig from './together-ai';\nimport GroqConfig from './groq';\nimport GoogleConfig from './google';\nimport CohereConfig from './cohere';\nimport FireworksAIConfig from './fireworks-ai';\nimport PerplexityAIConfig from './perplexity';\nimport MistralAIConfig from './mistral-ai';\nimport OllamaConfig from './ollama';\n\n// Provider Configs\nconst Providers: { [key: string]: ProviderConfigs } = {\n\t[OPEN_AI]: OpenAIConfig,\n\t[ANTHROPIC]: AnthropicConfig,\n\t[TOGETHER_AI]: TogetherAIConfig,\n\t[GROQ]: GroqConfig,\n\t[GOOGLE]: GoogleConfig,\n\t[COHERE]: CohereConfig,\n\t[FIREWORKS_AI]: FireworksAIConfig,\n\t[PERPLEXITY]: PerplexityAIConfig,\n\t[MISTRAL_AI]: MistralAIConfig,\n\t[OLLAMA]: OllamaConfig\n};\n\nexport default Providers;\n","import type { endpointStrings, ModelParams } from 'types/providers';\nimport ProviderConfigs from '../../providers';\n\n/**\n * Helper function to set a nested property in an object.\n *\n * @param obj - The object on which to set the property.\n * @param path - The dot-separated path to the property.\n * @param value - The value to set the property to.\n */\nfunction setNestedProperty(obj: any, path: string, value: any) {\n\tconst parts = path.split('.');\n\tlet current = obj;\n\tfor (let i = 0; i < parts.length - 1; i++) {\n\t\tif (!current[parts[i]]) {\n\t\t\tcurrent[parts[i]] = {};\n\t\t}\n\t\tcurrent = current[parts[i]];\n\t}\n\tcurrent[parts[parts.length - 1]] = value;\n}\n\n/**\n * Transforms the request parameters to match the structure required by the AI provider.\n * It also ensures the values for each parameter are within the minimum and maximum\n * constraints defined in the provider's configuration. If a required parameter is missing,\n * it assigns the default value from the provider's configuration.\n *\n * @param provider - The name of the AI provider.\n * @param params - Langbase model parameters.\n * @param fn - The function to transform  call on the provider. Typically an endpoint, like chatComplete,\n * embed, etc.\n *\n * @returns The transformed parameters according to the provider's format.\n *\n * @throws {Error} If the provider is not supported.\n */\nconst transformToProviderRequest = ({\n\tprovider,\n\tparams,\n\tfn\n}: {\n\tprovider: string;\n\tparams: ModelParams;\n\tfn: endpointStrings;\n}): { [key: string]: any } => {\n\t// Get the configuration for the specified provider\n\tlet providerConfig = ProviderConfigs[provider];\n\n\tif (providerConfig.getConfig) {\n\t\tproviderConfig = providerConfig.getConfig(params)[fn];\n\t} else {\n\t\tproviderConfig = providerConfig[fn];\n\t}\n\n\t// If the provider is not supported, throw an error\n\tif (!providerConfig) {\n\t\tthrow new Error('Unsupported provider');\n\t}\n\n\tconst transformedRequest: { [key: string]: any } = {};\n\n\t// For each parameter in the provider's configuration\n\tfor (const configParam in providerConfig) {\n\t\t// Get the config for this parameter\n\t\tlet paramConfigs = providerConfig[configParam];\n\t\tif (!Array.isArray(paramConfigs)) {\n\t\t\tparamConfigs = [paramConfigs];\n\t\t}\n\n\t\tfor (const paramConfig of paramConfigs) {\n\t\t\t// If the parameter is present in the incoming request body\n\t\t\tif (configParam in params) {\n\t\t\t\t// Get the value for this parameter\n\t\t\t\tlet value = params[configParam as keyof typeof params];\n\n\t\t\t\t// If a transformation is defined for this parameter, apply it\n\t\t\t\tif (paramConfig.transform) {\n\t\t\t\t\tvalue = paramConfig.transform(params);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === 'default' &&\n\t\t\t\t\tparamConfig &&\n\t\t\t\t\tparamConfig.default !== undefined\n\t\t\t\t) {\n\t\t\t\t\t// Set the transformed parameter to the default value\n\t\t\t\t\tvalue = paramConfig.default;\n\t\t\t\t}\n\n\t\t\t\t// If a minimum is defined for this parameter and the value is less than this, set the value to the minimum\n\t\t\t\t// Also, we should only do this comparison if value is of type 'number'\n\t\t\t\tif (\n\t\t\t\t\ttypeof value === 'number' &&\n\t\t\t\t\tparamConfig &&\n\t\t\t\t\tparamConfig.min !== undefined &&\n\t\t\t\t\tvalue < paramConfig.min\n\t\t\t\t) {\n\t\t\t\t\tvalue = paramConfig.min;\n\t\t\t\t}\n\n\t\t\t\t// If a maximum is defined for this parameter and the value is more than this, set the value to the maximum\n\t\t\t\t// Also, we should only do this comparison if value is of type 'number'\n\t\t\t\telse if (\n\t\t\t\t\ttypeof value === 'number' &&\n\t\t\t\t\tparamConfig &&\n\t\t\t\t\tparamConfig.max !== undefined &&\n\t\t\t\t\tvalue > paramConfig.max\n\t\t\t\t) {\n\t\t\t\t\tvalue = paramConfig.max;\n\t\t\t\t}\n\n\t\t\t\t// Set the transformed parameter to the validated value\n\t\t\t\tsetNestedProperty(\n\t\t\t\t\ttransformedRequest,\n\t\t\t\t\tparamConfig?.param as string,\n\t\t\t\t\tvalue\n\t\t\t\t);\n\t\t\t}\n\t\t\t// If the parameter is not present in the incoming request body but is required, set it to the default value\n\t\t\telse if (\n\t\t\t\tparamConfig &&\n\t\t\t\tparamConfig.required &&\n\t\t\t\tparamConfig.default !== undefined\n\t\t\t) {\n\t\t\t\t// Set the transformed parameter to the default value\n\t\t\t\tsetNestedProperty(\n\t\t\t\t\ttransformedRequest,\n\t\t\t\t\tparamConfig.param,\n\t\t\t\t\tparamConfig.default\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn transformedRequest;\n};\n\nexport default transformToProviderRequest;\n","import { REQUEST_TIMEOUT_STATUS_CODE } from '../../data/globals';\nimport {\n\tAZURE_OPEN_AI,\n\tBEDROCK,\n\tCOHERE,\n\tDEEPINFRA,\n\tGOOGLE,\n\tPERPLEXITY\n} from '../../data/models';\nimport { dlog } from '../dlog';\n\n/**\n * Handles non-streaming responses. Applies the appropriate response transformer to the response.\n * Returns a mapped response in OpenAI format\n * @param {Response} response - The HTTP response recieved from LLM.\n * @param {Function | undefined} responseTransformer - The response transform function given in provider/index.ts.\n * @returns {Promise<any>} - A promise that resolves to the processed response.\n */\n\nexport async function handleNonStreamingMode({\n\tresponse,\n\tresponseTransformer\n}: {\n\tresponse: Response;\n\tresponseTransformer: Function | undefined;\n}): Promise<any> {\n\t// 408 is thrown whenever a request takes more than request_timeout to respond.\n\t// In that case, response thrown by gateway is already in OpenAI format.\n\t// So no need to transform it again.\n\tif (response.status === REQUEST_TIMEOUT_STATUS_CODE) {\n\t\treturn response;\n\t}\n\tlet responseBodyJson = await response.json();\n\n\tdlog('original provider response', responseBodyJson);\n\n\tif (responseTransformer) {\n\t\tresponseBodyJson = responseTransformer(\n\t\t\tresponseBodyJson,\n\t\t\tresponse.status,\n\t\t\tresponse.headers\n\t\t);\n\t}\n\n\treturn responseBodyJson;\n}\n\n/**\n * Handles the streaming mode for a response.\n *\n * @param response - The response object.\n * @param provider - The provider string.\n * @param responseTransformer - The response transformer function.\n * @param requestURL - The request URL string.\n * @returns A promise that resolves to the transformed response or the readable stream.\n * @throws An error if the response format is invalid and the body is not found.\n */\nexport async function handleStreamingMode(\n\tresponse: Response,\n\tprovider: string,\n\tresponseTransformer: Function | undefined,\n\trequestURL: string\n): Promise<any> {\n\tconst splitPattern = getStreamModeSplitPattern(provider, requestURL);\n\tconst fallbackChunkId = Date.now().toString();\n\n\tif (!response.body) {\n\t\tthrow new Error('Response format is invalid. Body not found');\n\t}\n\tconst { readable, writable } = new TransformStream();\n\tconst writer = writable.getWriter();\n\tconst reader = response.body.getReader();\n\tconst isSleepTimeRequired = provider === AZURE_OPEN_AI ? true : false;\n\tconst encoder = new TextEncoder();\n\n\t(async () => {\n\t\tfor await (const chunk of readStream(\n\t\t\treader,\n\t\t\tsplitPattern,\n\t\t\tresponseTransformer,\n\t\t\tisSleepTimeRequired,\n\t\t\tfallbackChunkId\n\t\t)) {\n\t\t\tawait writer.write(encoder.encode(chunk));\n\t\t}\n\t\twriter.close();\n\t})();\n\n\t// Convert GEMINI/COHERE json stream to text/event-stream\n\tif ([GOOGLE, COHERE, BEDROCK].includes(provider) && responseTransformer) {\n\t\treturn readable;\n\t\t// return new Response(readable, {\n\t\t// \t...response,\n\t\t// \theaders: new Headers({\n\t\t// \t\t...Object.fromEntries(response.headers),\n\t\t// \t\t'content-type': 'text/event-stream',\n\t\t// \t}),\n\t\t// });\n\t}\n\n\treturn readable;\n}\n\n/**\n * Returns the split pattern based on the provider and request URL.\n * @param provider - The provider name.\n * @param requestURL - The request endpoint URL.\n * @returns The split pattern.\n */\nexport const getStreamModeSplitPattern = (\n\tprovider: string,\n\trequestURL: string\n) => {\n\tlet splitPattern = '\\n\\n';\n\tif (provider === COHERE) {\n\t\tsplitPattern = '\\n';\n\t}\n\tif (provider === GOOGLE) {\n\t\tsplitPattern = '\\r\\n';\n\t}\n\n\tif (provider === PERPLEXITY) {\n\t\tsplitPattern = '\\r\\n\\r\\n';\n\t}\n\n\tif (provider === DEEPINFRA) {\n\t\tsplitPattern = '\\r\\n\\r\\n';\n\t}\n\n\treturn splitPattern;\n};\n\n/**\n * Asynchronously reads a stream and yields chunks of data based on a split pattern.\n * @param reader The ReadableStreamDefaultReader to read from.\n * @param splitPattern The pattern used to split the chunks of data.\n * @param transformFunction An optional function to transform each chunk of data.\n * @param isSleepTimeRequired A boolean indicating whether sleep time is required between chunks.\n * @param fallbackChunkId The ID to use for fallback chunks.\n * @yields The chunks of data read from the stream.\n */\nexport async function* readStream(\n\treader: ReadableStreamDefaultReader,\n\tsplitPattern: string,\n\ttransformFunction: Function | undefined,\n\tisSleepTimeRequired: boolean,\n\tfallbackChunkId: string\n) {\n\tlet buffer = '';\n\tlet decoder = new TextDecoder();\n\tlet isFirstChunk = true;\n\n\twhile (true) {\n\t\tconst { done, value } = await reader.read();\n\t\tif (done) {\n\t\t\tif (buffer.length > 0) {\n\t\t\t\tif (transformFunction) {\n\t\t\t\t\tyield transformFunction(buffer, fallbackChunkId);\n\t\t\t\t} else {\n\t\t\t\t\tyield buffer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tbuffer += decoder.decode(value, { stream: true });\n\t\t// keep buffering until we have a complete chunk\n\n\t\twhile (buffer.split(splitPattern).length > 1) {\n\t\t\tlet parts = buffer.split(splitPattern);\n\t\t\tlet lastPart = parts.pop() ?? ''; // remove the last part from the array and keep it in buffer\n\t\t\tfor (let part of parts) {\n\t\t\t\t// Some providers send ping event which can be ignored during parsing\n\n\t\t\t\tif (part.length > 0) {\n\t\t\t\t\tif (isFirstChunk) {\n\t\t\t\t\t\tisFirstChunk = false;\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 25));\n\t\t\t\t\t} else if (isSleepTimeRequired) {\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (transformFunction) {\n\t\t\t\t\t\tconst transformedChunk = transformFunction(\n\t\t\t\t\t\t\tpart,\n\t\t\t\t\t\t\tfallbackChunkId\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (transformedChunk !== undefined) {\n\t\t\t\t\t\t\tyield transformedChunk;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tyield part + splitPattern;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbuffer = lastPart; // keep the last part (after the last '\\n\\n') in buffer\n\t\t}\n\t}\n}\n\n// export async function handleJSONToStreamResponse(response: Response, provider: string, responseTransformerFunction: Function): Promise<Response> {\n// \tconst { readable, writable } = new TransformStream();\n// \tconst writer = writable.getWriter();\n// \tconst encoder = new TextEncoder();\n// \tconst responseJSON: OpenAIChatCompleteResponse = await response.clone().json();\n// \tconst streamChunkArray = responseTransformerFunction(responseJSON, provider);\n\n// \t(async () => {\n// \t\tfor (const chunk of streamChunkArray) {\n// \t\t\tawait writer.write(encoder.encode(chunk));\n// \t\t}\n// \t\twriter.close();\n// \t})();\n\n// \treturn new Response(readable, {\n// \t\theaders: new Headers({\n// \t\t\t...Object.fromEntries(response.headers),\n// \t\t\t'content-type': CONTENT_TYPES.EVENT_STREAM\n// \t\t})\n// \t});\n// }\n\n// function readUInt32BE(buffer: Uint8Array, offset: number) {\n// \treturn (\n// \t\t(buffer[offset] << 24) |\n// \t\t(buffer[offset + 1] << 16) |\n// \t\t(buffer[offset + 2] << 8) |\n// \t\tbuffer[offset + 3]\n// \t) >>> 0; // Ensure the result is an unsigned integer\n// }\n\n// function getPayloadFromAWSChunk(chunk: Uint8Array): string {\n// \tconst decoder = new TextDecoder();\n// \tconst chunkLength = readUInt32BE(chunk, 0);\n// \tconst headersLength = readUInt32BE(chunk, 4);\n\n// \t// prelude 8 + Prelude crc 4 = 12\n// \tconst headersEnd = 12 + headersLength;\n\n// \tconst payloadLength = chunkLength - headersEnd - 4; // Subtracting 4 for the message crc\n// \tconst payload = chunk.slice(headersEnd, headersEnd + payloadLength);\n// \treturn decoder.decode(payload);\n// }\n\n// function concatenateUint8Arrays(a: Uint8Array, b: Uint8Array): Uint8Array {\n// \tconst result = new Uint8Array(a.length + b.length);\n// \tresult.set(a, 0); // Copy contents of array 'a' into 'result' starting at index 0\n// \tresult.set(b, a.length); // Copy contents of array 'b' into 'result' starting at index 'a.length'\n// \treturn result;\n// }\n\n// export async function* readAWSStream(reader: ReadableStreamDefaultReader, transformFunction: Function | undefined, fallbackChunkId: string) {\n// \tlet buffer = new Uint8Array();\n// \tlet expectedLength = 0;\n// \twhile (true) {\n// \t\tconst { done, value } = await reader.read();\n// \t\tif (done) {\n// \t\t\tif (buffer.length) {\n// \t\t\t\texpectedLength = readUInt32BE(buffer, 0);\n// \t\t\t\twhile (buffer.length >= expectedLength && buffer.length !== 0) {\n// \t\t\t\t\tconst data = buffer.subarray(0, expectedLength);\n// \t\t\t\t\tbuffer = buffer.subarray(expectedLength);\n// \t\t\t\t\texpectedLength = readUInt32BE(buffer, 0);\n// \t\t\t\t\tconst payload = Buffer.from(JSON.parse(getPayloadFromAWSChunk(data)).bytes, 'base64').toString();\n// \t\t\t\t\tif (transformFunction) {\n// \t\t\t\t\t\tconst transformedChunk = transformFunction(payload, fallbackChunkId);\n// \t\t\t\t\t\tif (Array.isArray(transformedChunk)) {\n// \t\t\t\t\t\t\tfor (var item of transformedChunk) {\n// \t\t\t\t\t\t\t\tyield item;\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t} else {\n// \t\t\t\t\t\t\tyield transformedChunk;\n// \t\t\t\t\t\t}\n// \t\t\t\t\t} else {\n// \t\t\t\t\t\tyield data;\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t}\n// \t\t\tbreak;\n// \t\t}\n\n// \t\tif (expectedLength === 0) {\n// \t\t\texpectedLength = readUInt32BE(value, 0);\n// \t\t}\n\n// \t\tbuffer = concatenateUint8Arrays(buffer, value);\n\n// \t\twhile (buffer.length >= expectedLength && buffer.length !== 0) {\n// \t\t\tconst data = buffer.subarray(0, expectedLength);\n// \t\t\tbuffer = buffer.subarray(expectedLength);\n\n// \t\t\texpectedLength = readUInt32BE(buffer, 0);\n// \t\t\tconst payload = Buffer.from(JSON.parse(getPayloadFromAWSChunk(data)).bytes, 'base64').toString();\n\n// \t\t\tif (transformFunction) {\n// \t\t\t\tconst transformedChunk = transformFunction(payload, fallbackChunkId);\n// \t\t\t\tif (Array.isArray(transformedChunk)) {\n// \t\t\t\t\tfor (var item of transformedChunk) {\n// \t\t\t\t\t\tyield item;\n// \t\t\t\t\t}\n// \t\t\t\t} else {\n// \t\t\t\t\tyield transformedChunk;\n// \t\t\t\t}\n// \t\t\t} else {\n// \t\t\t\tyield data;\n// \t\t\t}\n// \t\t}\n// \t}\n// }\n\n// export async function handleTextResponse(response: Response, responseTransformer: Function | undefined) {\n// \tconst text = await response.text();\n\n// \tif (responseTransformer) {\n// \t\tconst transformedText = responseTransformer({ \"html-message\": text }, response.status);\n// \t\treturn new Response(JSON.stringify(transformedText), {\n// \t\t\t...response,\n// \t\t\tstatus: response.status,\n// \t\t\theaders: new Headers({\n// \t\t\t\t...Object.fromEntries(response.headers),\n// \t\t\t\t'content-type': \"application/json\"\n// \t\t\t})\n// \t\t});\n// \t}\n\n// \treturn new Response(text, response);\n// }\n\n// export async function handleAudioResponse(response: Response) {\n// \treturn new Response(response.body, response);\n// }\n\n// export async function handleOctetStreamResponse(response: Response) {\n// \treturn new Response(response.body, response);\n// }\n\n// export async function handleImageResponse(response: Response) {\n// \treturn new Response(response.body, response);\n// }\n","import type { ModelParams } from '@/types/providers';\nimport {\n\thandleNonStreamingMode,\n\thandleStreamingMode\n} from './response-handler-utils';\nimport Providers from '@/dev/providers';\nimport { dlog } from '../dlog';\n\n/**\n * Handles various types of responses based on the specified parameters\n * and returns a mapped response in OpenAI format\n * @param {Response} response - The HTTP response recieved from LLM.\n * @param {boolean} streamingMode - Indicates whether streaming mode is enabled.\n * @param {string} provider - The provider name string.\n * @param {string | undefined} responseTransformer - The response transform name given in provider/index.ts. Usually is LLM endpoint. For example GoogleChatCompleteResponseTransform.\n * @param {string} requestURL - The URL of the original LLM request.\n * @returns {Promise<any>} - A promise that resolves to the processed response.\n */\nexport function handleProviderResponse({\n\tresponse,\n\tstreamingMode,\n\tprovider,\n\tresponseTransformer,\n\trequestURL,\n\tmodelParams\n}: {\n\tresponse: Response;\n\tstreamingMode: boolean;\n\tprovider: string;\n\tresponseTransformer: string | undefined;\n\trequestURL: string;\n\tmodelParams: ModelParams;\n}): Promise<any> {\n\ttry {\n\t\tlet responseTransformerFunction: Function | undefined;\n\t\t// const responseContentType = response.headers?.get(\"content-type\");\n\n\t\tconst providerConfig = Providers[provider];\n\n\t\t// Get all response transformers of the provider\n\t\tlet providerTransformers = Providers[provider]?.responseTransforms;\n\t\tif (providerConfig.getConfig) {\n\t\t\tproviderTransformers =\n\t\t\t\tproviderConfig.getConfig(modelParams).responseTransforms;\n\t\t}\n\n\t\t// Extract the relevant response transformer\n\t\tif (responseTransformer && streamingMode && response.status === 200) {\n\t\t\tresponseTransformerFunction =\n\t\t\t\tproviderTransformers?.[`stream-${responseTransformer}`];\n\t\t} else if (responseTransformer) {\n\t\t\tresponseTransformerFunction =\n\t\t\t\tproviderTransformers?.[responseTransformer];\n\t\t}\n\n\t\tdlog(\n\t\t\t'transforming provider response using',\n\t\t\tresponseTransformerFunction\n\t\t\t\t? `${provider}${responseTransformer}ResponseTransform`\n\t\t\t\t: 'No transformer found'\n\t\t);\n\n\t\t// STREAMING: Convert the stream into OpenAI Stream.\n\t\tif (streamingMode && response.status === 200) {\n\t\t\treturn handleStreamingMode(\n\t\t\t\tresponse,\n\t\t\t\tprovider,\n\t\t\t\tresponseTransformerFunction,\n\t\t\t\trequestURL\n\t\t\t);\n\t\t}\n\t\t// NON-STREAMING: Apply the appropriate response transformer to the response.\n\t\treturn handleNonStreamingMode({\n\t\t\tresponse,\n\t\t\tresponseTransformer: responseTransformerFunction\n\t\t});\n\t} catch (error) {\n\t\t// Handle the error here, log it, or throw a new error\n\t\tconsole.error('An error occurred in responseHandler:', error);\n\t\tthrow error;\n\t}\n}\n","/**\n * Constructs the request options for the provider API call.\n *\n * @param {any} providerConfigMappedHeaders - Headers mapped according to the provider\n * @param {string} method - The HTTP method for the request. Currently using only POST.\n * @returns {RequestInit} - The fetch options for the request.\n */\nexport function constructRequest({\n\tproviderConfigMappedHeaders,\n\tmethod = 'POST',\n}: {\n\tproviderConfigMappedHeaders: any;\n\tmethod: string;\n}) {\n\tlet baseHeaders: any = {\n\t\t'content-type': 'application/json',\n\t};\n\n\tlet headers: Record<string, string> = {\n\t\t...providerConfigMappedHeaders,\n\t};\n\n\t// Add any extra headers, forward, passthrough headers here\n\theaders = {...baseHeaders, ...headers};\n\n\tlet fetchOptions: RequestInit = {\n\t\tmethod,\n\t\theaders,\n\t};\n\n\t// If the method is GET, delete the content-type header\n\tif (method === 'GET' && fetchOptions.headers) {\n\t\tlet headers = fetchOptions.headers as Record<string, unknown>;\n\t\tdelete headers['content-type'];\n\t}\n\n\treturn fetchOptions;\n}\n","import { handleProviderResponse } from './provider-response-handler';\nimport Providers from '@/dev/providers';\nimport { constructRequest } from './construct-provider-request';\nimport { ANTHROPIC, FIREWORKS_AI, GOOGLE, OLLAMA } from '@/dev/data/models';\nimport { ApiError } from '@/dev/hono/errors';\nimport { dlog } from '../dlog';\nimport type {\n\tendpointStrings,\n\tModelParams,\n\tProviderAPIConfig,\n\tProviderOptions\n} from 'types/providers';\n\n/**\n * Makes a POST request to a provider and returns the response.\n * The POST request is constructed using the provider, llmApiKey, and inputParams parameters.\n * The endpoint parameter is the type of request being made (e.g., \"complete\", \"chatComplete\").\n * Currently only handles non-streamed responses. We handle streaming with provider sdks.\n *\n * @param {ProviderOptions} providerOptions - The provider options.\n * @param {inputParams} inputParams - The langbase model params.\n * @param {string} endpoint - The endpoint of the provider, eg chatComplete, embed, etc.\n * @param {transformedRequestParams} transformedRequestParams - The transformed params in the provider's format.\n * @returns {Promise<any>} - The response from the POST request.\n * @throws Will throw an error if the response is not ok or if all retry attempts fail.\n */\nexport async function handleProviderRequest({\n\tproviderOptions,\n\tinputParams,\n\tendpoint,\n\ttransformedRequestParams\n}: {\n\tproviderOptions: ProviderOptions;\n\tinputParams: ModelParams;\n\tendpoint: endpointStrings;\n\ttransformedRequestParams: { [key: string]: any };\n}): Promise<any> {\n\tconst params: ModelParams = { ...inputParams };\n\n\tconst isStreamingMode = params.stream ? true : false;\n\n\tconst provider: string = providerOptions.provider ?? '';\n\t// Get API request info for the provider\n\tconst apiConfig: ProviderAPIConfig = Providers[provider].api;\n\n\tlet baseUrl: string = '',\n\t\tproviderEndpoint: string,\n\t\tfetchOptions;\n\n\t/**\n\t * Handling providers with different base URLs and endpoints.\n\t * Maps to following functions in providers/provider/api.ts\n\t * headers()\n\t * getEndpoint()\n\t */\n\n\t// Anthropic\n\tif (provider === ANTHROPIC && apiConfig.baseURL) {\n\t\tconst providerConfigMappedHeaders = apiConfig.headers({\n\t\t\tllmApiKey: providerOptions.llmApiKey,\n\t\t\tendpoint\n\t\t});\n\n\t\tfetchOptions = constructRequest({\n\t\t\tproviderConfigMappedHeaders,\n\t\t\tmethod: 'POST'\n\t\t});\n\t\tbaseUrl = baseUrl || apiConfig.baseURL;\n\t\tproviderEndpoint = apiConfig[endpoint] || '';\n\t}\n\t// Google\n\telse if (\n\t\tprovider === GOOGLE &&\n\t\tapiConfig.baseURL &&\n\t\tapiConfig.getEndpoint\n\t) {\n\t\tfetchOptions = constructRequest({\n\t\t\tproviderConfigMappedHeaders: apiConfig.headers(),\n\t\t\tmethod: 'POST'\n\t\t});\n\t\tbaseUrl = baseUrl || apiConfig.baseURL;\n\t\tproviderEndpoint = apiConfig.getEndpoint({\n\t\t\tendpoint,\n\t\t\tllmApiKey: providerOptions.llmApiKey,\n\t\t\tmodel: transformedRequestParams.model,\n\t\t\tstream: params.stream\n\t\t});\n\t}\n\t// Fireworks AI\n\telse if (\n\t\tprovider === FIREWORKS_AI &&\n\t\tapiConfig.baseURL &&\n\t\tapiConfig.getEndpoint\n\t) {\n\t\tfetchOptions = constructRequest({\n\t\t\tproviderConfigMappedHeaders: apiConfig.headers({\n\t\t\t\tllmApiKey: providerOptions.llmApiKey\n\t\t\t}),\n\t\t\tmethod: 'POST'\n\t\t});\n\t\tbaseUrl = baseUrl || apiConfig.baseURL;\n\t\tproviderEndpoint = apiConfig.getEndpoint({ endpoint });\n\t}\n\t// Ollama\n\telse if (provider === OLLAMA && apiConfig.getBaseURL) {\n\t\tfetchOptions = constructRequest({\n\t\t\tproviderConfigMappedHeaders: apiConfig.headers(),\n\t\t\tmethod: 'POST'\n\t\t});\n\t\tbaseUrl = apiConfig.getBaseURL({ providerOptions });\n\t\tproviderEndpoint = apiConfig[endpoint] || '';\n\n\t\tdlog('Ollama request', {\n\t\t\tbaseUrl,\n\t\t\tproviderEndpoint,\n\t\t\ttransformedRequestParams\n\t\t});\n\t}\n\t// Other providers\n\telse {\n\t\tfetchOptions = constructRequest({\n\t\t\tproviderConfigMappedHeaders: apiConfig.headers(\n\t\t\t\tproviderOptions.llmApiKey\n\t\t\t),\n\t\t\tmethod: 'POST'\n\t\t});\n\n\t\t// We can support custom base urls and endpoints here\n\t\tbaseUrl = baseUrl || apiConfig.baseURL || '';\n\t\tproviderEndpoint = apiConfig[endpoint] || '';\n\t}\n\n\t// Construct the request URL and body\n\tconst url = `${baseUrl}${providerEndpoint}`;\n\tfetchOptions.body = JSON.stringify(transformedRequestParams);\n\n\tlet response;\n\n\ttry {\n\t\tresponse = (await fetch(url, fetchOptions)) as unknown as Response & {\n\t\t\twebSocket?: any;\n\t\t\tcf?: any;\n\t\t};\n\n\t\t// Transform provider's response into OpenAI format\n\t\tconst transformedResponse = await handleProviderResponse({\n\t\t\tresponse,\n\t\t\tstreamingMode: isStreamingMode,\n\t\t\tprovider,\n\t\t\tresponseTransformer: endpoint,\n\t\t\trequestURL: url,\n\t\t\tmodelParams: params\n\t\t});\n\n\t\tdlog('Transformed provider response', transformedResponse);\n\n\t\t// Handle LLM errors.\n\t\tif (!response.ok) {\n\t\t\tthrow transformedResponse.error;\n\t\t}\n\n\t\treturn transformedResponse;\n\t} catch (error: any) {\n\t\tconsole.error(error);\n\t\tthrow new ApiError({\n\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\tmessage: error.message\n\t\t});\n\t}\n}\n","import { jsonModeModels } from '@/dev/data/models';\n\nexport function isJsonModeOn({\n\tcurrentModel,\n\tjsonMode\n}: {\n\tcurrentModel: string;\n\tjsonMode: boolean;\n}) {\n\tconst modelHasJsonMode = jsonModeModels.includes(currentModel);\n\tconst jsonModeOn = jsonMode;\n\tif (jsonModeOn && modelHasJsonMode) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n","import type { ModelParams } from 'types/providers';\nimport { ApiError } from '../hono/errors';\nimport { dlog } from '../utils/dlog';\nimport { isJsonModeOn } from '../utils/is-json-mode';\nimport type { Pipe } from 'types/pipe';\n\nexport function handleLlmError({\n\terror,\n\tprovider\n}: {\n\terror: any;\n\tprovider: string;\n}) {\n\tdlog(`Error call-${provider}.ts:`, error);\n\tthrow new ApiError({\n\t\tcode: 'BAD_REQUEST',\n\t\tmessage: `Error from ${provider}: ${error.message}`\n\t});\n}\n\nexport function applyJsonModeIfEnabled(modelParams: ModelParams, pipe: Pipe) {\n\tconst hasJsonMode = isJsonModeOn({\n\t\tcurrentModel: modelParams.model as string,\n\t\tjsonMode: pipe.json || false\n\t});\n\n\tif (hasJsonMode) {\n\t\tmodelParams.response_format = { type: 'json_object' };\n\t}\n}\n\nexport function applyJsonModeIfEnabledForGoogle(\n\ttransformedRequestParams: any,\n\tpipe: Pipe\n) {\n\tconst currentModel = pipe.model.split(':')[1];\n\tconst hasJsonMode = isJsonModeOn({\n\t\tcurrentModel,\n\t\tjsonMode: pipe.json || false\n\t});\n\n\tif (hasJsonMode) {\n\t\ttransformedRequestParams.generationConfig = {\n\t\t\t...transformedRequestParams.generationConfig,\n\t\t\tresponseMimeType: 'application/json'\n\t\t};\n\t}\n}\n","import {\n\tANTHROPIC,\n\tCOHERE,\n\tFIREWORKS_AI,\n\tGOOGLE,\n\tGROQ,\n\tOLLAMA,\n\tOPEN_AI,\n\tPERPLEXITY,\n\tTOGETHER_AI,\n\tX_AI\n} from '@/data/models';\n\ntype Provider =\n\t| typeof OPEN_AI\n\t| typeof ANTHROPIC\n\t| typeof TOGETHER_AI\n\t| typeof GOOGLE\n\t| typeof GROQ\n\t| typeof COHERE\n\t| typeof FIREWORKS_AI\n\t| typeof PERPLEXITY;\n\n/**\n * Retrieves the provider based on the given provider string.\n *\n * @param providerString - The provider string.\n * @returns The corresponding provider object.\n * @throws Error if the provider is unknown.\n */\nexport function getProvider(providerString: string): Provider {\n\tconst providerMap: { [key: string]: Provider } = {\n\t\topenai: OPEN_AI,\n\t\tanthropic: ANTHROPIC,\n\t\ttogether: TOGETHER_AI,\n\t\tgoogle: GOOGLE,\n\t\tgroq: GROQ,\n\t\tcohere: COHERE,\n\t\tfireworks: FIREWORKS_AI,\n\t\tperplexity: PERPLEXITY,\n\t\tollama: OLLAMA,\n\t\txai: X_AI\n\t};\n\n\tconst provider = providerMap[providerString.toLowerCase()];\n\tif (!provider) {\n\t\tthrow new Error(`Unknown provider: ${providerString}`);\n\t}\n\treturn provider;\n}\n","import { modelsByProvider } from '@/data/models';\n\nexport function hasToolSupport({\n\tprovider,\n\tmodelName\n}: {\n\tmodelName: string;\n\tprovider: string;\n}) {\n\tconst toolSupportedModels = modelsByProvider[provider].filter(\n\t\tmodel => model.toolSupport\n\t);\n\tconst hasToolCallSupport = toolSupportedModels\n\t\t.flatMap(model => model.id)\n\t\t.includes(modelName);\n\n\treturn hasToolCallSupport;\n}\n\nexport function getSupportedToolSettings({\n\tprovider,\n\tmodelName\n}: {\n\tmodelName: string;\n\tprovider: string;\n}) {\n\tconst toolSupportedModels = modelsByProvider[provider].filter(\n\t\tmodel => model.toolSupport\n\t);\n\tconst providerModel = toolSupportedModels.find(\n\t\tmodel => model.id === modelName\n\t);\n\n\tif (!providerModel) {\n\t\treturn {\n\t\t\thasParallelToolCallSupport: false,\n\t\t\thasToolChoiceSupport: false\n\t\t};\n\t}\n\n\treturn {\n\t\thasToolChoiceSupport: providerModel.toolSupport?.toolChoice,\n\t\thasParallelToolCallSupport: providerModel.toolSupport?.parallelToolCalls\n\t};\n}\n","import type { Pipe, ToolCall } from 'types/pipe';\nimport { getProvider } from './get-provider';\nimport { getSupportedToolSettings, hasToolSupport } from './has-tool-support';\nimport type { ModelParams } from 'types/providers';\nimport type { PipeTool } from 'types/tools';\n\nexport function addToolsToParams(\n\tmodelParams: ModelParams,\n\tpipe: Pipe,\n\tparamsTools: PipeTool[] | undefined\n) {\n\tconst pipeTools = pipe.tools as unknown as string[];\n\tconst hasParamsTools = paramsTools && paramsTools.length > 0;\n\n\t// 1. If no tools are provided, return the modelParams as is\n\tif (!hasParamsTools && !pipeTools.length) return modelParams;\n\n\tconst [providerString, modelName] = pipe.model.split(':');\n\tconst provider = getProvider(providerString);\n\n\t// Check if the model supports tool calls\n\tconst hasToolCallSupport = hasToolSupport({\n\t\tmodelName,\n\t\tprovider\n\t});\n\n\t// 2. If the model does not support tool calls, return the modelParams as is\n\tif (!hasToolCallSupport) return modelParams;\n\n\t// If tools are provided in request param, prioritize and use them\n\tif (hasParamsTools) {\n\t\tmodelParams.tools = paramsTools as ToolCall[];\n\t}\n\n\t// If tools are not provided in request param, use the tools from the pipe config\n\tif (!hasParamsTools && pipeTools.length) {\n\t\tmodelParams.tools = pipe.tools as ToolCall[];\n\t}\n\n\tconst { hasParallelToolCallSupport, hasToolChoiceSupport } =\n\t\tgetSupportedToolSettings({\n\t\t\tmodelName,\n\t\t\tprovider\n\t\t});\n\n\tif (hasParallelToolCallSupport) {\n\t\tmodelParams.parallel_tool_calls = pipe.parallel_tool_calls;\n\t}\n\n\tif (hasToolChoiceSupport) {\n\t\tmodelParams.tool_choice = pipe.tool_choice;\n\t}\n}\n","import { dlog } from '../utils/dlog';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { handleProviderRequest } from '../utils/provider-handlers/provider-request-handler';\nimport { ANTHROPIC } from '../data/models';\nimport { handleLlmError } from './utils';\nimport type { ModelParams } from 'types/providers';\nimport type { Message, Pipe } from 'types/pipe';\nimport { addToolsToParams } from '../utils/add-tools-to-params';\nimport type { PipeTool } from 'types/tools';\n\nexport async function callAnthropic({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream,\n\tparamsTools\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tstream: boolean;\n\tmessages: Message[];\n\tparamsTools: PipeTool[] | undefined;\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\t\taddToolsToParams(modelParams, pipe, paramsTools);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: ANTHROPIC,\n\t\t\tparams: modelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\t\tdlog('Anthropic request params', transformedRequestParams);\n\n\t\tconst providerOptions = { provider: ANTHROPIC, llmApiKey };\n\n\t\treturn await handleProviderRequest({\n\t\t\tproviderOptions,\n\t\t\tinputParams: modelParams,\n\t\t\tendpoint: 'chatComplete',\n\t\t\ttransformedRequestParams\n\t\t});\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: ANTHROPIC });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import { handleProviderRequest } from '../utils/provider-handlers/provider-request-handler';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { dlog } from '../utils/dlog';\nimport { COHERE } from '../data/models';\nimport { handleLlmError } from './utils';\nimport type { ModelParams } from 'types/providers';\nimport type { Message, Pipe } from 'types/pipe';\n\nexport async function callCohere({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tmessages: Message[];\n\tstream: boolean;\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: COHERE,\n\t\t\tparams: modelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\t\tdlog('Cohere request params', transformedRequestParams);\n\n\t\tconst providerOptions = { provider: COHERE, llmApiKey };\n\n\t\treturn await handleProviderRequest({\n\t\t\tproviderOptions,\n\t\t\tinputParams: modelParams,\n\t\t\tendpoint: 'chatComplete',\n\t\t\ttransformedRequestParams\n\t\t});\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: COHERE });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import { dlog } from '../utils/dlog';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { handleProviderRequest } from '../utils/provider-handlers/provider-request-handler';\nimport { FIREWORKS_AI } from '../data/models';\n\nimport { handleLlmError } from './utils';\nimport type { ModelParams } from 'types/providers';\nimport type { Message, Pipe } from 'types/pipe';\n\nexport async function callFireworks({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tstream: boolean;\n\tmessages: Message[];\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: FIREWORKS_AI,\n\t\t\tparams: modelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\t\tdlog('Fireworks request params', transformedRequestParams);\n\n\t\t// Fireworks llama-3.1 405b behaves weirdly with stop value. Bug on their side. Omitting it.\n\t\tif (modelParams?.model === 'llama-v3p1-405b-instruct')\n\t\t\tdelete transformedRequestParams['stop'];\n\n\t\tconst providerOptions = { provider: FIREWORKS_AI, llmApiKey };\n\n\t\treturn await handleProviderRequest({\n\t\t\tproviderOptions,\n\t\t\tinputParams: modelParams,\n\t\t\tendpoint: 'chatComplete',\n\t\t\ttransformedRequestParams\n\t\t});\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: FIREWORKS_AI });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\t// Create model strings for Fireworks AI\n\tconst pipeModel = pipe.model.split(':')[1];\n\tconst model =\n\t\tpipeModel === 'yi-large'\n\t\t\t? 'accounts/yi-01-ai/models/yi-large'\n\t\t\t: `accounts/fireworks/models/${pipeModel}`;\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import { dlog } from '../utils/dlog';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { handleProviderRequest } from '../utils/provider-handlers/provider-request-handler';\nimport { GOOGLE } from '../data/models';\nimport { applyJsonModeIfEnabledForGoogle, handleLlmError } from './utils';\nimport type { ModelParams } from 'types/providers';\nimport type { Message, Pipe } from 'types/pipe';\nimport { addToolsToParams } from '../utils/add-tools-to-params';\nimport type { PipeTool } from 'types/tools';\n\nexport async function callGoogle({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream,\n\tparamsTools\n}: {\n\tpipe: Pipe;\n\tstream: boolean;\n\tllmApiKey: string;\n\tmessages: Message[];\n\tparamsTools: PipeTool[] | undefined;\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\t\taddToolsToParams(modelParams, pipe, paramsTools);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: GOOGLE,\n\t\t\tparams: modelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\n\t\tapplyJsonModeIfEnabledForGoogle(transformedRequestParams, pipe);\n\n\t\tdlog('Google request params', transformedRequestParams);\n\n\t\tconst providerOptions = { provider: GOOGLE, llmApiKey };\n\n\t\treturn await handleProviderRequest({\n\t\t\tproviderOptions,\n\t\t\tinputParams: modelParams,\n\t\t\tendpoint: 'chatComplete',\n\t\t\ttransformedRequestParams\n\t\t});\n\t} catch (error: any) {\n\t\timproveGoogleErrorMessage(error);\n\t\thandleLlmError({ error, provider: GOOGLE });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n\nfunction improveGoogleErrorMessage(error: any) {\n\tif (\n\t\terror.message.includes(\n\t\t\t`models/gemini-1.5-pro-latest is not found for API version v1`\n\t\t)\n\t) {\n\t\terror.message = `You don't have access to gemini-1.5-pro-latest by Google Cloud AI. Contact Google support.`;\n\t}\n\tif (\n\t\terror.message.includes(\n\t\t\t`models/gemini-1.5-flash is not found for API version v1`\n\t\t)\n\t) {\n\t\terror.message = `You don't have access to gemini-1.5-flash by Google Cloud AI. Contact Google support.`;\n\t}\n}\n","import OpenAI from 'openai';\nimport { dlog } from '../utils/dlog';\nimport { GROQ } from '../data/models';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { applyJsonModeIfEnabled, handleLlmError } from './utils';\nimport type { ModelParams } from 'types/providers';\nimport type { Message, Pipe } from 'types/pipe';\n\nexport async function callGroq({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tstream: boolean;\n\tmessages: Message[];\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\t\tconst groq = new OpenAI({\n\t\t\tapiKey: llmApiKey,\n\t\t\tbaseURL: 'https://api.groq.com/openai/v1'\n\t\t});\n\t\tapplyJsonModeIfEnabled(modelParams, pipe);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: GROQ,\n\t\t\tparams: modelParams as ModelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\t\tdlog('Groq request params', transformedRequestParams);\n\n\t\treturn await groq.chat.completions.create(\n\t\t\ttransformedRequestParams as any\n\t\t);\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: GROQ });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import { dlog } from '../utils/dlog';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { handleProviderRequest } from '../utils/provider-handlers/provider-request-handler';\n\nimport { OLLAMA } from '../data/models';\nimport { handleLlmError } from './utils';\nimport type { Message, Pipe } from 'types/pipe';\nimport type { ModelParams } from 'types/providers';\n\nexport async function callOllama({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tstream: boolean;\n\tmessages: Message[];\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: OLLAMA,\n\t\t\tparams: modelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\t\tdlog('ollama request params', transformedRequestParams);\n\n\t\tconst providerOptions = { provider: OLLAMA, llmApiKey };\n\t\treturn await handleProviderRequest({\n\t\t\tproviderOptions,\n\t\t\tinputParams: modelParams,\n\t\t\tendpoint: 'chatComplete',\n\t\t\ttransformedRequestParams\n\t\t});\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: OLLAMA });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import { ApiError } from '@/dev/hono/errors';\nimport OpenAI from 'openai';\nimport { dlog } from '../utils/dlog';\nimport { moderate } from '../utils/moderate';\nimport { OPEN_AI } from '../data/models';\nimport { applyJsonModeIfEnabled, handleLlmError } from './utils';\nimport type { Message, Pipe } from 'types/pipe';\nimport type { ModelParams } from 'types/providers';\nimport { addToolsToParams } from '../utils/add-tools-to-params';\nimport type { PipeTool } from 'types/tools';\n\nexport async function callOpenAI({\n\tpipe,\n\tstream,\n\tllmApiKey,\n\tmessages,\n\tparamsTools\n}: {\n\tpipe: Pipe;\n\tstream: boolean;\n\tllmApiKey: string;\n\tmessages: Message[];\n\tparamsTools: PipeTool[] | undefined;\n}) {\n\ttry {\n\t\tvalidateInput(pipe, messages);\n\t\tconst openai = new OpenAI({ apiKey: llmApiKey });\n\t\tawait moderateContent(openai, messages, pipe.moderate);\n\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\t\taddToolsToParams(modelParams, pipe, paramsTools);\n\t\tapplyJsonModeIfEnabled(modelParams, pipe);\n\n\t\tdlog('modelParams', modelParams);\n\t\treturn await openai.chat.completions.create(modelParams as any);\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: OPEN_AI });\n\t}\n}\n\nfunction validateInput(pipe: Pipe, messages: Message[]) {\n\tif (!pipe || !pipe.model || !messages || messages.length === 0) {\n\t\tthrow new ApiError({\n\t\t\tcode: 'BAD_REQUEST',\n\t\t\tmessage: 'Invalid input: pipe or messages are missing or empty'\n\t\t});\n\t}\n}\n\nasync function moderateContent(\n\topenai: OpenAI,\n\tmessages: Message[],\n\tshouldModerate: boolean = true\n) {\n\tif (shouldModerate) {\n\t\tconst { flagged, reason } = await moderate({\n\t\t\topenai,\n\t\t\tprompt: { messages, variables: [] }\n\t\t});\n\n\t\tif (flagged) {\n\t\t\tthrow new ApiError({\n\t\t\t\tcode: 'BAD_REQUEST',\n\t\t\t\tmessage: reason\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel: model || 'gpt-4o-mini',\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import OpenAI from 'openai';\nimport type { Message } from 'types/pipe';\n\nexport async function moderate({\n\topenai,\n\tprompt\n}: {\n\topenai: OpenAI;\n\tprompt: {\n\t\tmessages: Message[];\n\t\tvariables: any[];\n\t};\n}) {\n\t// Construct a string representation of the prompt\n\tlet promptText = '';\n\n\t// Process messages if they exist\n\tif (prompt.messages && prompt.messages.length > 0) {\n\t\tfor (const message of prompt.messages) {\n\t\t\tpromptText += message.content + '\\n';\n\t\t}\n\t}\n\n\t// Process variables if they exist\n\tif (prompt.variables && prompt.variables.length > 0) {\n\t\tfor (const variable of prompt.variables) {\n\t\t\tpromptText += `${variable.name}: ${variable.value}\\n`;\n\t\t}\n\t}\n\n\t// Perform moderation on the constructed prompt text\n\tconst moderation = await openai.moderations.create({\n\t\tmodel: 'omni-moderation-latest',\n\t\tinput: promptText\n\t});\n\tconst result = moderation?.results[0];\n\t// dlog('moderation:', result);\n\n\t// Content is flagged by OpenAI's moderation\n\tif (result.flagged) {\n\t\t// Filter categories to only include those that are true\n\t\tconst flaggedCategories = Object.entries(result.categories)\n\t\t\t.filter(([, value]) => value === true)\n\t\t\t.map(([key]) => key.replace('/', ' or ')); // Replace slashes for readability\n\n\t\tconst reasons = flaggedCategories.join(', ');\n\n\t\t// Construct and return the error message\n\t\treturn {\n\t\t\tflagged: result.flagged,\n\t\t\treason: `Content flagged by OpenAI moderation endpoint due to: ${reasons}`\n\t\t};\n\t}\n\n\treturn {\n\t\tflagged: result.flagged,\n\t\treason: 'Content passed OpenAI moderation successfully'\n\t};\n}\n","import { dlog } from '../utils/dlog';\nimport transformToProviderRequest from '../utils/provider-handlers/transfrom-to-provider-request';\nimport { handleProviderRequest } from '../utils/provider-handlers/provider-request-handler';\n\nimport { PERPLEXITY } from '../data/models';\nimport { handleLlmError } from './utils';\nimport type { Message, Pipe } from 'types/pipe';\nimport type { ModelParams } from 'types/providers';\n\nexport async function callPerplexity({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tstream: boolean;\n\tmessages: Message[];\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\n\t\t// Transform params according to provider's format\n\t\tconst transformedRequestParams = transformToProviderRequest({\n\t\t\tprovider: PERPLEXITY,\n\t\t\tparams: modelParams,\n\t\t\tfn: 'chatComplete'\n\t\t});\n\t\tdlog('Perplexity request params', transformedRequestParams);\n\n\t\tconst providerOptions = { provider: PERPLEXITY, llmApiKey };\n\t\treturn await handleProviderRequest({\n\t\t\tproviderOptions,\n\t\t\tinputParams: modelParams,\n\t\t\tendpoint: 'chatComplete',\n\t\t\ttransformedRequestParams\n\t\t});\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: PERPLEXITY });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import OpenAI from 'openai';\nimport { dlog } from '../utils/dlog';\nimport { GROQ } from '../data/models';\nimport { applyJsonModeIfEnabled, handleLlmError } from './utils';\nimport type { Message, Pipe } from 'types/pipe';\nimport type { ModelParams } from 'types/providers';\nimport { addToolsToParams } from '../utils/add-tools-to-params';\nimport type { PipeTool } from 'types/tools';\n\nexport async function callTogether({\n\tpipe,\n\tmessages,\n\tllmApiKey,\n\tstream,\n\tparamsTools\n}: {\n\tpipe: Pipe;\n\tllmApiKey: string;\n\tstream: boolean;\n\tmessages: Message[];\n\tparamsTools: PipeTool[] | undefined;\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\n\t\t// LLM.\n\t\tconst together = new OpenAI({\n\t\t\tapiKey: llmApiKey,\n\t\t\tbaseURL: 'https://api.together.xyz/v1'\n\t\t});\n\n\t\t// Together behaves weirdly with stop value. Omitting it.\n\t\tdelete modelParams['stop'];\n\t\tapplyJsonModeIfEnabled(modelParams, pipe);\n\t\taddToolsToParams(modelParams, pipe, paramsTools);\n\t\tdlog('modelParams', modelParams);\n\n\t\treturn await together.chat.completions.create(modelParams as any);\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: GROQ });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import OpenAI from 'openai';\nimport { dlog } from '../utils/dlog';\nimport { X_AI } from '../data/models';\nimport { handleLlmError } from './utils';\nimport type { Message, Pipe } from 'types/pipe';\nimport type { ModelParams } from 'types/providers';\nimport { addToolsToParams } from '../utils/add-tools-to-params';\nimport type { PipeTool } from 'types/tools';\n\nexport async function callXAI({\n\tpipe,\n\tstream,\n\tllmApiKey,\n\tmessages,\n\tparamsTools\n}: {\n\tpipe: Pipe;\n\tstream: boolean;\n\tllmApiKey: string;\n\tmessages: Message[];\n\tparamsTools: PipeTool[] | undefined;\n}) {\n\ttry {\n\t\tconst modelParams = buildModelParams(pipe, stream, messages);\n\n\t\t// LLM.\n\t\tconst groq = new OpenAI({\n\t\t\tapiKey: llmApiKey,\n\t\t\tbaseURL: 'https://api.x.ai/v1'\n\t\t});\n\n\t\t// Add tools (functions) to modelParams\n\t\taddToolsToParams(modelParams, pipe, paramsTools);\n\t\tdlog('modelParams', modelParams);\n\n\t\treturn await groq.chat.completions.create(modelParams as any);\n\t} catch (error: any) {\n\t\thandleLlmError({ error, provider: X_AI });\n\t}\n}\n\nfunction buildModelParams(\n\tpipe: Pipe,\n\tstream: boolean,\n\tmessages: Message[]\n): ModelParams {\n\tconst model = pipe.model.split(':')[1];\n\tconst {\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t} = pipe;\n\treturn {\n\t\tmessages,\n\t\tstream,\n\t\tmodel,\n\t\ttop_p,\n\t\tmax_tokens,\n\t\ttemperature,\n\t\tpresence_penalty,\n\t\tfrequency_penalty,\n\t\tstop\n\t};\n}\n","import {\n\tANTHROPIC,\n\tCOHERE,\n\tFIREWORKS_AI,\n\tGOOGLE,\n\tGROQ,\n\tOLLAMA,\n\tOPEN_AI,\n\tPERPLEXITY,\n\tTOGETHER_AI,\n\tX_AI\n} from '@/dev/data/models';\n\nimport { addContextFromMemory } from '@/utils/memory/lib';\nimport type { Message, Pipe, VariablesI } from 'types/pipe';\nimport { ApiError } from '../hono/errors';\nimport { dlog } from '../utils/dlog';\nimport { getRunThread } from '../utils/thread/get-run-thread';\nimport { callAnthropic } from './call-anthropic';\nimport { callCohere } from './call-cohere';\nimport { callFireworks } from './call-fireworks';\nimport { callGoogle } from './call-google';\nimport { callGroq } from './call-groq';\nimport { callOllama } from './call-ollama';\nimport { callOpenAI } from './call-openai';\nimport { callPerplexity } from './call-perplexity';\nimport { callTogether } from './call-together';\nimport { callXAI } from './call-xai';\nimport { getProvider } from '../utils/get-provider';\nimport type { PipeTool } from 'types/tools';\n\nexport async function callLLM({\n\tpipe,\n\tstream,\n\tmessages,\n\tllmApiKey,\n\tvariables,\n\tparamsTools\n}: {\n\tpipe: Pipe;\n\tstream: boolean;\n\tllmApiKey: string;\n\tmessages: Message[];\n\tvariables?: VariablesI;\n\tparamsTools: PipeTool[] | undefined;\n}) {\n\ttry {\n\t\t// Get the model provider from the pipe.\n\t\tconst providerString = pipe.model.split(':')[0];\n\t\tconst modelProvider = getProvider(providerString);\n\n\t\tconst memoryNames = pipe.memory.map(memory => memory.name);\n\n\t\tconst similarChunks = await addContextFromMemory({\n\t\t\tmessages,\n\t\t\tmemoryNames\n\t\t});\n\n\t\t// Process the messages to be sent to the model provider.\n\t\tconst messagesThread = getRunThread({\n\t\t\tpipe,\n\t\t\tmessages,\n\t\t\tsimilarChunks,\n\t\t\tvariables\n\t\t});\n\t\tmessages = messagesThread;\n\n\t\tdlog('Messages for LLM', messages);\n\n\t\tif (modelProvider === OPEN_AI) {\n\t\t\tdlog('OPEN_AI', '✅');\n\t\t\treturn await callOpenAI({\n\t\t\t\tpipe,\n\t\t\t\tstream,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tparamsTools\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === ANTHROPIC) {\n\t\t\tdlog('ANTHROPIC', '✅');\n\t\t\treturn await callAnthropic({\n\t\t\t\tpipe,\n\t\t\t\tstream,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tparamsTools\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === TOGETHER_AI) {\n\t\t\tdlog('TOGETHER_AI', '✅');\n\t\t\treturn await callTogether({\n\t\t\t\tpipe,\n\t\t\t\tstream,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tparamsTools,\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === GROQ) {\n\t\t\tdlog('GROQ', '✅');\n\t\t\treturn await callGroq({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === GOOGLE) {\n\t\t\tdlog('GOOGLE', '✅');\n\t\t\treturn await callGoogle({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream,\n\t\t\t\tparamsTools\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === X_AI) {\n\t\t\tdlog('XAI', '✅');\n\t\t\treturn await callXAI({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream,\n\t\t\t\tparamsTools\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === COHERE) {\n\t\t\tdlog('COHERE', '✅');\n\t\t\treturn await callCohere({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === FIREWORKS_AI) {\n\t\t\tdlog('FIREWORKS_AI', '✅');\n\t\t\treturn await callFireworks({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === PERPLEXITY) {\n\t\t\tdlog('PERPLEXITY', '✅');\n\t\t\treturn await callPerplexity({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream\n\t\t\t});\n\t\t}\n\n\t\tif (modelProvider === OLLAMA) {\n\t\t\tdlog('OLLAMA', '✅');\n\t\t\treturn await callOllama({\n\t\t\t\tpipe,\n\t\t\t\tmessages,\n\t\t\t\tllmApiKey,\n\t\t\t\tstream\n\t\t\t});\n\t\t}\n\n\t\tthrow new ApiError({\n\t\t\tstatus: 400,\n\t\t\tcode: `BAD_REQUEST`,\n\t\t\tmessage: `Invalid model provider: ${modelProvider}`\n\t\t});\n\t} catch (error: any) {\n\t\tdlog('Error call-llm.ts:', error);\n\n\t\t// If the model provider is rate limited, throw an error.\n\t\tif (error.status === 429) {\n\t\t\tthrow new ApiError({\n\t\t\t\tstatus: 429,\n\t\t\t\tcode: `RATE_LIMITED`,\n\t\t\t\tmessage: `Rate limited by the model provider. Please try again later. ${error.message}`\n\t\t\t});\n\t\t}\n\n\t\t// Main catch will handle all other errors.\n\t\tthrow new ApiError({\n\t\t\tstatus: error.status,\n\t\t\tcode: error.code || 'INTERNAL_SERVER_ERROR',\n\t\t\tmessage: error.message\n\t\t\t\t? error.message\n\t\t\t\t: 'Error calling the model provider.'\n\t\t});\n\t}\n}\n","import type { Context } from 'hono';\nimport { ApiError } from '@/dev/hono/errors';\nimport type { HonoEnv } from '@/dev/hono/env';\n\n/**\n * Handles streaming response from OpenAI and other providers.\n *\n * It handles the two cases accordingly\n * ReadableStream: Return as it is\n * Async Iterator: Convert to OpenAI SSE format Readable stream and return it\n * Returns the stream in OpenAI API SSE format\n *\n * @param {Response} response - The Streaming response.\n * @param {string} provider - The provider name string.\n * @param {any | undefined} headers - Optional headers to send with the streamed response\n * @returns {Promise<any>} - A promise that resolves to the processed response.\n */\nexport const handleStreamingResponse = async ({\n\tc,\n\tresponse,\n\theaders\n}: {\n\tc: Context<HonoEnv>;\n\tresponse: any;\n\theaders?: any;\n}): Promise<any> => {\n\ttry {\n\t\t// Response is from our provider transform\n\t\tif (response instanceof ReadableStream) {\n\t\t\t// Dulplicate the stream because a stream can only be consumed once.\n\t\t\tconst [streamForResponse] = response.tee();\n\n\t\t\treturn new Response(streamForResponse, {\n\t\t\t\t// Send headers if provided\n\t\t\t\theaders: { 'content-type': 'text/event-stream', ...headers }\n\t\t\t});\n\t\t} else {\n\t\t\t/**\n\t\t\t * Response is from OpenAI SDK:\n\t\t\t * It is an async iterator\n\t\t\t * We transform it into OpenAI SSE format and return it\n\t\t\t */\n\t\t\t// Handle async iterators (e.g., from OpenAI SDK)\n\t\t\tconst stream = new ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tconst encoder = new TextEncoder();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor await (const chunk of response) {\n\t\t\t\t\t\t\tconst data = JSON.stringify(chunk);\n\t\t\t\t\t\t\tcontroller.enqueue(\n\t\t\t\t\t\t\t\tencoder.encode(`data: ${data}\\n\\n`)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error processing stream:', error);\n\t\t\t\t\t\tcontroller.error(error);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcontroller.enqueue(encoder.encode('data: [DONE]\\n\\n'));\n\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn new Response(stream, {\n\t\t\t\t// Send headers if provided\n\t\t\t\theaders: { 'content-type': 'text/event-stream', ...headers }\n\t\t\t});\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('Error in handleStreamingResponse:', error);\n\t\tthrow new ApiError({\n\t\t\tcode: 'INTERNAL_SERVER_ERROR',\n\t\t\tmessage: `Error while streaming: ${error}`\n\t\t});\n\t}\n};\n","import { ApiError, ApiErrorZod } from '@/dev/hono/errors';\nimport { callLLM } from '@/dev/llms/call-llm';\nimport { dlog } from '@/dev/utils/dlog';\nimport { handleStreamingResponse } from '@/dev/utils/provider-handlers/streaming-response-handler';\nimport { logger } from '@/utils/logger-utils';\nimport { Hono } from 'hono';\nimport {\n\tschemaMessage,\n\ttoolChoiceSchema,\n\tVariablesSchema,\n\ttype PipeModelT\n} from 'types/pipe';\nimport { pipeToolSchema } from 'types/tools';\nimport { z } from 'zod';\n\n// Schema definitions\nconst PipeSchema = z.object({\n\tname: z.string(),\n\tdescription: z.string(),\n\tstatus: z.enum(['public', 'private']),\n\tmodel: z.string(),\n\tstream: z.boolean(),\n\tjson: z.boolean(),\n\tstore: z.boolean(),\n\tmoderate: z.boolean(),\n\ttop_p: z.number(),\n\tmax_tokens: z.number(),\n\ttemperature: z.number(),\n\tpresence_penalty: z.number(),\n\tfrequency_penalty: z.number(),\n\tstop: z.array(z.string()),\n\ttool_choice: z\n\t\t.union([z.enum(['auto', 'required', 'none']), toolChoiceSchema])\n\t\t.default('auto'),\n\tparallel_tool_calls: z.boolean(),\n\tmessages: z.array(schemaMessage),\n\tvariables: VariablesSchema,\n\ttools: z.array(pipeToolSchema).default([]),\n\tmemory: z.array(z.object({ name: z.string().trim().min(1) })).default([])\n});\n\nconst RequestBodySchema = z.object({\n\tpipe: PipeSchema,\n\tstream: z.boolean(),\n\tmessages: z.array(schemaMessage),\n\tllmApiKey: z.string(),\n\ttools: z.array(pipeToolSchema).optional(),\n\tvariables: VariablesSchema.optional()\n});\n\ntype RequestBody = z.infer<typeof RequestBodySchema>;\n\n// Helper functions\nconst validateRequestBody = (body: unknown): RequestBody => {\n\tconst result = RequestBodySchema.safeParse(body);\n\tif (!result.success) {\n\t\tthrow new ApiErrorZod({\n\t\t\tcode: 'BAD_REQUEST',\n\t\t\tvalidationResult: result,\n\t\t\tcustomMessage: 'Invalid request body'\n\t\t});\n\t}\n\treturn result.data;\n};\n\nconst processLlmResponse = (c: any, body: RequestBody, rawLlmResponse: any) => {\n\tconst isStreaming = body.stream;\n\n\t// Non-streaming\n\tif (!isStreaming && rawLlmResponse?.choices?.length > 0) {\n\t\tconst completion = rawLlmResponse.choices[0]?.message?.content ?? '';\n\t\tconst toolCalls = rawLlmResponse.choices[0]?.message?.tool_calls ?? [];\n\t\tconst isToolCall = toolCalls.length > 0;\n\n\t\tlogger('tool', isToolCall, 'Tool calls found');\n\t\tlogger('tool.calls', toolCalls);\n\t\tlogger('pipe.completion', completion, 'Pipe completion');\n\t\tlogger('pipe.response', rawLlmResponse, 'type: (non-streaming)');\n\n\t\treturn c.json({ completion, ...rawLlmResponse });\n\t}\n\n\t// Streaming\n\tif (isStreaming) {\n\t\tlogger('pipe.response', rawLlmResponse, 'type: (streaming)');\n\t\treturn handleStreamingResponse({\n\t\t\tresponse: rawLlmResponse,\n\t\t\theaders: {},\n\t\t\tc\n\t\t});\n\t}\n\treturn c.json({ body });\n};\n\nconst handleGenerateError = (c: any, error: unknown) => {\n\tif (error instanceof ApiErrorZod) {\n\t\tthrow error;\n\t}\n\n\tconst errorMessage =\n\t\terror instanceof Error\n\t\t\t? error.message\n\t\t\t: 'Unexpected error occurred in /pipe/v1/run';\n\n\tdlog('Error /pipe/v1/run.ts:', error);\n\n\tthrow new ApiError({\n\t\tstatus: error instanceof ApiError ? error.status : 500,\n\t\tcode: error instanceof ApiError ? error.code : 'INTERNAL_SERVER_ERROR',\n\t\tmessage: errorMessage,\n\t\tdocs: error instanceof ApiError ? error.docs : undefined\n\t});\n};\n\n// Main endpoint handler\nconst handleRun = async (c: any) => {\n\ttry {\n\t\tconst body = await c.req.json();\n\n\t\tconst llmKey = (body.llmApiKey as string) || '';\n\t\tconst hiddenChars = new Array(45).fill('*').join('');\n\t\tconst redactedKey = llmKey.length\n\t\t\t? llmKey.slice(0, 8) + hiddenChars\n\t\t\t: '';\n\n\t\tconst logData = { ...body, llmApiKey: redactedKey };\n\t\tlogger('pipe.request', logData, 'Pipe Request Body');\n\n\t\tconst validatedBody = validateRequestBody(body);\n\n\t\tconst { pipe, messages, llmApiKey, stream, variables } = validatedBody;\n\t\tconst model = pipe.model as PipeModelT;\n\n\t\tconst rawLlmResponse = await callLLM({\n\t\t\tpipe: {\n\t\t\t\t...pipe,\n\t\t\t\tmodel\n\t\t\t},\n\t\t\tmessages,\n\t\t\tllmApiKey,\n\t\t\tstream,\n\t\t\tvariables,\n\t\t\tparamsTools: validatedBody.tools\n\t\t});\n\n\t\treturn processLlmResponse(c, validatedBody, rawLlmResponse);\n\t} catch (error: unknown) {\n\t\treturn handleGenerateError(c, error);\n\t}\n};\n\n// Register the endpoint\nexport const registerV1PipesRun = (app: Hono) => {\n\tapp.post('/v1/pipes/run', handleRun);\n};\n","import { z } from 'zod';\nimport type {\n\tAnthropicModels,\n\tCohereModels,\n\tFireworksAIModels,\n\tGoogleModels,\n\tGroqModels,\n\tMistralAIModels,\n\tOllamaModels,\n\tOpenAIModels,\n\tPerplexityModels,\n\tTogetherModels\n} from './model';\nimport type { PipeTool } from './tools';\n\nexport const schemaMessage = z\n\t.object({\n\t\trole: z.enum(['system', 'user', 'assistant', 'function', 'tool']),\n\t\tcontent: z.string().nullable(),\n\t\ttool_call_id: z.string().optional(),\n\t\tname: z.string().optional(),\n\t\ttool_calls: z\n\t\t\t.array(\n\t\t\t\tz.object({\n\t\t\t\t\tid: z.string(),\n\t\t\t\t\ttype: z.string(),\n\t\t\t\t\tfunction: z.record(z.unknown())\n\t\t\t\t})\n\t\t\t)\n\t\t\t.optional()\n\t})\n\t.refine(\n\t\t({ content, role, tool_calls }) => {\n\t\t\t// If content is null, role isn't assistant and tool_calls is not present.\n\t\t\t// then the schema is invalid\n\t\t\t// because the message content is null and its not an assistant tool call\n\t\t\tconst isSchemaInvalid =\n\t\t\t\tcontent === null && role !== 'assistant' && !tool_calls;\n\n\t\t\tif (isSchemaInvalid) return false;\n\t\t\treturn true;\n\t\t},\n\t\t{\n\t\t\tmessage: 'Message content cannot be empty.'\n\t\t}\n\t);\n\nexport type Message = z.infer<typeof schemaMessage>;\n\nexport const VariableSchema = z.object({\n\tname: z.string(),\n\tvalue: z.string()\n});\n\nexport const VariablesSchema = z.array(VariableSchema).default([]);\n\nexport type VariablesI = z.infer<typeof VariablesSchema>;\nexport type VariableI = z.infer<typeof VariableSchema>;\n\ninterface ToolFunction {\n\tname: string;\n}\n\ninterface ToolChoiceFunction {\n\ttype: 'function';\n\tfunction: ToolFunction;\n}\n\nexport type ToolChoice = 'auto' | 'required' | 'none' | ToolChoiceFunction;\n\nexport type PipeModelT =\n\t| OpenAIModels\n\t| TogetherModels\n\t| AnthropicModels\n\t| GroqModels\n\t| GoogleModels\n\t| CohereModels\n\t| FireworksAIModels\n\t| PerplexityModels\n\t| MistralAIModels\n\t| OllamaModels;\n\nexport interface Pipe {\n\tapiKey?: string;\n\tname: string;\n\tdescription: string;\n\tstatus: 'public' | 'private';\n\tmodel: PipeModelT;\n\tstream: boolean;\n\tjson: boolean;\n\tstore: boolean;\n\tmoderate: boolean;\n\ttop_p: number;\n\tmax_tokens: number;\n\ttemperature: number;\n\tpresence_penalty: number;\n\tfrequency_penalty: number;\n\tstop: string[];\n\ttool_choice: ToolChoice;\n\tparallel_tool_calls: boolean;\n\tmessages: Message[];\n\tvariables: VariablesI;\n\ttools: PipeTool[];\n\tmemory: {\n\t\tname: string;\n\t}[];\n}\n\nexport interface PipeOld {\n\tname: string;\n\tdescription: string;\n\tstatus: string;\n\tconfig: {\n\t\tmeta: {\n\t\t\tstream: boolean;\n\t\t\tjson: boolean;\n\t\t\tstore: boolean;\n\t\t\tmoderate: boolean;\n\t\t};\n\t\tmodel: {\n\t\t\tname: string;\n\t\t\tprovider: string;\n\t\t\tparams: {\n\t\t\t\ttop_p: number;\n\t\t\t\tmax_tokens: number;\n\t\t\t\ttemperature: number;\n\t\t\t\tpresence_penalty: number;\n\t\t\t\tfrequency_penalty: number;\n\t\t\t\tstop: string[];\n\t\t\t};\n\t\t\ttool_choice: ToolChoice;\n\t\t\tparallel_tool_calls: boolean;\n\t\t};\n\t\tprompt: {\n\t\t\tsystem: string;\n\t\t\topening: string;\n\t\t\tsafety: string;\n\t\t\tmessages: { role: string; content: string }[];\n\t\t\tvariables: VariablesI;\n\t\t\tjson: string;\n\t\t\trag: string;\n\t\t};\n\t\ttools: any[];\n\t\tmemorysets: string[];\n\t};\n}\n\nexport interface ToolCall {\n\tid: string;\n\ttype: string;\n\tfunction: {\n\t\tname: string;\n\t\targuments: string;\n\t};\n}\n\nconst functionNameRegex = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/;\n\nexport const toolChoiceSchema = z\n\t.object({\n\t\ttype: z.enum(['function']).default('function'),\n\t\tfunction: z.object({\n\t\t\tname: z.string().refine(value => functionNameRegex.test(value))\n\t\t})\n\t})\n\t.optional();\n","import { z } from 'zod';\n\nexport interface Tool {\n\trun: (...args: any[]) => Promise<any> | any;\n\ttype: 'function';\n\tfunction: {\n\t\tname: string;\n\t\tdescription?: string;\n\t\tparameters?: Record<string, any>;\n\t};\n}\n\nexport const pipeToolSchema = z.object({\n\ttype: z.literal('function'),\n\tfunction: z.object({\n\t\tname: z.string(),\n\t\tdescription: z.string().optional(),\n\t\tparameters: z.record(z.any()).optional()\n\t})\n});\n\nexport type PipeTool = z.infer<typeof pipeToolSchema>;\n","import { defaultConfig } from '@/utils/config/config-handler';\nimport { cyan, dimItalic } from '@/utils/formatting';\nimport { heading } from '@/utils/heading';\nimport { formatCode } from '@/utils/ts-format-code';\nimport { detect } from '@antfu/ni';\nimport * as p from '@clack/prompts';\nimport { execa } from 'execa';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport color from 'picocolors';\n\ntype PackageManager = 'yarn' | 'pnpm' | 'bun' | 'npm';\n\nfunction exitSetupFailed({\n\terrorMessage,\n\twarningMessage\n}: {\n\terrorMessage: string;\n\twarningMessage: string;\n}): never {\n\tp.log.error(`Setup failed: ${errorMessage}`);\n\tp.log.warn(warningMessage);\n\tp.cancel('Setup aborted.');\n\tprocess.exit(1);\n}\n\nasync function displayIntro({\n\tcalledAsCommand\n}: {\n\tcalledAsCommand: boolean;\n}): Promise<void> {\n\tif (calledAsCommand) {\n\t\tp.intro(heading({ text: 'SETUP', sub: 'Setting up BaseAI' }));\n\t}\n}\n\nasync function ensurePackageJson(): Promise<void> {\n\tconst exists = await checkFileExists('package.json');\n\tif (!exists) {\n\t\tconst create = await p.confirm({\n\t\t\tmessage: `No ${color.red('package.json')} found. Would you like to create one using ${color.cyan(color.bold('npm init -y'))}?`\n\t\t});\n\n\t\tif (p.isCancel(create)) {\n\t\t\tp.cancel('Operation cancelled.');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!create) {\n\t\t\texitSetupFailed({\n\t\t\t\terrorMessage: 'Cannot proceed without a package.json file.',\n\t\t\t\twarningMessage:\n\t\t\t\t\t'Run the command in a directory with a package.json file or allow the setup to create one.'\n\t\t\t});\n\t\t}\n\n\t\ttry {\n\t\t\tawait execa('npm', ['init', '-y']);\n\t\t\tp.log.success('Created package.json file.');\n\t\t} catch (error) {\n\t\t\texitSetupFailed({\n\t\t\t\terrorMessage: `Failed to create package.json: ${error instanceof Error ? error.message : String(error)}`,\n\t\t\t\twarningMessage:\n\t\t\t\t\t'Ensure you have permission to create files in this directory and npm is installed.'\n\t\t\t});\n\t\t}\n\t}\n}\n\nasync function getPackageManager(targetDir: string): Promise<PackageManager> {\n\tconst packageManager = await detect({ programmatic: true, cwd: targetDir });\n\n\tif (packageManager === 'yarn@berry') return 'yarn';\n\tif (packageManager === 'pnpm@6') return 'pnpm';\n\tif (packageManager === 'bun') return 'bun';\n\n\treturn packageManager ?? 'npm';\n}\n\nasync function checkBaseAIInstalled(): Promise<boolean> {\n\ttry {\n\t\tconst packageJson = JSON.parse(\n\t\t\tawait fs.readFile('package.json', 'utf-8')\n\t\t);\n\t\tconst hasBaseAIDev = 'baseai' in (packageJson.devDependencies || {});\n\t\tconst hasBaseAICore =\n\t\t\t'@baseai/core' in (packageJson.dependencies || {});\n\t\treturn hasBaseAIDev && hasBaseAICore;\n\t} catch (error) {\n\t\treturn false;\n\t}\n}\n\nasync function installBaseAI(packageManager: PackageManager): Promise<void> {\n\tconst isInstalled = await checkBaseAIInstalled();\n\tif (isInstalled) {\n\t\treturn;\n\t}\n\n\tconst s = p.spinner();\n\ts.start('Installing BaseAI');\n\n\tconst installCmd = {\n\t\tnpm: 'install',\n\t\tyarn: 'add',\n\t\tpnpm: 'add',\n\t\tbun: 'add'\n\t}[packageManager];\n\n\ttry {\n\t\tawait execa(packageManager, [installCmd, '@baseai/core']);\n\t\tawait execa(packageManager, [installCmd, 'baseai', '--save-dev']);\n\t\ts.stop('BaseAI installed successfully.');\n\t} catch (error) {\n\t\texitSetupFailed({\n\t\t\terrorMessage: `BaseAI installation failed: ${error instanceof Error ? error.message : String(error)}`,\n\t\t\twarningMessage:\n\t\t\t\t'Ensure you have an active internet connection and the necessary permissions to install packages.'\n\t\t});\n\t}\n}\n\nasync function createDirIfNotExists(dir: string): Promise<boolean> {\n\ttry {\n\t\tawait fs.access(dir);\n\t\treturn false; // Directory already exists\n\t} catch {\n\t\tawait fs.mkdir(dir, { recursive: true });\n\t\treturn true; // Directory was created\n\t}\n}\n\nasync function checkFileExists(filePath: string): Promise<boolean> {\n\ttry {\n\t\tawait fs.access(filePath);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n\nasync function createBaseAIDirectories(): Promise<void> {\n\tconst baseaiFolder = path.join(process.cwd(), 'baseai');\n\tconst dotBaseaiFolder = path.join(process.cwd(), '.baseai');\n\n\ttry {\n\t\tconst baseaiCreated = await createDirIfNotExists(baseaiFolder);\n\t\tconst dotBaseaiCreated = await createDirIfNotExists(dotBaseaiFolder);\n\n\t\tif (baseaiCreated && dotBaseaiCreated) {\n\t\t\tp.log.success('Added `baseai` directory to your project.');\n\t\t}\n\t} catch (error) {\n\t\texitSetupFailed({\n\t\t\terrorMessage: `Error setting up directories: ${error instanceof Error ? error.message : String(error)}`,\n\t\t\twarningMessage:\n\t\t\t\t'Ensure you have permission to create directories in this location.'\n\t\t});\n\t}\n}\n\nexport async function createConfigFile(): Promise<void> {\n\tconst configPath = path.join(process.cwd(), 'baseai', 'baseai.config.ts');\n\n\tconst exists = await checkFileExists(configPath);\n\tif (!exists) {\n\t\tconst configContent = `\nimport type {BaseAIConfig} from 'baseai';\n\nexport const config: BaseAIConfig = ${JSON.stringify(defaultConfig, null, 2)};\n`;\n\n\t\ttry {\n\t\t\tconst formattedCode = await formatCode(configContent);\n\t\t\tawait fs.writeFile(configPath, formattedCode);\n\t\t\tp.log.success(\n\t\t\t\t'Created `baseai.config.ts` with default configuration.'\n\t\t\t);\n\t\t} catch (error) {\n\t\t\texitSetupFailed({\n\t\t\t\terrorMessage: `Failed to create baseai.config.ts: ${error instanceof Error ? error.message : String(error)}`,\n\t\t\t\twarningMessage:\n\t\t\t\t\t'Ensure you have permission to create files in the baseai directory.'\n\t\t\t});\n\t\t}\n\t}\n}\n\nasync function updatePackageJsonScript(): Promise<void> {\n\ttry {\n\t\tconst packageJsonPath = path.join(process.cwd(), 'package.json');\n\t\tconst packageJsonContent = await fs.readFile(packageJsonPath, 'utf-8');\n\t\tconst packageJson = JSON.parse(packageJsonContent);\n\n\t\tif (!packageJson.scripts) {\n\t\t\tpackageJson.scripts = {};\n\t\t}\n\n\t\tif (\n\t\t\t!packageJson.scripts.baseai ||\n\t\t\tpackageJson.scripts.baseai !== 'baseai'\n\t\t) {\n\t\t\tpackageJson.scripts.baseai = 'baseai';\n\t\t\tawait fs.writeFile(\n\t\t\t\tpackageJsonPath,\n\t\t\t\tJSON.stringify(packageJson, null, 2)\n\t\t\t);\n\t\t\tp.log.success('Added \"baseai\" script in package.json');\n\t\t} else {\n\t\t\t// p.log.info(\n\t\t\t// \t'\"baseai\" script already exists and is correct in package.json'\n\t\t\t// );\n\t\t}\n\t} catch (error) {\n\t\texitSetupFailed({\n\t\t\terrorMessage: `Failed to update package.json: ${error instanceof Error ? error.message : String(error)}`,\n\t\t\twarningMessage:\n\t\t\t\t'Ensure you have permission to modify the package.json file.'\n\t\t});\n\t}\n}\n\nfunction displayOutro({ calledAsCommand }: { calledAsCommand: boolean }): void {\n\tif (calledAsCommand) {\n\t\tp.outro('All good. BaseAI setup completed successfully!');\n\t\tp.log.warning(\n\t\t\tdimItalic(\n\t\t\t\t`Make sure to set environment variables like mentioned in the ${cyan(`.env.baseai.example`)} file added to your project root.`\n\t\t\t)\n\t\t);\n\t} else {\n\t\tconsole.log();\n\t}\n}\n\nasync function updateGitignore({\n\tgitignoreEntry\n}: {\n\tgitignoreEntry: string;\n}): Promise<void> {\n\tconst gitignorePath = path.join(process.cwd(), '.gitignore');\n\n\ttry {\n\t\tlet gitignoreContent = '';\n\t\ttry {\n\t\t\tgitignoreContent = await fs.readFile(gitignorePath, 'utf-8');\n\t\t} catch (error) {\n\t\t\t// File doesn't exist, create it with the new entry\n\t\t\tawait fs.writeFile(gitignorePath, gitignoreEntry);\n\t\t\treturn; // Exit the function as we've already added the entry\n\t\t}\n\n\t\t// Check if the exact entry already exists\n\t\tif (!gitignoreContent.includes(gitignoreEntry)) {\n\t\t\t// Ensure there's a newline before adding the new entry if the file isn't empty\n\t\t\tconst updatedContent = gitignoreContent.endsWith('\\n')\n\t\t\t\t? gitignoreContent + gitignoreEntry\n\t\t\t\t: gitignoreContent + '\\n' + gitignoreEntry;\n\n\t\t\tawait fs.writeFile(gitignorePath, updatedContent);\n\t\t}\n\t} catch (error) {\n\t\tp.log.error(\n\t\t\t`Error updating .gitignore: ${error instanceof Error ? error.message : String(error)}`\n\t\t);\n\t}\n}\n\nasync function createEnvBaseAIExample(): Promise<void> {\n\tconst envBaseAIExamplePath = path.join(\n\t\tprocess.cwd(),\n\t\t'.env.baseai.example'\n\t);\n\tconst envBaseAIExampleContent = `# !! SERVER SIDE ONLY !!\n# Keep all your API keys secret — use only on the server side.\n\n# TODO: ADD: Both in your production and local env files.\n# Langbase API key for your User or Org account.\n# How to get this API key https://langbase.com/docs/api-reference/api-keys\nLANGBASE_API_KEY=\n\n# TODO: ADD: LOCAL ONLY. Add only to local env files.\n# Following keys are needed for local pipe runs. For providers you are using.\n# For Langbase, please add the key to your LLM keysets.\n# Read more: Langbase LLM Keysets https://langbase.com/docs/features/keysets\nOPENAI_API_KEY=\nANTHROPIC_API_KEY=\nCOHERE_API_KEY=\nFIREWORKS_API_KEY=\nGOOGLE_API_KEY=\nGROQ_API_KEY=\nMISTRAL_API_KEY=\nPERPLEXITY_API_KEY=\nTOGETHER_API_KEY=\nXAI_API_KEY=\n`;\n\n\ttry {\n\t\tconst exists = await checkFileExists(envBaseAIExamplePath);\n\t\tif (!exists) {\n\t\t\tawait fs.writeFile(envBaseAIExamplePath, envBaseAIExampleContent);\n\t\t\t// p.log.success('Created `.env.baseai.example` file.');\n\t\t} else {\n\t\t\t// p.log.info(\n\t\t\t// \t'`.env.baseai.example` file already exists. Skipping creation.'\n\t\t\t// );\n\t\t}\n\t} catch (error) {\n\t\tp.log.error(\n\t\t\t`Error creating .env.baseai.example: Check the example env file here https://github.com/LangbaseInc/baseai/blob/main/.env.baseai.example\\n Error: ${error instanceof Error ? error.message : String(error)}`\n\t\t);\n\t}\n}\n\nexport async function init({\n\tcalledAsCommand = false,\n\tdebug = false\n}: { calledAsCommand?: boolean; debug?: boolean } = {}): Promise<void> {\n\t// Add interrupt handler\n\tconst interruptHandler = () => {\n\t\tconsole.log('\\nInterrupted. Cleaning up...');\n\t\t// Add any necessary cleanup here\n\t\tprocess.exit(0);\n\t};\n\n\tprocess.on('SIGINT', interruptHandler);\n\n\ttry {\n\t\tawait displayIntro({ calledAsCommand });\n\t\tawait ensurePackageJson();\n\t\tconst packageManager = await getPackageManager(process.cwd());\n\t\tif (calledAsCommand) {\n\t\t\tp.log.info(`Detected package manager: ${packageManager}`);\n\t\t}\n\n\t\tconst isBaseAIInstalled = await checkBaseAIInstalled();\n\n\t\tif (!isBaseAIInstalled) {\n\t\t\tconst installBaseAIChoice = await p.confirm({\n\t\t\t\tmessage:\n\t\t\t\t\t'BaseAI is not installed but required to run. Would you like to install it?'\n\t\t\t});\n\n\t\t\tif (p.isCancel(installBaseAIChoice)) {\n\t\t\t\tp.cancel('Operation cancelled.');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tif (installBaseAIChoice) {\n\t\t\t\tawait installBaseAI(packageManager);\n\t\t\t} else {\n\t\t\t\texitSetupFailed({\n\t\t\t\t\terrorMessage: 'BaseAI packages are required for setup.',\n\t\t\t\t\twarningMessage:\n\t\t\t\t\t\t'Run the setup again and allow installation of BaseAI packages to continue.'\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tawait createBaseAIDirectories();\n\t\tawait createConfigFile();\n\t\tawait updatePackageJsonScript();\n\t\tawait updateGitignore({ gitignoreEntry: `# baseai\\n**/.baseai/\\n` });\n\t\tawait updateGitignore({ gitignoreEntry: `# env file\\n.env\\n` });\n\t\tawait createEnvBaseAIExample();\n\n\t\tdisplayOutro({ calledAsCommand });\n\t} catch (error: any) {\n\t\tdebug && console.error('Error:', error);\n\t\tp.cancel(`baseai init error ${error.message ? error.message : error}`);\n\t\tprocess.exit(1);\n\t} finally {\n\t\t// Remove the interrupt handler after initialization\n\t\tprocess.off('SIGINT', interruptHandler);\n\t}\n}\n","import { cyan, dim, dimItalic } from '@/utils/formatting';\nimport { heading } from '@/utils/heading';\nimport { createDb } from '@/utils/memory/db/lib';\nimport * as p from '@clack/prompts';\nimport slugify from '@sindresorhus/slugify';\nimport camelCase from 'camelcase';\nimport figures from 'figures';\nimport fs from 'fs';\nimport path from 'path';\nimport { memoryNameSchema } from 'types/memory';\nimport { fromZodError } from 'zod-validation-error';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\nconst defaultConfig = {\n\tname: 'ai-agent-memory',\n\tdescription: 'My list of docs as memory for an AI agent pipe'\n};\n\nconst MEMORY_CONSTANTS = {\n\tdocumentsDir: 'documents'\n};\n\nexport async function createMemory() {\n\tp.intro(heading({ text: 'MEMORY', sub: 'Create a new memory' }));\n\n\tconst memoryInfo = await p.group(\n\t\t{\n\t\t\tname: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'Name of the memory',\n\t\t\t\t\tplaceholder: defaultConfig.name,\n\t\t\t\t\tvalidate: value => {\n\t\t\t\t\t\tconst validatedName = memoryNameSchema.safeParse(value);\n\t\t\t\t\t\tif (!validatedName.success) {\n\t\t\t\t\t\t\tconst validationError = fromZodError(\n\t\t\t\t\t\t\t\tvalidatedName.error\n\t\t\t\t\t\t\t).toString();\n\t\t\t\t\t\t\treturn validationError;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tdescription: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'Description of the memory',\n\t\t\t\t\tplaceholder: defaultConfig.description\n\t\t\t\t}),\n\t\t\tuseGit: () =>\n\t\t\t\tp.confirm({\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t'Do you want to create memory from current project git repository?',\n\t\t\t\t\tinitialValue: false\n\t\t\t\t})\n\t\t},\n\t\t{\n\t\t\tonCancel: () => {\n\t\t\t\tp.cancel('Operation cancelled.');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\t\t}\n\t);\n\n\tconst memoryNameSlugified = slugify(memoryInfo.name);\n\tconst memoryNameCamelCase = camelCase('memory-' + memoryNameSlugified);\n\tconst baseDir = path.join(process.cwd(), 'baseai', 'memory');\n\tconst memoryDir = path.join(baseDir, memoryNameSlugified);\n\tconst filePath = path.join(memoryDir, 'index.ts');\n\tconst dbDir = path.join(process.cwd(), '.baseai', 'db');\n\n\tif (memoryInfo.useGit) {\n\t\ttry {\n\t\t\tawait execAsync('git rev-parse --is-inside-work-tree');\n\t\t} catch (error) {\n\t\t\tp.cancel('The current directory is not a Git repository.');\n\t\t\tprocess.exit(1);\n\t\t}\n\t}\n\n\tconst memoryContent = `import {MemoryI} from '@baseai/core';\n\nconst ${memoryNameCamelCase} = (): MemoryI => ({\n\tname: '${memoryNameSlugified}',\n\tdescription: ${JSON.stringify(memoryInfo.description || '')},\n\tgit: {\n\t\tenabled: ${memoryInfo.useGit},${\n\t\t\tmemoryInfo.useGit\n\t\t\t\t? `\n\t\tinclude: ['**/*'],\n\t\tgitignore: true,`\n\t\t\t\t: `\n\t\tinclude: ['${MEMORY_CONSTANTS.documentsDir}/**/*'],\n\t\tgitignore: false,`\n\t\t}\n\t\tdeployedAt: '',\n\t\tembeddedAt: ''\n\t}\n});\n\nexport default ${memoryNameCamelCase};`;\n\n\ttry {\n\t\tawait fs.promises.mkdir(baseDir, { recursive: true });\n\t\tawait fs.promises.mkdir(memoryDir, { recursive: true });\n\t\tawait fs.promises.writeFile(filePath, memoryContent);\n\t\tawait fs.promises.mkdir(dbDir, { recursive: true });\n\n\t\tif (!memoryInfo.useGit) {\n\t\t\tconst memoryDocumentsPath = path.join(\n\t\t\t\tmemoryDir,\n\t\t\t\tMEMORY_CONSTANTS.documentsDir\n\t\t\t);\n\t\t\tawait fs.promises.mkdir(memoryDocumentsPath, { recursive: true });\n\t\t\tp.note(\n\t\t\t\t`Add documents in baseai/memory/${memoryNameSlugified}/${cyan(`documents`)} to use them in the memory.`\n\t\t\t);\n\t\t} else {\n\t\t\tp.note(\n\t\t\t\t[\n\t\t\t\t\t'All files in this Git repository will be tracked by default.',\n\t\t\t\t\t'',\n\t\t\t\t\t`To modify which files are being tracked, update the config at:`,\n\t\t\t\t\tcyan(filePath)\n\t\t\t\t].join('\\n')\n\t\t\t);\n\t\t}\n\n\t\tawait createDb(memoryNameSlugified);\n\n\t\tp.outro(\n\t\t\theading({\n\t\t\t\ttext: memoryNameCamelCase,\n\t\t\t\tsub: `created as a new memory \\n ${dim(figures.pointer)} ${dimItalic(` ${filePath}`)}`,\n\t\t\t\tgreen: true\n\t\t\t})\n\t\t);\n\t\tprocess.exit(0);\n\t} catch (error: any) {\n\t\tp.cancel(`Error creating memory: ${error.message}`);\n\t\tprocess.exit(1);\n\t}\n}\n","import { heading } from '@/utils/heading';\nimport { checkMemoryExists } from '@/utils/memory/check-memory-exist';\nimport { deleteDocumentFromDB, loadDb } from '@/utils/memory/db/lib';\nimport { generateEmbeddings } from '@/utils/memory/generate-embeddings';\nimport {\n\thandleGitSyncMemories,\n\tupdateEmbeddedCommitHash\n} from '@/utils/memory/git-sync/handle-git-sync-memories';\nimport { validateMemoryName } from '@/utils/memory/lib';\nimport loadMemoryConfig from '@/utils/memory/load-memory-config';\nimport { loadMemoryFiles } from '@/utils/memory/load-memory-files';\nimport * as p from '@clack/prompts';\nimport color from 'picocolors';\n\nexport async function embedMemory({\n\tmemoryName: memoryNameInput,\n\toverwrite,\n\tuseLocalEmbeddings\n}: {\n\tmemoryName: string;\n\toverwrite?: boolean;\n\tuseLocalEmbeddings?: boolean;\n}) {\n\t// Spinner to show current action.\n\tconst s = p.spinner();\n\n\ttry {\n\t\tp.intro(\n\t\t\theading({\n\t\t\t\ttext: 'EMBED',\n\t\t\t\tsub: `Creating embeddings of ${color.cyan(memoryNameInput)}`\n\t\t\t})\n\t\t);\n\n\t\tif (!memoryNameInput) {\n\t\t\tp.cancel(\n\t\t\t\t'Memory name is required. Use --memory or -m flag to specify.'\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\t// 1- Check memory exists.\n\t\tconst memoryName = validateMemoryName(memoryNameInput);\n\t\tawait checkMemoryExists(memoryName);\n\n\t\t// 2- Load memory data.\n\t\ts.start('Processing memory docs...');\n\t\tlet memoryFiles = await loadMemoryFiles(memoryName);\n\n\t\tif (memoryFiles.length === 0) {\n\t\t\tp.cancel(`No valid documents found in memory '${memoryName}'.`);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\t// 3- Get memory config.\n\t\tconst memoryConfig = await loadMemoryConfig(memoryName);\n\n\t\tlet filesToEmbed: string[] = [];\n\t\tlet filesToDelete: string[] = [];\n\n\t\tif (memoryConfig.git.enabled) {\n\t\t\tconst { filesToDeploy, filesToDelete: gitFilesToDelete } =\n\t\t\t\tawait handleGitSyncMemories({\n\t\t\t\t\tmemoryName: memoryName,\n\t\t\t\t\tconfig: memoryConfig\n\t\t\t\t});\n\n\t\t\tfilesToEmbed = filesToDeploy;\n\t\t\tfilesToDelete = gitFilesToDelete;\n\n\t\t\t// Filter memory files to emebed\n\t\t\tmemoryFiles = memoryFiles.filter(doc =>\n\t\t\t\tfilesToEmbed.includes(doc.name)\n\t\t\t);\n\t\t}\n\n\t\t// 4- Generate embeddings.\n\t\tlet embedResult = 'Embeddings updated.';\n\t\tif (memoryFiles && memoryFiles.length > 0) {\n\t\t\ts.message('Generating embeddings...');\n\t\t\tconst shouldOverwrite = memoryConfig.git.enabled ? true : overwrite;\n\t\t\tembedResult = await generateEmbeddings({\n\t\t\t\tmemoryFiles,\n\t\t\t\tmemoryName,\n\t\t\t\toverwrite: shouldOverwrite || false,\n\t\t\t\tuseLocalEmbeddings\n\t\t\t});\n\t\t}\n\n\t\tif (memoryConfig.git.enabled) {\n\t\t\tif (filesToDelete.length > 0) {\n\t\t\t\tawait deleteDocumentsFromDB({\n\t\t\t\t\tmemoryName,\n\t\t\t\t\tfilesToDelete\n\t\t\t\t});\n\t\t\t}\n\t\t\tawait updateEmbeddedCommitHash(memoryName);\n\t\t\tp.log.info('Updated embedded commit hash.');\n\t\t\tp.log.success('Synced memory files with git repository.');\n\t\t}\n\n\t\ts.stop(embedResult);\n\t} catch (error: any) {\n\t\ts.stop(`Stopped!`);\n\t\tp.cancel(`FAILED: ${error.message}`);\n\t\tprocess.exit(1);\n\t}\n}\n\nexport async function deleteDocumentsFromDB({\n\tmemoryName,\n\tfilesToDelete\n}: {\n\tmemoryName: string;\n\tfilesToDelete: string[];\n}) {\n\tconst s = p.spinner();\n\ts.start('Detected files to delete. Deleting...');\n\n\ttry {\n\t\tconst memoryDb = await loadDb(memoryName);\n\n\t\tfor (const docName of filesToDelete) {\n\t\t\tif (memoryDb.data.documents[docName]) {\n\t\t\t\tawait deleteDocumentFromDB({ db: memoryDb, docName });\n\t\t\t\tp.log.info(`Deleted document: ${color.cyan(docName)}`);\n\t\t\t}\n\t\t}\n\n\t\ts.stop(`Documents deleted from memory ${memoryName}.`);\n\t} catch (error) {\n\t\ts.stop('Stopped!');\n\t\tif (error instanceof Error) {\n\t\t\tp.cancel(`Failed to delete documents: ${error.message}`);\n\t\t} else {\n\t\t\tp.cancel(`Failed to delete documents. An unknown error occurred.`);\n\t\t}\n\t\tprocess.exit(1);\n\t}\n}\n","import { heading } from '@/utils/heading';\nimport { isMemoryDocExist } from '@/utils/memory/check-memory-doc-exists';\nimport { generateEmbeddings } from '@/utils/memory/generate-embeddings';\nimport * as p from '@clack/prompts';\nimport color from 'picocolors';\n\nexport async function embedDoc({\n\tmemoryName,\n\tdocumentName,\n\toverwrite = false\n}: {\n\tmemoryName: string;\n\tdocumentName: string;\n\toverwrite?: boolean;\n}) {\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'EMBED DOC',\n\t\t\tsub: `Creating embeddings of Doc: ${color.cyan(documentName)} in memory ${color.cyan(memoryName)}`\n\t\t})\n\t);\n\n\t// Spinner to show current action.\n\tconst spinner = p.spinner();\n\n\ttry {\n\t\tconst { memoryFile, validMemoryName } = await isMemoryDocExist({\n\t\t\tspinner,\n\t\t\tmemoryName,\n\t\t\tdocumentName\n\t\t});\n\n\t\t// Generate embeddings.\n\t\tspinner.message('Generating embeddings...');\n\t\tconst result = await generateEmbeddings({\n\t\t\tmemoryFiles: [memoryFile],\n\t\t\tmemoryName: validMemoryName,\n\t\t\toverwrite: overwrite || false\n\t\t});\n\n\t\tspinner.stop(result);\n\t} catch (error: any) {\n\t\tspinner.stop(`FAILED from here: ${error.message}`);\n\t\tprocess.exit(1);\n\t}\n}\n","import path from 'path';\nimport fs from 'fs';\n\nexport async function getAvailableMemories() {\n\ttry {\n\t\t// Construct the path containing all memories folders.\n\t\tconst memoryPath = path.join(process.cwd(), 'baseai', 'memory');\n\n\t\t// Check if the baseai directory exists.\n\t\tif (!fs.existsSync(memoryPath)) return [];\n\n\t\t// Get all directories names in the memory path.\n\t\tconst memoryNames = await fs.promises.readdir(memoryPath);\n\n\t\t// Return the memory names.\n\t\treturn memoryNames;\n\t} catch (error: any) {\n\t\treturn [];\n\t}\n}\n","import { heading } from '@/utils/heading';\nimport icons from '@/utils/icons';\nimport { getAvailableMemories } from '@/utils/memory/get-available-memories';\nimport * as p from '@clack/prompts';\n\nexport async function listMemory() {\n\tconst availableMemories = await getAvailableMemories();\n\tif (availableMemories.length === 0) {\n\t\tp.log.message('No memory available.');\n\t\treturn;\n\t}\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'MEMORY',\n\t\t\tsub: 'List of all available memory sets'\n\t\t})\n\t);\n\tconsole.log('');\n\tavailableMemories.forEach(item => {\n\t\tconsole.log(`${icons.memory} ${item}`);\n\t});\n\n\tprocess.exit(0);\n}\n","import { heading } from '@/utils/heading';\nimport { checkMemoryExists } from '@/utils/memory/check-memory-exist';\nimport { MEMORYSETS } from '@/utils/memory/constants';\nimport {\n\tcosineSimilaritySearch,\n\tgetDocumentsFromMemory\n} from '@/utils/memory/db/lib';\nimport color from 'picocolors';\n// import { generateLocalEmbeddings } from '@/utils/memory/generate-local-embeddings';\nimport { getOpenAIEmbeddings } from '@/utils/memory/generate-openai-embeddings';\nimport { validateMemoryName } from '@/utils/memory/lib';\nimport * as p from '@clack/prompts';\nimport { generateLocalEmbeddings } from '@/utils/memory/generate-local-embeddings';\nimport { loadConfig } from '@/utils/config/config-handler';\nimport { dlog } from '@/dev/utils/dlog';\n\nexport async function retrieveMemory({\n\tmemory,\n\tquery\n}: {\n\tmemory: string;\n\tquery: string;\n}) {\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'RETRIEVE',\n\t\t\tsub: 'Retrieve similar chunks of a memory'\n\t\t})\n\t);\n\n\t// Spinner to show current action.\n\tconst spin = p.spinner();\n\n\ttry {\n\t\tif (!memory) {\n\t\t\tp.log.error(\n\t\t\t\t'Memory name is required. Use --memory or -m flag to specify.'\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\tif (!query) {\n\t\t\tp.log.error(\n\t\t\t\t'Query is required. Use --query, or -q flag to specify.'\n\t\t\t);\n\t\t\tprocess.exit(1);\n\t\t}\n\n\t\t// 1- Check memory exists.\n\t\tconst memoryName = validateMemoryName(memory); // Throws error if invalid so no need to check success\n\t\tawait checkMemoryExists(memoryName);\n\n\t\t// 2- Load memory data.\n\t\tspin.start('Processing memory data...');\n\t\tconst memoryChunks = await getDocumentsFromMemory([memory]);\n\t\tif (memoryChunks.length === 0)\n\t\t\treturn p.log.error(\n\t\t\t\t'Please make sure the memory has one or more documents and they are embedded.'\n\t\t\t);\n\n\t\t// 3- Generate embeddings of query\n\t\tspin.message('Generating embeddings...');\n\n\t\t// Read config to determine which embedding to use.\n\t\tconst config = await loadConfig();\n\t\tconst useLocalEmbeddings = config.memory?.useLocalEmbeddings || false;\n\n\t\tlet queryEmbedding = [];\n\t\tif (useLocalEmbeddings) {\n\t\t\t// Use local embeddings\n\t\t\tdlog('Generating local embeddings');\n\t\t\tqueryEmbedding = await generateLocalEmbeddings([query]);\n\t\t} else {\n\t\t\t// Use OpenAI embeddings\n\t\t\tdlog('Generating OpenAI embeddings');\n\t\t\tqueryEmbedding = await getOpenAIEmbeddings([query]);\n\t\t}\n\n\t\t// 4- Get similar chunks from the memorysets.\n\t\tspin.message('Searching for similar chunks...');\n\t\tconst similarChunks = cosineSimilaritySearch({\n\t\t\tchunks: memoryChunks,\n\t\t\tqueryEmbedding: queryEmbedding[0].embedding,\n\t\t\ttopK: MEMORYSETS.MAX_CHUNKS_ATTACHED_TO_LLM\n\t\t});\n\n\t\tif (similarChunks.length === 0)\n\t\t\treturn p.log.message('No similar chunks found.');\n\n\t\t// 5- Log the similar chunks\n\t\tp.log.info('Similar Chunks:');\n\t\tsimilarChunks.forEach((chunk, index) => {\n\t\t\tconst header = color.cyan(color.bold(`#${index + 1}`));\n\t\t\tconst similarity = `Similarity: ${color.green(chunk.similarity.toFixed(6))}`;\n\t\t\tconst source = `Source: ${chunk.attributes.docName}`;\n\t\t\tconst text = chunk.text;\n\n\t\t\tp.note(`${header}\\n${similarity}\\n${source}`);\n\t\t\tp.log.message(`${color.cyan(`Text Chunk:`)}\\n${text}\\n`);\n\t\t});\n\n\t\tp.outro('Memory retrieval completed successfully.');\n\t} catch (error: any) {\n\t\tp.cancel(`FAILED: ${error.message}`);\n\t} finally {\n\t\tspin.stop('Finished');\n\t}\n}\n","import { cyan, dim, dimItalic, lineItem } from '@/utils/formatting';\nimport { getAvailableTools } from '@/utils/get-available-tools';\nimport { heading } from '@/utils/heading';\nimport { defaultRagPrompt } from '@/utils/memory/constants';\nimport { getAvailableMemories } from '@/utils/memory/get-available-memories';\nimport { formatCode } from '@/utils/ts-format-code';\nimport * as p from '@clack/prompts';\nimport slugify from '@sindresorhus/slugify';\nimport camelCase from 'camelcase';\nimport figures from 'figures';\nimport fs from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\n\ntype PipeStatus = 'public' | 'private';\n\nconst pipeNameSchema = z\n\t.string()\n\t.min(3, 'Pipe name must be at least 3 characters long')\n\t.max(50, 'Pipe name must not exceed 50 characters')\n\t.regex(\n\t\t/^[a-zA-Z0-9.-]+$/,\n\t\t'Pipe name can only contain letters, numbers, dots, and hyphens'\n\t);\n\nconst multiselectHelper = `${dimItalic(`(optional)`)} \\n${dimItalic(`${lineItem} Press ${cyan(`space`)} to select, ${cyan(`enter`)} to submit or skip`)}`;\n\nexport async function createPipe() {\n\tconst tools = await getAvailableTools();\n\tconst memories = await getAvailableMemories();\n\tconst hasTools = tools.length > 0;\n\tconst hasMemories = memories.length > 0;\n\n\tp.intro(heading({ text: 'PIPE', sub: 'Create a new agent pipe' }));\n\n\tconst pipeInfo = await p.group(\n\t\t{\n\t\t\tname: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'Name of the pipe',\n\t\t\t\t\tplaceholder: 'ai-agent-pipe',\n\t\t\t\t\tvalidate: value => {\n\t\t\t\t\t\tconst result = pipeNameSchema.safeParse(value);\n\t\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\t\treturn result.error.issues[0].message;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tdescription: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'Description of the pipe',\n\t\t\t\t\tplaceholder: 'This is a test pipe'\n\t\t\t\t}),\n\t\t\tstatus: () =>\n\t\t\t\tp.select({\n\t\t\t\t\tmessage: 'Status of the pipe',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{ value: 'public', label: 'Public' },\n\t\t\t\t\t\t{ value: 'private', label: 'Private' }\n\t\t\t\t\t]\n\t\t\t\t}) as Promise<PipeStatus>,\n\t\t\tsystemPrompt: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'System prompt',\n\t\t\t\t\tplaceholder: 'You are a helpful AI assistant.',\n\t\t\t\t\tinitialValue: 'You are a helpful AI assistant.'\n\t\t\t\t}),\n\t\t\t...(hasMemories && {\n\t\t\t\tmemory: async () =>\n\t\t\t\t\tp.multiselect({\n\t\t\t\t\t\tmessage: `Select memory for this pipe ${multiselectHelper}`,\n\t\t\t\t\t\toptions: memories.map(memoryName => ({\n\t\t\t\t\t\t\tvalue: memoryName,\n\t\t\t\t\t\t\tlabel: memoryName\n\t\t\t\t\t\t})),\n\t\t\t\t\t\trequired: false\n\t\t\t\t\t})\n\t\t\t}),\n\t\t\t...(hasTools && {\n\t\t\t\ttools: async () =>\n\t\t\t\t\tp.multiselect({\n\t\t\t\t\t\tmessage: `Select tools for this pipe ${multiselectHelper}`,\n\t\t\t\t\t\toptions: tools.map(tool => ({\n\t\t\t\t\t\t\tvalue: tool,\n\t\t\t\t\t\t\tlabel: tool\n\t\t\t\t\t\t})),\n\t\t\t\t\t\trequired: false\n\t\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\tonCancel: () => {\n\t\t\t\tp.cancel('Operation cancelled.');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\t\t}\n\t);\n\n\tlet selectedTools = ``;\n\tlet toolNames: string[] = [];\n\n\t// If the user selected tools, add them to the pipe content\n\tconst pipeTools = pipeInfo.tools;\n\tif (pipeTools) {\n\t\tpipeTools.map(tool => {\n\t\t\tconst name = `${camelCase(tool as string)}Tool`;\n\t\t\ttoolNames.push(`${name}()`);\n\t\t\tselectedTools += `\\nimport ${name} from '../tools/${tool}';`;\n\t\t});\n\t}\n\n\tlet selectedMemories = ``;\n\tlet selectedMemoriesNames: string[] = [];\n\n\t// If the user selected memories, add them to the pipe content\n\tconst pipeMemories = pipeInfo.memory;\n\tif (pipeMemories) {\n\t\tpipeMemories.map(memory => {\n\t\t\tconst name = `${camelCase(memory as string)}Memory`;\n\t\t\tselectedMemoriesNames.push(\n\t\t\t\t`${camelCase(memory as string)}Memory()`\n\t\t\t);\n\t\t\tselectedMemories += `\\nimport ${name} from '../memory/${memory}';`;\n\t\t});\n\t}\n\n\tconst isMemoryAttached = selectedMemoriesNames.length > 0;\n\n\tconst pipeNameSlugified = slugify(pipeInfo.name);\n\tconst pipeNameCamelCase = camelCase('pipe-' + pipeInfo.name);\n\tconst pipeContent = `import { PipeI } from '@baseai/core';${selectedTools}${selectedMemories}\n\nconst ${pipeNameCamelCase} = (): PipeI => ({\n    // Replace with your API key https://langbase.com/docs/api-reference/api-keys\n\tapiKey: process.env.LANGBASE_API_KEY!,\n    name: '${pipeNameSlugified}',\n    description: ${JSON.stringify(pipeInfo.description) || ''},\n    status: '${pipeInfo.status}',\n    model: 'openai:gpt-4o-mini',\n    stream: true,\n    json: false,\n    store: true,\n    moderate: true,\n    top_p: 1,\n    max_tokens: 1000,\n    temperature: 0.7,\n    presence_penalty: 1,\n    frequency_penalty: 1,\n    stop: [],\n    tool_choice: 'auto',\n    parallel_tool_calls: true,\n    messages: [\n        { role: 'system', content: \\`${pipeInfo.systemPrompt}\\` },\n        ${\n\t\t\tisMemoryAttached\n\t\t\t\t? `{ role: 'system', name: 'rag', content: \"${defaultRagPrompt.replace(/\\n/g, '\\\\n')}\" }`\n\t\t\t\t: ''\n\t\t}\n    ],\n    variables: [],\n    memory: [${selectedMemoriesNames.join(', ')}],\n    tools: [${toolNames.join(', ')}],\n});\n\nexport default ${pipeNameCamelCase};\n    `;\n\n\tconst formattedCode = await formatCode(pipeContent);\n\n\tconst baseDir = path.join(process.cwd(), 'baseai', 'pipes');\n\tconst filePath = path.join(baseDir, `${pipeNameSlugified}.ts`);\n\n\ttry {\n\t\tawait fs.promises.mkdir(baseDir, { recursive: true });\n\t\tawait fs.promises.writeFile(filePath, formattedCode);\n\t\tp.outro(\n\t\t\theading({\n\t\t\t\ttext: pipeNameCamelCase,\n\t\t\t\tsub: `created as a new pipe \\n ${dim(figures.pointer)} ${dimItalic(` ${filePath}`)}`,\n\t\t\t\tgreen: true\n\t\t\t})\n\t\t);\n\t\tprocess.exit(0);\n\t} catch (error: any) {\n\t\tp.cancel(`Error creating pipe: ${error.message}`);\n\t\tprocess.exit(1);\n\t}\n}\n","import { getAvailableTools } from '@/utils/get-available-tools';\nimport { heading } from '@/utils/heading';\nimport { isToolPresent } from '@/utils/is-tool-present';\nimport { formatCode } from '@/utils/ts-format-code';\nimport * as p from '@clack/prompts';\nimport slugify from '@sindresorhus/slugify';\nimport camelCase from 'camelcase';\nimport figures from 'figures';\nimport fs from 'fs';\nimport path from 'path';\nimport color from 'picocolors';\nimport { z } from 'zod';\n\nconst defaultTool = {\n\ttype: 'function',\n\tfunction: {\n\t\tname: 'get_current_weather',\n\t\tdescription: 'Get the current weather in a given location',\n\t\tparameters: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tlocation: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'The city and state, e.g. San Francisco, CA'\n\t\t\t\t},\n\t\t\t\tunit: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: ['celsius', 'fahrenheit']\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['location']\n\t\t}\n\t}\n};\n\nconst toolNameSchema = z\n\t.string()\n\t.min(3, 'Tool name must be at least 3 characters long')\n\t.max(50, 'Tool name must not exceed 50 characters');\n\n/**\n * Asynchronously creates a new tool by prompting the user for tool details,\n * validates the input, and generates a new tool file with the provided information.\n *\n * @async\n * @function\n * @returns {Promise<void>} A promise that resolves when the tool is created successfully.\n *\n * @throws Will throw an error if there is an issue creating the tool file.\n */\nexport async function createTool() {\n\tconst allTools = await getAvailableTools();\n\tp.intro(heading({ text: 'TOOL', sub: 'Create a new tool' }));\n\n\tconst toolInfo = await p.group(\n\t\t{\n\t\t\tname: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'Name of the tool',\n\t\t\t\t\tplaceholder: defaultTool.function.name,\n\t\t\t\t\tvalidate: value => {\n\t\t\t\t\t\tconst result = toolNameSchema.safeParse(value);\n\t\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\t\treturn result.error.issues[0].message;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst hasTool = isToolPresent({\n\t\t\t\t\t\t\tname: value,\n\t\t\t\t\t\t\tallTools\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (hasTool) {\n\t\t\t\t\t\t\treturn `Tool with name ${value} already exists!`;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tdescription: () =>\n\t\t\t\tp.text({\n\t\t\t\t\tmessage: 'Description of the tool',\n\t\t\t\t\tplaceholder: defaultTool.function.description,\n\t\t\t\t\tvalidate(value) {\n\t\t\t\t\t\tif (value.length === 0)\n\t\t\t\t\t\t\treturn `Tool description is required!`;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t},\n\t\t{\n\t\t\tonCancel: () => {\n\t\t\t\tp.cancel('Operation cancelled.');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\t\t}\n\t);\n\n\tconst slugifiedName = slugify(toolInfo.name);\n\tconst camelCaseNameToolName = camelCase('tool-' + toolInfo.name);\n\tconst camelCaseNameFnName = camelCase(toolInfo.name);\n\tconst description = toolInfo.description || '';\n\n\tconst toolContent = `import { ToolI } from '@baseai/core';\n\nexport async function ${camelCaseNameFnName}() {\n\t// Add your tool logic here\n\t// This function will be called when the tool is executed\n}\n\nconst ${camelCaseNameToolName} = (): ToolI => ({\n\trun: ${camelCaseNameFnName},\n\ttype: 'function' as const,\n\tfunction: {\n\t\tname: '${camelCaseNameToolName}',\n\t\tdescription: ${JSON.stringify(description) || ''},\n\t\tparameters: {},\n\t},\n});\n\nexport default ${camelCaseNameToolName};\n`;\n\n\tconst baseDir = path.join(process.cwd(), 'baseai', 'tools');\n\tconst filePath = path.join(baseDir, `${slugifiedName}.ts`);\n\tconst formattedCode = await formatCode(toolContent);\n\n\ttry {\n\t\tawait fs.promises.mkdir(baseDir, { recursive: true });\n\t\tawait fs.promises.writeFile(filePath, formattedCode);\n\n\t\tp.outro(\n\t\t\theading({\n\t\t\t\ttext: camelCaseNameToolName,\n\t\t\t\tsub: `created as a new tool \\n ${color.dim(`${figures.pointer} ${filePath}`)}`,\n\t\t\t\tgreen: true\n\t\t\t})\n\t\t);\n\t\tprocess.exit(0);\n\t} catch (error: any) {\n\t\tp.cancel(`Error creating tool: ${error.message}`);\n\t\tprocess.exit(1);\n\t}\n}\n","import meowHelp from 'cli-meow-help';\nimport meow from 'meow';\n\nconst flags = {\n\tclear: {\n\t\ttype: `boolean`,\n\t\tdefault: false,\n\t\tdesc: `Clear the console`\n\t},\n\tdebug: {\n\t\ttype: `boolean`,\n\t\tdefault: false,\n\t\tshortFlag: `d`,\n\t\tdesc: `Print debug info`\n\t},\n\tmemory: {\n\t\ttype: `string`,\n\t\tshortFlag: `m`,\n\t\tdesc: `Memory to use` // For embed as well as retrieve\n\t},\n\toverwrite: {\n\t\ttype: `boolean`,\n\t\tshortFlag: `o`,\n\t\tdesc: `Overwrite existing memory embeddings`\n\t},\n\tdocument: {\n\t\ttype: `string`,\n\t\tshortFlag: `d`,\n\t\tdesc: `Document to embed` // For embedding a single document.\n\t},\n\tquery: {\n\t\ttype: `string`,\n\t\tshortFlag: `q`,\n\t\tdesc: `Query string`\n\t},\n\tlist: {\n\t\ttype: `boolean`,\n\t\tshortFlag: `l`,\n\t\tdesc: `List available memory`\n\t},\n\tlocal: {\n\t\ttype: `boolean`,\n\t\tshortFlag: `L`,\n\t\tdesc: `Set use local embeddings (true/false)`\n\t}\n};\n\nconst commands = {\n\tdev: { desc: `Run BaseAI in dev mode` },\n\tauth: { desc: `Authenticate with Langbase` },\n\tadd: { desc: `Add an agent Pipe from Langbase` },\n\tdeploy: { desc: `Deploy BaseAI to Langbase` },\n\tpipe: { desc: `Create a pipe` },\n\ttool: { desc: `Create a tool` },\n\tmemory: { desc: `Create a memory` },\n\tembed: { desc: `Create embeddings of a memory` },\n\tretrieve: { desc: `Retrieve similar chunks of a memory` },\n\tconfig: {\n\t\tdesc: `Configure BaseAI`,\n\t\tsubcommands: {\n\t\t\tembeddings: {\n\t\t\t\tdesc: `Enable or disable local embeddings`\n\t\t\t}\n\t\t}\n\t},\n\tbuild: { desc: `Build BaseAI files` },\n\tinit: { desc: `Set up BaseAI files and add packages` },\n\thelp: { desc: `Print help info` }\n};\n\nconst helpText = meowHelp({\n\tname: `baseai`,\n\tflags,\n\tcommands,\n\tdesc: false,\n\theader: false,\n\tfooter: `Made by Langbase. For more https://langbase.com/docs`\n});\n\nconst options = {\n\timportMeta: import.meta,\n\tinferType: true,\n\tdescription: false,\n\thardRejection: false,\n\tflags\n};\n\nexport default meow(helpText, options);\n","import * as p from '@clack/prompts';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { heading } from '../heading';\nimport { getAvailableMemories } from '../memory/get-available-memories';\nimport { embedMemory } from '@/memory/embed';\n\nconst configDir = path.join(process.cwd(), 'baseai');\nconst configFilePath = path.join(configDir, 'baseai.config.ts');\n\nexport async function setLocalEmbeddingsConfig(value: boolean) {\n\ttry {\n\t\tp.intro(heading({ text: 'CONFIG', sub: 'Configure embeddings' }));\n\n\t\t// Read the config file content\n\t\tconst configContent = await fs.readFile(configFilePath, 'utf-8');\n\n\t\t// Extract the current value of useLocalEmbeddings\n\t\tconst match = configContent.match(\n\t\t\t/([\"']?useLocalEmbeddings[\"']?\\s*:\\s*)(true|false)/\n\t\t);\n\t\tif (!match) {\n\t\t\tconsole.log('useLocalEmbeddings not found in the config file.');\n\t\t\treturn null;\n\t\t}\n\n\t\tconst oldValue = match[2] === 'true';\n\n\t\t// Update the useLocalEmbeddings value using regex\n\t\tconst updatedContent = configContent.replace(\n\t\t\t/([\"']?useLocalEmbeddings[\"']?\\s*:\\s*)(true|false)/,\n\t\t\t`$1${value}`\n\t\t);\n\n\t\t// Write the updated content back to the config file\n\t\tawait fs.writeFile(configFilePath, updatedContent.trim());\n\n\t\t// Check if the new value is different from the old value\n\t\tconst isNewAndOldValueSame = value === oldValue;\n\n\t\t// If the new value is the same as the old value, log a message and return\n\t\tif (isNewAndOldValueSame) {\n\t\t\tconsole.log(`\\nuseLocalEmbeddings is already set to ${value}.\\n`);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the new and old are different, log a message and update the memory embeddings\n\t\tconsole.log(\n\t\t\t`\\nUpdated useLocalEmbeddings to ${value} successfully in ${configFilePath}`\n\t\t);\n\n\t\tconst oldModel = oldValue === true ? 'local Ollama' : 'OpenAI';\n\t\tconst newModel = value === true ? 'local Ollama' : 'OpenAI';\n\n\t\tp.log.info(\n\t\t\t`\\nSwitching from ${oldModel} embeddings to ${newModel} embeddings.\\n`\n\t\t);\n\n\t\t// Get all memory.\n\t\tconst memories = await getAvailableMemories();\n\n\t\t// Embed all memories\n\t\tfor (const memory of memories) {\n\t\t\tawait embedMemory({\n\t\t\t\tmemoryName: memory,\n\t\t\t\toverwrite: true,\n\t\t\t\tuseLocalEmbeddings: value\n\t\t\t});\n\t\t}\n\n\t\t// Log a note that users should restart dev server\n\t\tp.log.info(\n\t\t\t'Please restart the dev server to apply the changes to the memory embeddings configuration.'\n\t\t);\n\t} catch (error: any) {\n\t\tconsole.error(`Error updating useLocalEmbeddings: ${error.message}`);\n\t}\n}\n","import * as p from '@clack/prompts';\nimport { heading } from './heading';\n\nexport default function debugMode(cli: any) {\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'DEBUG MODE',\n\t\t\tsub: 'logs will be verbose...',\n\t\t\tdim: true\n\t\t})\n\t);\n\tconsole.log();\n\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'cwd',\n\t\t\tdim: true\n\t\t})\n\t);\n\tconsole.log(process.cwd());\n\tconsole.log();\n\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'cli.flags',\n\t\t\tdim: true\n\t\t})\n\t);\n\tconsole.log(cli.flags);\n\tconsole.log();\n\n\tp.intro(\n\t\theading({\n\t\t\ttext: 'cli.input',\n\t\t\tsub: 'commands',\n\t\t\tdim: true\n\t\t})\n\t);\n\tconsole.log(cli.input);\n\tconsole.log();\n}\n","import unhandled from 'cli-handle-unhandled';\nimport welcome from 'cli-welcome';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport fs from 'fs';\n\nexport default async ({ clear = false }) => {\n\tunhandled();\n\n\t// Get the directory of the current module\n\tconst __filename = fileURLToPath(import.meta.url);\n\tconst __dirname = path.dirname(__filename);\n\n\t// Go up two levels to find the package.json\n\tconst pkgJsonPath = path.join(__dirname, '..', 'package.json');\n\n\tif (!fs.existsSync(pkgJsonPath)) {\n\t\tconsole.error('Unable to find package.json');\n\t\tprocess.exit(1);\n\t}\n\n\tconst pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath, 'utf8'));\n\n\tawait welcome({\n\t\ttitle: `baseai`,\n\t\ttagLine: `by Langbase`,\n\t\tdescription: pkgJson.description,\n\t\tversion: pkgJson.version,\n\t\tbgColor: '#A699EA',\n\t\tcolor: '#000000',\n\t\tbold: true,\n\t\tclear\n\t});\n};\n"],"mappings":"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T,IAAK,EACL,IAAK,CACN,EACA,MAAO,CACN,MAAO,QACP,QAAS,EACT,IAAK,EACL,IAAK,CACN,EACA,EAAG,CACF,MAAO,IACP,QAAS,CACV,EACA,OAAQ,CACP,MAAO,SACP,QAAS,EACV,EACA,KAAM,CACL,MAAO,MACR,EACA,iBAAkB,CACjB,MAAO,mBACP,IAAK,GACL,IAAK,CACN,EACA,kBAAmB,CAClB,MAAO,oBACP,IAAK,GACL,IAAK,CACN,EACA,WAAY,CACX,MAAO,YACR,EACA,KAAM,CACL,MAAO,MACR,EACA,KAAM,CACL,MAAO,MACR,EACA,MAAO,CACN,MAAO,OACR,EACA,YAAa,CACZ,MAAO,aACR,EACA,gBAAiB,CAChB,MAAO,iBACR,EACA,SAAU,CACT,MAAO,WACP,QAAS,EACV,EACA,aAAc,CACb,MAAO,cACR,CACD,EC7EA,IAAMC,GAAgC,CACrC,IAAKC,GACL,aAAcC,EACf,EAEOC,GAAQH,GCRf,IAAMI,GAAyC,CAC9C,QAAS,2BACT,QAAUC,IACF,CAAE,cAAe,UAAUA,CAAO,EAAG,GAE7C,aAAc,uBACd,SAAU,kBACV,MAAO,gBACR,EAEOC,GAAQF,GCJR,IAAMG,GAA+C,CAC3D,MAAO,CACN,MAAO,QACP,SAAU,GACV,QAAS,oCACV,EACA,SAAU,CACT,MAAO,WACP,SAAU,GACV,QAAS,EACV,EACA,WAAY,CACX,MAAO,aACP,SAAU,GACV,QAAS,IACT,IAAK,CACN,EACA,KAAM,CACL,MAAO,MACR,EACA,YAAa,CACZ,MAAO,aACR,EACA,MAAO,CACN,MAAO,OACR,EACA,MAAO,CACN,MAAO,OACR,EACA,kBAAmB,CAClB,MAAO,oBACR,EACA,OAAQ,CACP,MAAO,SACP,QAAS,EACV,EACA,SAAU,CACT,MAAO,UACR,EACA,MAAO,CACN,MAAO,OACR,EACA,YAAa,CACZ,MAAO,aACR,EACA,gBAAiB,CAChB,MAAO,iBACR,CACD,ECnDA,IAAMC,GAAoC,CACzC,aAAcC,GACd,IAAKC,EACN,EAEOC,GAAQH,GCRf,IAAMI,GAAmC,CACxC,QAAS,iCACT,QA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","names":["dotenv","path","figures","pc","color","dimItalic","text","dim","bold","underline","italic","inverse","hidden","strikethrough","reset","black","red","green","yellow","blue","magenta","cyan","white","gray","lineItem","pc","figures","fs","path","getAvailablePipes","pipesPath","pipeName","fs","path","getAvailableTools","toolsPath","toolName","color","heading","text","sub","dim","green","figures","icons","icons_default","slugify","isToolPresent","name","allTools","tool","p","cosmiconfig","TypeScriptLoader","defaultConfig","loadConfig","explorer","result","config","fs","p","color","handleNoAccountFound","spinner","handleAuthError","error","retrieveAuthentication","_a","envFile","loadConfig","apiKey","line","prettier","formatCode","code","p","slugify","camelCase","figures","fs","pMap","path","color","extractLoginName","loginAndPipe","split","length","getPipe","login","name","spinner","_a","account","retrieveAuthentication","API_URL","createResponse","errorData","error","createLocalTool","pipe","allTools","getAvailableTools","tool","isToolPresent","icons_default","camelCaseName","slugifiedName","code","formattedCode","formatCode","baseDir","filePath","getToolsPipeData","tools","toolFileName","toolName","importPath","createLocalPipe","allPipes","getAvailablePipes","pipeNameSlugified","toolData","toolCalls","pipeNameCamelCase","messages","message","pipeContent","heading","dim","dimItalic","addPipe","p","cancel","confirm","isCancel","note","outro","password","fs","open","path","color","auth","_a","heading","shouldOpen","apiKeyString","login","apiKey","envContent","envFile","loadConfig","envFileContent","oldKey","line","shouldOverwrite","newEnvContent","p","exec","fs","path","promisify","execAsync","build","calledAsCommand","heading","buildPipes","buildTools","buildMemory","error","build_default","sourcePath","outputPath","builtPipes","buildTypeScriptFiles","listBuiltItems","icons_default","builtTools","memoryName","builtMemories","s","tsFiles","getSingleMemoryFile","getAllMemoryFile","file","inputFile","outputFile","displayName","stdout","type","builtItems","configObject","modifiedOutput","title","items","icon","item","memoryPath","indexFile","folderPromises","filePath","allMemoryFolders","folder","tsFilesPromise","memory","OPEN_AI","ANTHROPIC","TOGETHER_AI","GOOGLE","GROQ","COHERE","FIREWORKS_AI","PERPLEXITY","MISTRAL_AI","DEEPINFRA","BEDROCK","AZURE_OPEN_AI","OLLAMA","X_AI","modelsByProvider","jsonModeModels","chalk","util","DEBUG","LOG_SENSITIVE_DATA","SENSITIVE_WORDS","formatValue","value","isSensitiveData","key","word","redactSensitiveData","isSensitive","logKeyValue","sensitive","formattedValue","dlog","anyKey","anyValue","compareDocumentLists","localDocs","prodDocs","localSet","prodSet","areListsSame","doc","isProdSubsetOfLocal","isProdSupersetOfLocal","areMutuallyExclusive","areOverlapping","generalFileExtSupported","programmingFilesExtensions","allSupportedExtensions","MEMORYSETS","defaultRagPrompt","p","fs","path","getDocumentProxy","extractText","XLSX","getDocumentContent","doc","docType","content","processTextFile","processPdfFile","processCsvFile","processXlsFile","processMarkdownFile","removeEmojis","pdfDocument","text","processCSV","arrayBuffer","workbook","sheetName","worksheet","csvContent","processedContent","rows","header","row","p","fromZodError","p","cosineSimilarity","fs","Low","JSONFile","path","color","z","ChunkSchema","defaultData","createDb","memoryName","baseDir","dbFilePath","adapter","db","readDb","dbPath","loadDb","memoryName","memoryDbPath","getMemoryDbPath","fs","readDb","error","createDb","addDocument","db","docName","color","getDocument","deleteDocumentFromDB","chunkId","addChunksBulk","chunks","chunk","id","newChunk","ChunkSchema","getDocumentsFromMemory","memoryNames","memoryChunks","document","cosineSimilaritySearch","queryEmbedding","topK","chunksWithCosineSimilarity","cosineSimilarity","a","b","projectRootPath","path","z","memoryNameSchema","docNameSchema","memoryDocSchema","gitConfigSchema","documentSchema","memoryConfigSchema","p","chalk","util","sym","blueI","chalk","sensitiveWords","Logger","_Logger","config","baseAIConfig","loadConfig","value","util","key","word","isSensitive","category","parts","partialCategory","part","logHeader","formattedValue","header","logger_default","loggerInstance","initializationPromise","initLogger","logger_default","getLogger","logger","category","value","logHeader","p","generateLocalEmbeddings","chunks","getOllamaEmbeddings","chunk","embedding","error","prompt","url","MEMORYSETS","body","response","p","getEncoding","OpenAI","getOpenAIEmbeddings","chunks","openAiKey","openaiAPIClient","OpenAI","enc","getEncoding","totalTokens","chunk","tokens","MEMORYSETS","openAiEmbeddings","batchSize","i","batch","openAiEmbeddingsBatch","error","formatDocSize","bytes","validateMemoryName","memoryName","validatedName","memoryNameSchema","err","fromZodError","validateMemoryDocNames","documentName","validatedData","memoryDocSchema","addContextFromMemory","messages","memoryNames","_a","isMemoryAttached","logger","messagesExist","lastUserMsg","m","userPrompt","useLocalEmbeddings","loadConfig","embeddings","dlog","generateLocalEmbeddings","getOpenAIEmbeddings","memoryChunks","getDocumentsFromMemory","similarChunks","cosineSimilaritySearch","MEMORYSETS","error","fs","path","p","isOldConfigObject","obj","isOldMemoryConfigFormat","typedObj","generateUpgradeInstructions","oldConfig","newConfigExample","ext","_a","extractConfigObject","fileContents","cleanedContent","match","memoryObjStr","error","loadMemoryConfig","memoryName","memoryDir","path","indexFilePath","fs","configObj","memoryConfigSchema","parseError","isOldMemoryConfigFormat","generateUpgradeInstructions","execSync","fg","loadMemoryFiles","memoryName","memoryConfig","checkMemoryConfig","useDocumentsDir","documentConfig","loadMemoryFilesFromDocsDir","loadMemoryFilesFromCustomDir","includePatterns","allFiles","gitFiles","file","memoryFilesContentFiltered","filePath","_a","allSupportedExtensions","extension","fileContentBuffer","fs","fileContentBlob","MEMORYSETS","formatDocSize","memoryFile","path","getDocumentContent","meta","memoryDir","memoryFilesPath","memoryFiles","loadMemoryConfig","memoryConfigSchema","getMemoryFileNames","stats","isSupportedExtension","isNotTooLarge","chalk","Table","p","printDiffTable","localDocs","prodDocs","allItems","tableData","item","table","row","p","fs","fetch","path","color","execSync","p","fs","p","path","saveDeployedCommitHashInMemoryConfig","memoryName","deployedCommitHash","memoryDir","indexFilePath","fileContents","gitBlockMatch","fullMatch","outerIndent","innerIndent","contentMatch","existingContent","contentLines","line","newGitContent","index","isLast","match","insertPosition","prefix","suffix","indentMatch","baseIndent","lines","gitConfig","error","execSync","getChangedAndDeletedFilesBetweenCommits","oldCommit","latestCommit","include","repoPath","changedResult","constructGitCommand","deletedResult","changedFiles","file","deletedFiles","error","diffFilter","baseCommand","patterns","pattern","p","figures","color","TextSplitter","config","text","splits","separator","docs","currentDoc","total","d","_len","doc","content","chunk","RecursiveCharacterTextSplitter","_RecursiveCharacterTextSplitter","separators","finalChunks","newSeparators","i","s","goodSplits","_separator","mergedText","otherInfo","regexEscapedSeparator","language","generateEmbeddings","memoryFiles","memoryName","overwrite","useLocalEmbeddings","_a","memoryDb","totalEmbeddings","totalDocs","successfulDocs","skippedDocs","failedDocs","loadDb","splitter","RecursiveCharacterTextSplitter","MEMORYSETS","name","content","document","getDocument","color","deleteDocumentFromDB","addDocument","chunks","embeddings","localEmbeddingsConfig","loadConfig","dlog","generateLocalEmbeddings","getOpenAIEmbeddings","error","chunksWithEmbeddings","chunk","index","addChunksBulk","generateEmbeddingSummary","figures","maxLabelLength","formatLine","label","value","icon","valueColor","paddedLabel","summary","listLocalEmbeddedMemoryDocuments","fs","p","path","saveEmbeddedCommitHashInMemoryConfig","memoryName","embeddedCommitHash","memoryDir","indexFilePath","fileContents","gitBlockMatch","fullMatch","outerIndent","innerIndent","contentMatch","existingContent","contentLines","line","newGitContent","index","isLast","match","insertPosition","prefix","suffix","indentMatch","baseIndent","lines","gitConfig","error","handleGitSyncMemories","memoryName","config","account","_a","_b","isEmbed","execSync","error","filesToDeploy","filesToDelete","prodDocs","listLocalEmbeddedMemoryDocuments","listMemoryDocuments","allFiles","loadMemoryFilesFromCustomDir","file","newFiles","doc","lastHashUsed","changedFiles","deletedFiles","getChangedAndDeletedFilesBetweenCommits","updateDeployedCommitHash","currentCommitHash","saveDeployedCommitHashInMemoryConfig","updateEmbeddedCommitHash","saveEmbeddedCommitHashInMemoryConfig","p","p","fs","path","checkMemoryExists","memoryName","memoryDir","indexFilePath","color","isMemoryDocExist","memoryName","documentName","spinner","validMemoryName","validDocumentName","validateMemoryDocNames","checkMemoryExists","memoryFiles","loadMemoryFiles","memoryFile","file","color","p","path","fs","deploySingleDocument","memoryName","documentName","overwrite","heading","spinner","validDocumentName","validMemoryName","isMemoryDocExist","buildMemory","buildDir","path","memoryDir","account","retrieveAuthentication","cyan","deployDocument","error","handleError","memoryPath","memoryContent","fs","memoryObject","handleInvalidConfig","document","loadMemoryFiles","doc","handleSingleDocDeploy","handleDeploymentError","memory","prodDocs","listMemoryDocuments","uploadDocumentsToMemory","localDocs","getMemoryFileNames","checkOnlyDeployDocumentMissing","isProdSupersetOfLocal","areMutuallyExclusive","areOverlapping","compareDocumentLists","deployDoc","localDocSet","prodDocSet","deployDocMissing","deploy","overwrite","spinner","heading","build_default","buildDir","path","pipesDir","pipes","readPipesDirectory","cyan","memoryDir","memory","readMemoryDirectory","toolsDir","tools","readToolsDirectory","account","retrieveAuthentication","deployMemories","deployPipes","dimItalic","dim","green","error","handleError","fs","file","handleDirectoryReadError","pipe","resolve","deployPipe","filePath","pipeContent","pipeObject","handleInvalidConfig","OLLAMA","newPipe","upsertPipe","handleDeploymentError","handleFileProcessingError","getApiUrls","pipeName","_a","createUrl","createResponse","fetch","errorData","handleError","spinner","message","error","handleDirectoryReadError","dir","color","handleInvalidConfig","name","type","handleDeploymentError","handleFileProcessingError","readMemoryDirectory","memoryDir","memory","fs","deployMemories","account","overwrite","memoryName","deployMemory","filePath","path","memoryNameWithoutExt","memoryContent","memoryObject","isOldMemoryConfigFormat","generateUpgradeInstructions","filesToDeploy","filesToDelete","memoryDocs","gitFilesToDeploy","gitFilesToDelete","handleGitSyncMemories","loadMemoryFiles","doc","upsertMemory","dlog","documents","isGitSync","docsToDelete","_a","_b","createMemory","getMemoryApiUrls","resolve","createResponse","fetch","errorData","handleExistingMemoryDeploy","handleGitSyncMemoryDeploy","deleteDocumentsFromMemory","updateDeployedCommitHash","uploadDocumentsToMemory","signedUrl","getSignedUploadUrl","uploadResponse","uploadDocument","deleteResponse","deleteDocument","prodDocs","listMemoryDocuments","localDocs","getMemoryFileNames","areListsSame","isProdSubsetOfLocal","isProdSupersetOfLocal","areMutuallyExclusive","areOverlapping","compareDocumentLists","overwriteMemory","uploadMissingDocumentsToMemory","handleProdSupersetOfLocal","printDiffTable","missingDocs","isMissing","listDocuments","listResponse","errorMsg","documentName","meta","response","document","mimeType","MEMORYSETS","baseUrl","deleteMemory","handleSingleDocDeploy","deploySingleMemory","heading","buildMemory","buildDir","allMemory","retrieveAuthentication","cyan","p","outro","serve","figures","Hono","prettyJSON","trimTrailingSlash","color","z","HTTPException","ZodError","generateErrorMessage","fromZodError","ErrorCode","ErrorSchema","z","ErrorCode","ZodError","codeToStatus","code","ApiError","HTTPException","status","message","rateLimit","docs","ApiErrorZod","_ApiErrorZod","validationResult","customMessage","_customMessage","_validationMessage","fromZodError","result","handleError","err","c","cors","customCors","poweredBy","c","next","preFlight","c","next","registerRoot","app","c","getPipeFewShotsMessages","pipe","fewShotMessages","m","OPEN_AI","ANTHROPIC","TOGETHER_AI","GOOGLE","GROQ","COHERE","FIREWORKS_AI","PERPLEXITY","X_AI","OLLAMA","modelsByProvider","OPEN_AI","TOGETHER_AI","ANTHROPIC","GROQ","GOOGLE","COHERE","FIREWORKS_AI","PERPLEXITY","jsonModeModels","REQUEST_TIMEOUT_STATUS_CODE","defaultJsonPrompt","addJsonMode","pipe","systemPrompt","modelName","jsonModeModels","jsonModePrompt","getJsonPrompt","_a","jsonPrompt","m","defaultJsonPrompt","getSystemPromptMessage","pipe","similarChunks","systemPrompt","addSystemPrompt","addSafetyPrompt","addJsonMode","addRagPromptWithAugmentedContext","_a","defualtSystemPrompt","m","getSafetyPrompt","safetyPrompt","memoryContext","chunk","ragMsg","ragPrompt","defaultRagPrompt","contextContent","ragPromptWithAugmentedContext","processMessages","pipe","messages","variables","variablesMap","getVarsMap","replaceVarsInMessagesWithVals","hasPipeVars","hasCurrentPromptVars","pipeVars","currentPromptVars","finalVariablesMap","v","finalVariables","name","value","dlog","variableRegex","message","_a","updatedContent","match","varName","trimmedVarName","getRunThread","pipe","messages","similarChunks","variables","systemPromptMessage","getSystemPromptMessage","pipeFewShotsMessages","getPipeFewShotsMessages","messagesThread","messagesThreadWithVars","processMessages","error","dlog","ApiError","AnthropicAPIConfig","llmApiKey","endpoint","headers","api_default","generateInvalidProviderResponseError","response","provider","generateErrorResponse","message","type","param","code","fileExtensionMimeTypeMap","getMimeType","url","urlParts","extension","transformAssistantMessage","msg","content","containsToolCalls","toolCall","transformToolMessage","AnthropicChatCompleteConfig","params","messages","lastRole","transformedMessage","item","parts","base64Image","mediaTypeParts","mediaType","systemMessage","tools","tool","_a","_b","_c","_d","toolChoice","AnthropicChatCompleteResponseTransform","response","responseStatus","ANTHROPIC","input_tokens","output_tokens","toolCalls","generateInvalidProviderResponseError","AnthropicChatCompleteStreamChunkTransform","responseChunk","fallbackId","chunk","parsedChunk","isToolBlockStart","isToolBlockDelta","toolIndex","AnthropicConfig","AnthropicChatCompleteConfig","api_default","AnthropicChatCompleteResponseTransform","AnthropicChatCompleteStreamChunkTransform","anthropic_default","OpenAIAPIConfig","API_KEY","api_default","OpenAIChatCompleteConfig","OpenAIConfig","api_default","OpenAIChatCompleteConfig","openai_default","TogetherAIApiConfig","API_KEY","api_default","TogetherAIChatCompleteConfig","TogetherAIConfig","TogetherAIChatCompleteConfig","api_default","together_ai_default","GroqAPIConfig","llmApiKey","api_default","GroqChatCompleteConfig","GroqConfig","GroqChatCompleteConfig","api_default","groq_default","GoogleApiConfig","endpoint","llmApiKey","model","stream","mappedEndpoint","api_default","transformGenerationConfig","params","generationConfig","transformOpenAIRoleToGoogleRole","role","transformToolChoiceForGemini","tool_choice","GoogleChatCompleteConfig","_a","messages","lastRole","message","parts","tool_call","c","url","mimeTypeWithPrefix","base64Image","mimeType","getMimeType","functionDeclarations","tool","allowedFunctionNames","toolConfig","GoogleChatCompleteResponseTransform","response","responseStatus","_b","errorObject","item","generateErrorResponse","GOOGLE","generation","_c","_d","_e","part","generateInvalidProviderResponseError","GoogleChatCompleteStreamChunkTransform","responseChunk","fallbackId","chunk","parsedChunk","index","idx","GoogleConfig","api_default","GoogleChatCompleteConfig","GoogleChatCompleteResponseTransform","GoogleChatCompleteStreamChunkTransform","google_default","CohereAPIConfig","llmApiKey","api_default","CohereChatCompleteConfig","params","message","messages","lastMessage","chat_history","msg","role","CohereChatCompleteResponseTransform","response","responseStatus","_a","generateErrorResponse","COHERE","input_tokens","output_tokens","CohereChatCompleteStreamChunkTransform","responseChunk","fallbackId","_b","_c","_d","_e","_f","chunk","parsedChunk","CohereConfig","CohereChatCompleteConfig","api_default","CohereChatCompleteResponseTransform","CohereChatCompleteStreamChunkTransform","cohere_default","FireworksAIAPIConfig","llmApiKey","endpoint","api_default","FireworksAIChatCompleteConfig","FireworksAIErrorResponseTransform","response","generateErrorResponse","FIREWORKS_AI","FireworksAIChatCompleteResponseTransform","responseStatus","_a","_b","_c","c","generateInvalidProviderResponseError","FireworksAIChatCompleteStreamChunkTransform","responseChunk","chunk","parsedChunk","FireworksAIConfig","FireworksAIChatCompleteConfig","api_default","FireworksAIChatCompleteResponseTransform","FireworksAIChatCompleteStreamChunkTransform","fireworks_ai_default","PerplexityAIApiConfig","llmApiKey","api_default","PerplexityAIChatCompleteConfig","PerplexityAIChatCompleteResponseTransform","response","responseStatus","_a","generateErrorResponse","PERPLEXITY","generateInvalidProviderResponseError","PerplexityAIChatCompleteStreamChunkTransform","responseChunk","_b","_c","chunk","parsedChunk","PerplexityAIConfig","PerplexityAIChatCompleteConfig","api_default","PerplexityAIChatCompleteResponseTransform","PerplexityAIChatCompleteStreamChunkTransform","perplexity_default","MistralAIAPIConfig","llmApiKey","api_default","MistralAIChatCompleteConfig","MistralAIChatCompleteResponseTransform","response","responseStatus","_a","_b","_c","generateErrorResponse","MISTRAL_AI","c","generateInvalidProviderResponseError","MistralAIChatCompleteStreamChunkTransform","responseChunk","chunk","parsedChunk","MistralAIConfig","MistralAIChatCompleteConfig","api_default","MistralAIChatCompleteResponseTransform","MistralAIChatCompleteStreamChunkTransform","mistral_ai_default","OllamaAPIConfig","providerOptions","api_default","OllamaChatCompleteConfig","OllamaChatCompleteResponseTransform","response","responseStatus","_a","_b","generateErrorResponse","OLLAMA","OllamaChatCompleteStreamChunkTransform","responseChunk","chunk","parsedChunk","OllamaConfig","api_default","OllamaChatCompleteConfig","OllamaChatCompleteResponseTransform","OllamaChatCompleteStreamChunkTransform","ollama_default","Providers","OPEN_AI","openai_default","ANTHROPIC","anthropic_default","TOGETHER_AI","together_ai_default","GROQ","groq_default","GOOGLE","google_default","COHERE","cohere_default","FIREWORKS_AI","fireworks_ai_default","PERPLEXITY","perplexity_default","MISTRAL_AI","mistral_ai_default","OLLAMA","ollama_default","providers_default","setNestedProperty","obj","path","value","parts","current","i","transformToProviderRequest","provider","params","fn","providerConfig","providers_default","transformedRequest","configParam","paramConfigs","paramConfig","transfrom_to_provider_request_default","handleNonStreamingMode","response","responseTransformer","REQUEST_TIMEOUT_STATUS_CODE","responseBodyJson","dlog","handleStreamingMode","provider","requestURL","splitPattern","getStreamModeSplitPattern","fallbackChunkId","readable","writable","writer","reader","isSleepTimeRequired","AZURE_OPEN_AI","encoder","chunk","readStream","GOOGLE","COHERE","BEDROCK","PERPLEXITY","DEEPINFRA","transformFunction","buffer","decoder","isFirstChunk","done","value","parts","lastPart","part","resolve","transformedChunk","handleProviderResponse","response","streamingMode","provider","responseTransformer","requestURL","modelParams","_a","responseTransformerFunction","providerConfig","providers_default","providerTransformers","dlog","handleStreamingMode","handleNonStreamingMode","error","constructRequest","providerConfigMappedHeaders","method","baseHeaders","headers","fetchOptions","handleProviderRequest","providerOptions","inputParams","endpoint","transformedRequestParams","params","isStreamingMode","provider","apiConfig","providers_default","baseUrl","providerEndpoint","fetchOptions","ANTHROPIC","providerConfigMappedHeaders","constructRequest","GOOGLE","FIREWORKS_AI","OLLAMA","dlog","url","response","transformedResponse","handleProviderResponse","error","ApiError","isJsonModeOn","currentModel","jsonMode","modelHasJsonMode","jsonModeModels","handleLlmError","error","provider","dlog","ApiError","applyJsonModeIfEnabled","modelParams","pipe","isJsonModeOn","applyJsonModeIfEnabledForGoogle","transformedRequestParams","currentModel","getProvider","providerString","provider","OPEN_AI","ANTHROPIC","TOGETHER_AI","GOOGLE","GROQ","COHERE","FIREWORKS_AI","PERPLEXITY","OLLAMA","X_AI","hasToolSupport","provider","modelName","modelsByProvider","model","getSupportedToolSettings","_a","_b","providerModel","addToolsToParams","modelParams","pipe","paramsTools","pipeTools","hasParamsTools","providerString","modelName","provider","getProvider","hasToolSupport","hasParallelToolCallSupport","hasToolChoiceSupport","getSupportedToolSettings","callAnthropic","pipe","messages","llmApiKey","stream","paramsTools","modelParams","buildModelParams","addToolsToParams","transformedRequestParams","transfrom_to_provider_request_default","ANTHROPIC","dlog","handleProviderRequest","error","handleLlmError","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","callCohere","pipe","messages","llmApiKey","stream","modelParams","buildModelParams","transformedRequestParams","transfrom_to_provider_request_default","COHERE","dlog","handleProviderRequest","error","handleLlmError","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","callFireworks","pipe","messages","llmApiKey","stream","modelParams","buildModelParams","transformedRequestParams","transfrom_to_provider_request_default","FIREWORKS_AI","dlog","handleProviderRequest","error","handleLlmError","pipeModel","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","callGoogle","pipe","messages","llmApiKey","stream","paramsTools","modelParams","buildModelParams","addToolsToParams","transformedRequestParams","transfrom_to_provider_request_default","GOOGLE","applyJsonModeIfEnabledForGoogle","dlog","handleProviderRequest","error","improveGoogleErrorMessage","handleLlmError","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","OpenAI","callGroq","pipe","messages","llmApiKey","stream","modelParams","buildModelParams","groq","OpenAI","applyJsonModeIfEnabled","transformedRequestParams","transfrom_to_provider_request_default","GROQ","dlog","error","handleLlmError","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","callOllama","pipe","messages","llmApiKey","stream","modelParams","buildModelParams","transformedRequestParams","transfrom_to_provider_request_default","OLLAMA","dlog","handleProviderRequest","error","handleLlmError","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","OpenAI","moderate","openai","prompt","promptText","message","variable","moderation","result","reasons","value","key","callOpenAI","pipe","stream","llmApiKey","messages","paramsTools","validateInput","openai","OpenAI","moderateContent","modelParams","buildModelParams","addToolsToParams","applyJsonModeIfEnabled","dlog","error","handleLlmError","OPEN_AI","ApiError","shouldModerate","flagged","reason","moderate","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","callPerplexity","pipe","messages","llmApiKey","stream","modelParams","buildModelParams","transformedRequestParams","transfrom_to_provider_request_default","PERPLEXITY","dlog","handleProviderRequest","error","handleLlmError","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","OpenAI","callTogether","pipe","messages","llmApiKey","stream","paramsTools","modelParams","buildModelParams","together","OpenAI","applyJsonModeIfEnabled","addToolsToParams","dlog","error","handleLlmError","GROQ","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","OpenAI","callXAI","pipe","stream","llmApiKey","messages","paramsTools","modelParams","buildModelParams","groq","OpenAI","addToolsToParams","dlog","error","handleLlmError","X_AI","model","top_p","max_tokens","temperature","presence_penalty","frequency_penalty","stop","callLLM","pipe","stream","messages","llmApiKey","variables","paramsTools","providerString","modelProvider","getProvider","memoryNames","memory","similarChunks","addContextFromMemory","getRunThread","dlog","OPEN_AI","callOpenAI","ANTHROPIC","callAnthropic","TOGETHER_AI","callTogether","GROQ","callGroq","GOOGLE","callGoogle","X_AI","callXAI","COHERE","callCohere","FIREWORKS_AI","callFireworks","PERPLEXITY","callPerplexity","OLLAMA","callOllama","ApiError","error","handleStreamingResponse","c","response","headers","streamForResponse","stream","controller","encoder","chunk","data","error","ApiError","z","schemaMessage","content","role","tool_calls","VariableSchema","VariablesSchema","functionNameRegex","toolChoiceSchema","value","z","pipeToolSchema","z","PipeSchema","toolChoiceSchema","schemaMessage","VariablesSchema","pipeToolSchema","RequestBodySchema","validateRequestBody","body","result","ApiErrorZod","processLlmResponse","c","rawLlmResponse","_a","_b","_c","_d","_e","isStreaming","completion","toolCalls","isToolCall","logger","handleStreamingResponse","handleGenerateError","error","errorMessage","dlog","ApiError","handleRun","llmKey","hiddenChars","redactedKey","logData","validatedBody","pipe","messages","llmApiKey","stream","variables","model","callLLM","registerV1PipesRun","app","runBaseServer","app","Hono","trimTrailingSlash","customCors","prettyJSON","poweredBy","preFlight","err","c","handleError","registerRoot","registerV1PipesRun","port","heading","server","serve","e","color","outro","spinner","figures","error","detect","p","execa","fs","path","color","exitSetupFailed","errorMessage","warningMessage","displayIntro","calledAsCommand","heading","ensurePackageJson","checkFileExists","create","error","getPackageManager","targetDir","packageManager","checkBaseAIInstalled","packageJson","hasBaseAIDev","hasBaseAICore","installBaseAI","s","installCmd","createDirIfNotExists","dir","filePath","createBaseAIDirectories","baseaiFolder","dotBaseaiFolder","baseaiCreated","dotBaseaiCreated","createConfigFile","configPath","configContent","defaultConfig","formattedCode","formatCode","updatePackageJsonScript","packageJsonPath","packageJsonContent","displayOutro","dimItalic","cyan","updateGitignore","gitignoreEntry","gitignorePath","gitignoreContent","updatedContent","createEnvBaseAIExample","envBaseAIExamplePath","envBaseAIExampleContent","init","debug","interruptHandler","installBaseAIChoice","p","slugify","camelCase","figures","fs","path","fromZodError","exec","promisify","execAsync","defaultConfig","MEMORY_CONSTANTS","createMemory","heading","memoryInfo","value","validatedName","memoryNameSchema","memoryNameSlugified","slugify","memoryNameCamelCase","camelCase","baseDir","path","memoryDir","filePath","dbDir","memoryContent","fs","cyan","memoryDocumentsPath","createDb","dim","figures","dimItalic","error","p","color","embedMemory","memoryNameInput","overwrite","useLocalEmbeddings","s","heading","memoryName","validateMemoryName","checkMemoryExists","memoryFiles","loadMemoryFiles","memoryConfig","loadMemoryConfig","filesToEmbed","filesToDelete","filesToDeploy","gitFilesToDelete","handleGitSyncMemories","doc","embedResult","shouldOverwrite","generateEmbeddings","deleteDocumentsFromDB","updateEmbeddedCommitHash","error","memoryDb","loadDb","docName","deleteDocumentFromDB","p","color","embedDoc","memoryName","documentName","overwrite","heading","spinner","memoryFile","validMemoryName","isMemoryDocExist","result","generateEmbeddings","error","path","fs","getAvailableMemories","memoryPath","p","listMemory","availableMemories","getAvailableMemories","heading","item","icons_default","color","p","retrieveMemory","memory","query","_a","heading","spin","memoryName","validateMemoryName","checkMemoryExists","memoryChunks","getDocumentsFromMemory","useLocalEmbeddings","loadConfig","queryEmbedding","dlog","generateLocalEmbeddings","getOpenAIEmbeddings","similarChunks","cosineSimilaritySearch","MEMORYSETS","chunk","index","header","color","similarity","source","text","error","p","slugify","camelCase","figures","fs","path","z","pipeNameSchema","multiselectHelper","dimItalic","lineItem","cyan","createPipe","tools","getAvailableTools","memories","getAvailableMemories","hasTools","hasMemories","heading","pipeInfo","value","result","memoryName","tool","selectedTools","toolNames","pipeTools","name","selectedMemories","selectedMemoriesNames","pipeMemories","memory","isMemoryAttached","pipeNameSlugified","pipeNameCamelCase","pipeContent","defaultRagPrompt","formattedCode","formatCode","baseDir","filePath","dim","error","p","slugify","camelCase","figures","fs","path","color","z","defaultTool","toolNameSchema","createTool","allTools","getAvailableTools","heading","toolInfo","value","result","isToolPresent","slugifiedName","camelCaseNameToolName","camelCaseNameFnName","description","toolContent","baseDir","filePath","formattedCode","formatCode","error","meowHelp","meow","flags","commands","helpText","options","cli_default","p","fs","path","configDir","path","configFilePath","setLocalEmbeddingsConfig","value","heading","configContent","fs","match","oldValue","updatedContent","oldModel","newModel","memories","getAvailableMemories","memory","embedMemory","error","p","debugMode","cli","heading","unhandled","welcome","path","fileURLToPath","fs","init_default","clear","__filename","__dirname","pkgJsonPath","pkgJson","flags","input","showHelp","cli_default","clear","debug","command","cmd","flag","flg","init_default","debugMode","init","config","loadConfig","dotenv","path","initLogger","auth","runBaseServer","createPipe","createTool","build_default","deploy","deploySingleMemory","deploySingleDocument","listMemory","createMemory","embedDoc","embedMemory","retrieveMemory","setLocalEmbeddingsConfig","_","loginAndPipe","addPipe"]}